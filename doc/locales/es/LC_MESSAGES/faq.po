# SOME DESCRIPTIVE TITLE.
# Copyright (C) MongoDB, Inc. 2008-present. MongoDB, Mongo, and the leaf
# logo are registered trademarks of MongoDB, Inc
# This file is distributed under the same license as the PyMongo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMongo 3.11.1.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-24 18:14-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../faq.rst:2
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:4
msgid "Contents"
msgstr ""

#: ../../faq.rst:7
msgid "Is PyMongo thread-safe?"
msgstr ""

#: ../../faq.rst:9
msgid ""
"PyMongo is thread-safe and provides built-in connection pooling for "
"threaded applications."
msgstr ""

#: ../../faq.rst:15
msgid "Is PyMongo fork-safe?"
msgstr ""

#: ../../faq.rst:17
msgid ""
"PyMongo is not fork-safe. Care must be taken when using instances of "
":class:`~pymongo.mongo_client.MongoClient` with ``fork()``. Specifically,"
" instances of MongoClient must not be copied from a parent process to a "
"child process. Instead, the parent process and each child process must "
"create their own instances of MongoClient. Instances of MongoClient "
"copied from the parent process have a high probability of deadlock in the"
" child process due to the inherent incompatibilities between ``fork()``, "
"threads, and locks described :ref:`below <pymongo-fork-safe-details>`. "
"PyMongo will attempt to issue a warning if there is a chance of this "
"deadlock occurring."
msgstr ""

#: ../../faq.rst:29
msgid ""
"MongoClient spawns multiple threads to run background tasks such as "
"monitoring connected servers. These threads share state that is protected"
" by instances of :class:`~threading.Lock`, which are themselves `not "
"fork-safe`_. The driver is therefore subject to the same limitations as "
"any other multithreaded code that uses :class:`~threading.Lock` (and "
"mutexes in general). One of these limitations is that the locks become "
"useless after ``fork()``. During the fork, all locks are copied over to "
"the child process in the same state as they were in the parent: if they "
"were locked, the copied locks are also locked. The child created by "
"``fork()`` only has one thread, so any locks that were taken out by other"
" threads in the parent will never be released in the child. The next time"
" the child process attempts to acquire one of these locks, deadlock "
"occurs."
msgstr ""

#: ../../faq.rst:41
msgid ""
"For a long but interesting read about the problems of Python locks in "
"multithreaded contexts with ``fork()``, see "
"http://bugs.python.org/issue6721."
msgstr ""

#: ../../faq.rst:49
msgid "How does connection pooling work in PyMongo?"
msgstr ""

#: ../../faq.rst:51
msgid ""
"Every :class:`~pymongo.mongo_client.MongoClient` instance has a built-in "
"connection pool per server in your MongoDB topology. These pools open "
"sockets on demand to support the number of concurrent MongoDB operations "
"that your multi-threaded application requires. There is no thread-"
"affinity for sockets."
msgstr ""

#: ../../faq.rst:56
msgid ""
"The size of each connection pool is capped at ``maxPoolSize``, which "
"defaults to 100. If there are ``maxPoolSize`` connections to a server and"
" all are in use, the next request to that server will wait until one of "
"the connections becomes available."
msgstr ""

#: ../../faq.rst:61
msgid ""
"The client instance opens one additional socket per server in your "
"MongoDB topology for monitoring the server's state."
msgstr ""

#: ../../faq.rst:64
msgid ""
"For example, a client connected to a 3-node replica set opens 3 "
"monitoring sockets. It also opens as many sockets as needed to support a "
"multi-threaded application's concurrent operations on each server, up to "
"``maxPoolSize``. With a ``maxPoolSize`` of 100, if the application only "
"uses the primary (the default), then only the primary connection pool "
"grows and the total connections is at most 103. If the application uses a"
" :class:`~pymongo.read_preferences.ReadPreference` to query the "
"secondaries, their pools also grow and the total connections can reach "
"303."
msgstr ""

#: ../../faq.rst:73
msgid ""
"It is possible to set the minimum number of concurrent connections to "
"each server with ``minPoolSize``, which defaults to 0. The connection "
"pool will be initialized with this number of sockets. If sockets are "
"closed due to any network errors, causing the total number of sockets "
"(both in use and idle) to drop below the minimum, more sockets are opened"
" until the minimum is reached."
msgstr ""

#: ../../faq.rst:79
msgid ""
"The maximum number of milliseconds that a connection can remain idle in "
"the pool before being removed and replaced can be set with "
"``maxIdleTime``, which defaults to `None` (no limit)."
msgstr ""

#: ../../faq.rst:83
msgid ""
"The default configuration for a "
":class:`~pymongo.mongo_client.MongoClient` works for most applications::"
msgstr ""

#: ../../faq.rst:88
msgid ""
"Create this client **once** for each process, and reuse it for all "
"operations. It is a common mistake to create a new client for each "
"request, which is very inefficient."
msgstr ""

#: ../../faq.rst:92
msgid ""
"To support extremely high numbers of concurrent MongoDB operations within"
" one process, increase ``maxPoolSize``::"
msgstr ""

#: ../../faq.rst:97
msgid "... or make it unbounded::"
msgstr ""

#: ../../faq.rst:101
msgid ""
"Once the pool reaches its maximum size, additional threads have to wait "
"for sockets to become available. PyMongo does not limit the number of "
"threads that can wait for sockets to become available and it is the "
"application's responsibility to limit the size of its thread pool to "
"bound queuing during a load spike. Threads are allowed to wait for any "
"length of time unless ``waitQueueTimeoutMS`` is defined::"
msgstr ""

#: ../../faq.rst:110
msgid ""
"A thread that waits more than 100ms (in this example) for a socket raises"
" :exc:`~pymongo.errors.ConnectionFailure`. Use this option if it is more "
"important to bound the duration of operations during a load spike than it"
" is to complete every operation."
msgstr ""

#: ../../faq.rst:115
msgid ""
"When :meth:`~pymongo.mongo_client.MongoClient.close` is called by any "
"thread, all idle sockets are closed, and all sockets that are in use will"
" be closed as they are returned to the pool."
msgstr ""

#: ../../faq.rst:120
msgid "Does PyMongo support Python 3?"
msgstr ""

#: ../../faq.rst:122
msgid ""
"PyMongo supports CPython 3.4+ and PyPy3.5+. See the :doc:`python3` for "
"details."
msgstr ""

#: ../../faq.rst:125
msgid ""
"Does PyMongo support asynchronous frameworks like Gevent, asyncio, "
"Tornado, or Twisted?"
msgstr ""

#: ../../faq.rst:127
msgid "PyMongo fully supports :doc:`Gevent <examples/gevent>`."
msgstr ""

#: ../../faq.rst:129
msgid ""
"To use MongoDB with `asyncio "
"<https://docs.python.org/3/library/asyncio.html>`_ or `Tornado "
"<http://www.tornadoweb.org/>`_, see the `Motor "
"<https://github.com/mongodb/motor>`_ project."
msgstr ""

#: ../../faq.rst:133
msgid ""
"For `Twisted <http://twistedmatrix.com/>`_, see `TxMongo "
"<https://github.com/twisted/txmongo>`_. Its stated mission is to keep "
"feature parity with PyMongo."
msgstr ""

#: ../../faq.rst:140
msgid "Why does PyMongo add an _id field to all of my documents?"
msgstr ""

#: ../../faq.rst:142
msgid ""
"When a document is inserted to MongoDB using "
":meth:`~pymongo.collection.Collection.insert_one`, "
":meth:`~pymongo.collection.Collection.insert_many`, or "
":meth:`~pymongo.collection.Collection.bulk_write`, and that document does"
" not include an ``_id`` field, PyMongo automatically adds one for you, "
"set to an instance of :class:`~bson.objectid.ObjectId`. For example::"
msgstr ""

#: ../../faq.rst:155
msgid ""
"Users often discover this behavior when calling "
":meth:`~pymongo.collection.Collection.insert_many` with a list of "
"references to a single document raises "
":exc:`~pymongo.errors.BulkWriteError`. Several Python idioms lead to this"
" pitfall::"
msgstr ""

#: ../../faq.rst:176
msgid "PyMongo adds an ``_id`` field in this manner for a few reasons:"
msgstr ""

#: ../../faq.rst:178
msgid "All MongoDB documents are required to have an ``_id`` field."
msgstr ""

#: ../../faq.rst:179
msgid ""
"If PyMongo were to insert a document without an ``_id`` MongoDB would add"
" one itself, but it would not report the value back to PyMongo."
msgstr ""

#: ../../faq.rst:181
msgid ""
"Copying the document to insert before adding the ``_id`` field would be "
"prohibitively expensive for most high write volume applications."
msgstr ""

#: ../../faq.rst:184
msgid ""
"If you don't want PyMongo to add an ``_id`` to your documents, insert "
"only documents that already have an ``_id`` field, added by your "
"application."
msgstr ""

#: ../../faq.rst:188
msgid ""
"Key order in subdocuments -- why does my query work in the shell but not "
"PyMongo?"
msgstr ""

#: ../../faq.rst:200
msgid ""
"The key-value pairs in a BSON document can have any order (except that "
"``_id`` is always first). The mongo shell preserves key order when "
"reading and writing data. Observe that \"b\" comes before \"a\" when we "
"create the document and when it is displayed:"
msgstr ""

#: ../../faq.rst:213
msgid ""
"PyMongo represents BSON documents as Python dicts by default, and the "
"order of keys in dicts is not defined. That is, a dict declared with the "
"\"a\" key first is the same, to Python, as one with \"b\" first:"
msgstr ""

#: ../../faq.rst:222
msgid ""
"Therefore, Python dicts are not guaranteed to show keys in the order they"
" are stored in BSON. Here, \"a\" is shown before \"b\":"
msgstr ""

#: ../../faq.rst:228
msgid ""
"To preserve order when reading BSON, use the :class:`~bson.son.SON` "
"class, which is a dict that remembers its key order. First, get a handle "
"to the collection, configured to use :class:`~bson.son.SON` instead of "
"dict:"
msgstr ""

#: ../../faq.rst:246
msgid ""
"Now, documents and subdocuments in query results are represented with "
":class:`~bson.son.SON` objects:"
msgstr ""

#: ../../faq.rst:254
msgid ""
"The subdocument's actual storage layout is now visible: \"b\" is before "
"\"a\"."
msgstr ""

#: ../../faq.rst:256
msgid ""
"Because a dict's key order is not defined, you cannot predict how it will"
" be serialized **to** BSON. But MongoDB considers subdocuments equal only"
" if their keys have the same order. So if you use a dict to query on a "
"subdocument it may not match:"
msgstr ""

#: ../../faq.rst:264
msgid "Swapping the key order in your query makes no difference:"
msgstr ""

#: ../../faq.rst:269
msgid "... because, as we saw above, Python considers the two dicts the same."
msgstr ""

#: ../../faq.rst:271
msgid ""
"There are two solutions. First, you can match the subdocument field-by-"
"field:"
msgstr ""

#: ../../faq.rst:277
msgid ""
"The query matches any subdocument with an \"a\" of 1.0 and a \"b\" of "
"1.0, regardless of the order you specify them in Python or the order they"
" are stored in BSON. Additionally, this query now matches subdocuments "
"with additional keys besides \"a\" and \"b\", whereas the previous query "
"required an exact match."
msgstr ""

#: ../../faq.rst:282
msgid ""
"The second solution is to use a :class:`~bson.son.SON` to specify the key"
" order:"
msgstr ""

#: ../../faq.rst:288
msgid ""
"The key order you use when you create a :class:`~bson.son.SON` is "
"preserved when it is serialized to BSON and used as a query. Thus you can"
" create a subdocument that exactly matches the subdocument in the "
"collection."
msgstr ""

#: ../../faq.rst:292
msgid ""
"`MongoDB Manual entry on subdocument matching "
"<http://docs.mongodb.org/manual/tutorial/query-documents/#embedded-"
"documents>`_."
msgstr ""

#: ../../faq.rst:296
msgid "What does *CursorNotFound* cursor id not valid at server mean?"
msgstr ""

#: ../../faq.rst:297
msgid ""
"Cursors in MongoDB can timeout on the server if they've been open for a "
"long time without any operations being performed on them. This can lead "
"to an :class:`~pymongo.errors.CursorNotFound` exception being raised when"
" attempting to iterate the cursor."
msgstr ""

#: ../../faq.rst:303
msgid "How do I change the timeout value for cursors?"
msgstr ""

#: ../../faq.rst:304
msgid ""
"MongoDB doesn't support custom timeouts for cursors, but cursor timeouts "
"can be turned off entirely. Pass ``no_cursor_timeout=True`` to "
":meth:`~pymongo.collection.Collection.find`."
msgstr ""

#: ../../faq.rst:309
msgid "How can I store :mod:`decimal.Decimal` instances?"
msgstr ""

#: ../../faq.rst:311
msgid ""
"PyMongo >= 3.4 supports the Decimal128 BSON type introduced in MongoDB "
"3.4. See :mod:`~bson.decimal128` for more information."
msgstr ""

#: ../../faq.rst:314
msgid ""
"MongoDB <= 3.2 only supports IEEE 754 floating points - the same as the "
"Python float type. The only way PyMongo could store Decimal instances to "
"these versions of MongoDB would be to convert them to this standard, so "
"you'd really only be storing floats anyway - we force users to do this "
"conversion explicitly so that they are aware that it is happening."
msgstr ""

#: ../../faq.rst:321
msgid ""
"I'm saving ``9.99`` but when I query my document contains "
"``9.9900000000000002`` - what's going on here?"
msgstr ""

#: ../../faq.rst:322
msgid ""
"The database representation is ``9.99`` as an IEEE floating point (which "
"is common to MongoDB and Python as well as most other modern languages). "
"The problem is that ``9.99`` cannot be represented exactly with a double "
"precision floating point - this is true in some versions of Python as "
"well:"
msgstr ""

#: ../../faq.rst:331
msgid ""
"The result that you get when you save ``9.99`` with PyMongo is exactly "
"the same as the result you'd get saving it with the JavaScript shell or "
"any of the other languages (and as the data you're working with when you "
"type ``9.99`` into a Python program)."
msgstr ""

#: ../../faq.rst:337
msgid "Can you add attribute style access for documents?"
msgstr ""

#: ../../faq.rst:338
msgid ""
"This request has come up a number of times but we've decided not to "
"implement anything like this. The relevant `jira case "
"<http://jira.mongodb.org/browse/PYTHON-35>`_ has some information about "
"the decision, but here is a brief summary:"
msgstr ""

#: ../../faq.rst:343
msgid ""
"This will pollute the attribute namespace for documents, so could lead to"
" subtle bugs / confusing errors when using a key with the same name as a "
"dictionary method."
msgstr ""

#: ../../faq.rst:347
msgid ""
"The only reason we even use SON objects instead of regular dictionaries "
"is to maintain key ordering, since the server requires this for certain "
"operations. So we're hesitant to needlessly complicate SON (at some point"
" it's hypothetically possible we might want to revert back to using "
"dictionaries alone, without breaking backwards compatibility for "
"everyone)."
msgstr ""

#: ../../faq.rst:354
msgid ""
"It's easy (and Pythonic) for new users to deal with documents, since they"
" behave just like dictionaries. If we start changing their behavior it "
"adds a barrier to entry for new users - another class to learn."
msgstr ""

#: ../../faq.rst:360
msgid "What is the correct way to handle time zones with PyMongo?"
msgstr ""

#: ../../faq.rst:362
msgid ""
"See :doc:`examples/datetimes` for examples on how to handle "
":class:`~datetime.datetime` objects correctly."
msgstr ""

#: ../../faq.rst:366
msgid "How can I save a :mod:`datetime.date` instance?"
msgstr ""

#: ../../faq.rst:367
msgid ""
"PyMongo doesn't support saving :mod:`datetime.date` instances, since "
"there is no BSON type for dates without times. Rather than having the "
"driver enforce a convention for converting :mod:`datetime.date` instances"
" to :mod:`datetime.datetime` instances for you, any conversion should be "
"performed in your client code."
msgstr ""

#: ../../faq.rst:376
msgid ""
"When I query for a document by ObjectId in my web application I get no "
"result"
msgstr ""

#: ../../faq.rst:377
msgid ""
"It's common in web applications to encode documents' ObjectIds in URLs, "
"like::"
msgstr ""

#: ../../faq.rst:381
msgid ""
"Your web framework will pass the ObjectId portion of the URL to your "
"request handler as a string, so it must be converted to "
":class:`~bson.objectid.ObjectId` before it is passed to "
":meth:`~pymongo.collection.Collection.find_one`. It is a common mistake "
"to forget to do this conversion. Here's how to do it correctly in Flask_ "
"(other web frameworks are similar)::"
msgstr ""

#: ../../faq.rst:406
msgid ":ref:`querying-by-objectid`"
msgstr ""

#: ../../faq.rst:409
msgid "How can I use PyMongo from Django?"
msgstr ""

#: ../../faq.rst:410
msgid ""
"`Django <http://www.djangoproject.com/>`_ is a popular Python web "
"framework. Django includes an ORM, :mod:`django.db`. Currently, there's "
"no official MongoDB backend for Django."
msgstr ""

#: ../../faq.rst:414
msgid ""
"`django-mongodb-engine <https://django-mongodb-engine.readthedocs.io/>`_ "
"is an unofficial MongoDB backend that supports Django aggregations, "
"(atomic) updates, embedded objects, Map/Reduce and GridFS. It allows you "
"to use most of Django's built-in features, including the ORM, admin, "
"authentication, site and session frameworks and caching."
msgstr ""

#: ../../faq.rst:420
msgid ""
"However, it's easy to use MongoDB (and PyMongo) from Django without using"
" a Django backend. Certain features of Django that require "
":mod:`django.db` (admin, authentication and sessions) will not work using"
" just MongoDB, but most of what Django provides can still be used."
msgstr ""

#: ../../faq.rst:426
msgid ""
"One project which should make working with MongoDB and Django easier is "
"`mango <http://github.com/vpulim/mango>`_. Mango is a set of MongoDB "
"backends for Django sessions and authentication (bypassing "
":mod:`django.db` entirely)."
msgstr ""

#: ../../faq.rst:434
msgid "Does PyMongo work with **mod_wsgi**?"
msgstr ""

#: ../../faq.rst:435
msgid "Yes. See the configuration guide for :ref:`pymongo-and-mod_wsgi`."
msgstr ""

#: ../../faq.rst:438
msgid "Does PyMongo work with PythonAnywhere?"
msgstr ""

#: ../../faq.rst:439
msgid ""
"No. PyMongo creates Python threads which `PythonAnywhere "
"<https://www.pythonanywhere.com>`_ does not support. For more information"
" see `PYTHON-1495 <https://jira.mongodb.org/browse/PYTHON-1495>`_."
msgstr ""

#: ../../faq.rst:444
msgid ""
"How can I use something like Python's :mod:`json` module to encode my "
"documents to JSON?"
msgstr ""

#: ../../faq.rst:445
msgid ""
":mod:`~bson.json_util` is PyMongo's built in, flexible tool for using "
"Python's :mod:`json` module with BSON documents and `MongoDB Extended "
"JSON <https://docs.mongodb.com/manual/reference/mongodb-extended-"
"json/>`_. The :mod:`json` module won't work out of the box with all "
"documents from PyMongo as PyMongo supports some special types (like "
":class:`~bson.objectid.ObjectId` and :class:`~bson.dbref.DBRef`) that are"
" not supported in JSON."
msgstr ""

#: ../../faq.rst:452
msgid ""
"`python-bsonjs <https://pypi.python.org/pypi/python-bsonjs>`_ is a fast "
"BSON to MongoDB Extended JSON converter built on top of `libbson "
"<https://github.com/mongodb/libbson>`_. `python-bsonjs` does not depend "
"on PyMongo and can offer a nice performance improvement over "
":mod:`~bson.json_util`. `python-bsonjs` works best with PyMongo when "
"using :class:`~bson.raw_bson.RawBSONDocument`."
msgstr ""

#: ../../faq.rst:460
msgid ""
"Why do I get OverflowError decoding dates stored by another language's "
"driver?"
msgstr ""

#: ../../faq.rst:461
msgid ""
"PyMongo decodes BSON datetime values to instances of Python's "
":class:`datetime.datetime`. Instances of :class:`datetime.datetime` are "
"limited to years between :data:`datetime.MINYEAR` (usually 1) and "
":data:`datetime.MAXYEAR` (usually 9999). Some MongoDB drivers (e.g. the "
"PHP driver) can store BSON datetimes with year values far outside those "
"supported by :class:`datetime.datetime`."
msgstr ""

#: ../../faq.rst:468
msgid ""
"There are a few ways to work around this issue. One option is to filter "
"out documents with values outside of the range supported by "
":class:`datetime.datetime`::"
msgstr ""

#: ../../faq.rst:476
msgid ""
"Another option, assuming you don't need the datetime field, is to filter "
"out just that field::"
msgstr ""

#: ../../faq.rst:484
msgid "Using PyMongo with Multiprocessing"
msgstr ""

#: ../../faq.rst:486
msgid ""
"On Unix systems the multiprocessing module spawns processes using "
"``fork()``. Care must be taken when using instances of "
":class:`~pymongo.mongo_client.MongoClient` with ``fork()``. Specifically,"
" instances of MongoClient must not be copied from a parent process to a "
"child process. Instead, the parent process and each child process must "
"create their own instances of MongoClient. For example::"
msgstr ""

#: ../../faq.rst:501
msgid "**Never do this**::"
msgstr ""

#: ../../faq.rst:514
msgid ""
"Instances of MongoClient copied from the parent process have a high "
"probability of deadlock in the child process due to :ref:`inherent "
"incompatibilities between fork(), threads, and locks <pymongo-fork-safe-"
"details>`. PyMongo will attempt to issue a warning if there is a chance "
"of this deadlock occurring."
msgstr ""

#: ../../faq.rst:520
msgid ":ref:`pymongo-fork-safe`"
msgstr ""

