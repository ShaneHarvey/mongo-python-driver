# SOME DESCRIPTIVE TITLE.
# Copyright (C) MongoDB, Inc. 2008-present. MongoDB, Mongo, and the leaf
# logo are registered trademarks of MongoDB, Inc
# This file is distributed under the same license as the PyMongo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMongo 3.11.1.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-24 18:14-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../python3.rst:2
msgid "Python 3 FAQ"
msgstr ""

#: ../../python3.rst:4
msgid "Contents"
msgstr ""

#: ../../python3.rst:7
msgid "What Python 3 versions are supported?"
msgstr ""

#: ../../python3.rst:9
msgid "PyMongo supports CPython 3.4+ and PyPy3.5+."
msgstr ""

#: ../../python3.rst:12
msgid "Are there any PyMongo behavior changes with Python 3?"
msgstr ""

#: ../../python3.rst:14
msgid ""
"Only one intentional change. Instances of :class:`bytes` are encoded as "
"BSON type 5 (Binary data) with subtype 0. In Python 3 they are decoded "
"back to :class:`bytes`. In Python 2 they are decoded to "
":class:`~bson.binary.Binary` with subtype 0."
msgstr ""

#: ../../python3.rst:20
msgid ""
"For example, let's insert a :class:`bytes` instance using Python 3 then "
"read it back. Notice the byte string is decoded back to :class:`bytes`::"
msgstr ""

#: ../../python3.rst:33
msgid ""
"Now retrieve the same document in Python 2. Notice the byte string is "
"decoded to :class:`~bson.binary.Binary`::"
msgstr ""

#: ../../python3.rst:45
msgid ""
"There is a similar change in behavior in parsing JSON binary with subtype"
" 0. In Python 3 they are decoded into :class:`bytes`. In Python 2 they "
"are decoded to :class:`~bson.binary.Binary` with subtype 0."
msgstr ""

#: ../../python3.rst:49
msgid ""
"For example, let's decode a JSON binary subtype 0 using Python 3. Notice "
"the byte string is decoded to :class:`bytes`::"
msgstr ""

#: ../../python3.rst:59
msgid ""
"Now decode the same JSON in Python 2 . Notice the byte string is decoded "
"to :class:`~bson.binary.Binary`::"
msgstr ""

#: ../../python3.rst:70
msgid ""
"Why can't I share pickled ObjectIds between some versions of Python 2 and"
" 3?"
msgstr ""

#: ../../python3.rst:72
msgid ""
"Instances of :class:`~bson.objectid.ObjectId` pickled using Python 2 can "
"always be unpickled using Python 3."
msgstr ""

#: ../../python3.rst:75
msgid ""
"If you pickled an ObjectId using Python 2 and want to unpickle it using "
"Python 3 you must pass ``encoding='latin-1'`` to pickle.loads::"
msgstr ""

#: ../../python3.rst:97
msgid ""
"If you need to pickle ObjectIds using Python 3 and unpickle them using "
"Python 2 you must use ``protocol <= 2``::"
msgstr ""

