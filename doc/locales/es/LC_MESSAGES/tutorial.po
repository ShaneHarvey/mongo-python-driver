# SOME DESCRIPTIVE TITLE.
# Copyright (C) MongoDB, Inc. 2008-present. MongoDB, Mongo, and the leaf
# logo are registered trademarks of MongoDB, Inc
# This file is distributed under the same license as the PyMongo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMongo 3.11.1.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-24 18:14-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tutorial.rst:2
msgid "Tutorial"
msgstr ""

#: ../../tutorial.rst:10
msgid ""
"This tutorial is intended as an introduction to working with **MongoDB** "
"and **PyMongo**."
msgstr ""

#: ../../tutorial.rst:14
msgid "Prerequisites"
msgstr ""

#: ../../tutorial.rst:15
msgid ""
"Before we start, make sure that you have the **PyMongo** distribution "
":doc:`installed <installation>`. In the Python shell, the following "
"should run without raising an exception:"
msgstr ""

#: ../../tutorial.rst:23
msgid ""
"This tutorial also assumes that a MongoDB instance is running on the "
"default host and port. Assuming you have `downloaded and installed "
"<http://www.mongodb.org/display/DOCS/Getting+Started>`_ MongoDB, you can "
"start it like so:"
msgstr ""

#: ../../tutorial.rst:33
msgid "Making a Connection with MongoClient"
msgstr ""

#: ../../tutorial.rst:34
msgid ""
"The first step when working with **PyMongo** is to create a "
":class:`~pymongo.mongo_client.MongoClient` to the running **mongod** "
"instance. Doing so is easy:"
msgstr ""

#: ../../tutorial.rst:43
msgid ""
"The above code will connect on the default host and port. We can also "
"specify the host and port explicitly, as follows:"
msgstr ""

#: ../../tutorial.rst:50
msgid "Or use the MongoDB URI format:"
msgstr ""

#: ../../tutorial.rst:57
msgid "Getting a Database"
msgstr ""

#: ../../tutorial.rst:58
msgid ""
"A single instance of MongoDB can support multiple independent `databases "
"<http://www.mongodb.org/display/DOCS/Databases>`_. When working with "
"PyMongo you access databases using attribute style access on "
":class:`~pymongo.mongo_client.MongoClient` instances:"
msgstr ""

#: ../../tutorial.rst:67
msgid ""
"If your database name is such that using attribute style access won't "
"work (like ``test-database``), you can use dictionary style access "
"instead:"
msgstr ""

#: ../../tutorial.rst:76
msgid "Getting a Collection"
msgstr ""

#: ../../tutorial.rst:77
msgid ""
"A `collection <http://www.mongodb.org/display/DOCS/Collections>`_ is a "
"group of documents stored in MongoDB, and can be thought of as roughly "
"the equivalent of a table in a relational database. Getting a collection "
"in PyMongo works the same as getting a database:"
msgstr ""

#: ../../tutorial.rst:86
msgid "or (using dictionary style access):"
msgstr ""

#: ../../tutorial.rst:92
msgid ""
"An important note about collections (and databases) in MongoDB is that "
"they are created lazily - none of the above commands have actually "
"performed any operations on the MongoDB server. Collections and databases"
" are created when the first document is inserted into them."
msgstr ""

#: ../../tutorial.rst:98
msgid "Documents"
msgstr ""

#: ../../tutorial.rst:99
msgid ""
"Data in MongoDB is represented (and stored) using JSON-style documents. "
"In PyMongo we use dictionaries to represent documents. As an example, the"
" following dictionary might be used to represent a blog post:"
msgstr ""

#: ../../tutorial.rst:112
msgid ""
"Note that documents can contain native Python types (like "
":class:`datetime.datetime` instances) which will be automatically "
"converted to and from the appropriate `BSON "
"<http://www.mongodb.org/display/DOCS/BSON>`_ types."
msgstr ""

#: ../../tutorial.rst:117
msgid "Todo"
msgstr ""

#: ../../tutorial.rst:117
msgid "link to table of Python <-> BSON types"
msgstr ""

#: ../../tutorial.rst:120
msgid "Inserting a Document"
msgstr ""

#: ../../tutorial.rst:121
msgid ""
"To insert a document into a collection we can use the "
":meth:`~pymongo.collection.Collection.insert_one` method:"
msgstr ""

#: ../../tutorial.rst:131
msgid ""
"When a document is inserted a special key, ``\"_id\"``, is automatically "
"added if the document doesn't already contain an ``\"_id\"`` key. The "
"value of ``\"_id\"`` must be unique across the collection. "
":meth:`~pymongo.collection.Collection.insert_one` returns an instance of "
":class:`~pymongo.results.InsertOneResult`. For more information on "
"``\"_id\"``, see the `documentation on _id "
"<http://www.mongodb.org/display/DOCS/Object+IDs>`_."
msgstr ""

#: ../../tutorial.rst:139
msgid ""
"After inserting the first document, the *posts* collection has actually "
"been created on the server. We can verify this by listing all of the "
"collections in our database:"
msgstr ""

#: ../../tutorial.rst:149
msgid ""
"Getting a Single Document With "
":meth:`~pymongo.collection.Collection.find_one`"
msgstr ""

#: ../../tutorial.rst:150
msgid ""
"The most basic type of query that can be performed in MongoDB is "
":meth:`~pymongo.collection.Collection.find_one`. This method returns a "
"single document matching a query (or ``None`` if there are no matches). "
"It is useful when you know there is only one matching document, or are "
"only interested in the first match. Here we use "
":meth:`~pymongo.collection.Collection.find_one` to get the first document"
" from the posts collection:"
msgstr ""

#: ../../tutorial.rst:168
msgid "The result is a dictionary matching the one that we inserted previously."
msgstr ""

#: ../../tutorial.rst:170
msgid ""
"The returned document contains an ``\"_id\"``, which was automatically "
"added on insert."
msgstr ""

#: ../../tutorial.rst:173
msgid ""
":meth:`~pymongo.collection.Collection.find_one` also supports querying on"
" specific elements that the resulting document must match. To limit our "
"results to a document with author \"Mike\" we do:"
msgstr ""

#: ../../tutorial.rst:186
msgid "If we try with a different author, like \"Eliot\", we'll get no result:"
msgstr ""

#: ../../tutorial.rst:196
msgid "Querying By ObjectId"
msgstr ""

#: ../../tutorial.rst:197
msgid ""
"We can also find a post by its ``_id``, which in our example is an "
"ObjectId:"
msgstr ""

#: ../../tutorial.rst:210
msgid "Note that an ObjectId is not the same as its string representation:"
msgstr ""

#: ../../tutorial.rst:218
msgid ""
"A common task in web applications is to get an ObjectId from the request "
"URL and find the matching document. It's necessary in this case to "
"**convert the ObjectId from a string** before passing it to "
"``find_one``::"
msgstr ""

#: ../../tutorial.rst:230
msgid ":ref:`web-application-querying-by-objectid`"
msgstr ""

#: ../../tutorial.rst:233
msgid "A Note On Unicode Strings"
msgstr ""

#: ../../tutorial.rst:234
msgid ""
"You probably noticed that the regular Python strings we stored earlier "
"look different when retrieved from the server (e.g. u'Mike' instead of "
"'Mike'). A short explanation is in order."
msgstr ""

#: ../../tutorial.rst:238
msgid ""
"MongoDB stores data in `BSON format <http://bsonspec.org>`_. BSON strings"
" are UTF-8 encoded so PyMongo must ensure that any strings it stores "
"contain only valid UTF-8 data. Regular strings (<type 'str'>) are "
"validated and stored unaltered. Unicode strings (<type 'unicode'>) are "
"encoded UTF-8 first. The reason our example string is represented in the "
"Python shell as u'Mike' instead of 'Mike' is that PyMongo decodes each "
"BSON string to a Python unicode string, not a regular str."
msgstr ""

#: ../../tutorial.rst:246
msgid ""
"`You can read more about Python unicode strings here "
"<http://docs.python.org/howto/unicode.html>`_."
msgstr ""

#: ../../tutorial.rst:250
msgid "Bulk Inserts"
msgstr ""

#: ../../tutorial.rst:251
msgid ""
"In order to make querying a little more interesting, let's insert a few "
"more documents. In addition to inserting a single document, we can also "
"perform *bulk insert* operations, by passing a list as the first argument"
" to :meth:`~pymongo.collection.Collection.insert_many`. This will insert "
"each document in the list, sending only a single command to the server:"
msgstr ""

#: ../../tutorial.rst:272
msgid "There are a couple of interesting things to note about this example:"
msgstr ""

#: ../../tutorial.rst:274
msgid ""
"The result from :meth:`~pymongo.collection.Collection.insert_many` now "
"returns two :class:`~bson.objectid.ObjectId` instances, one for each "
"inserted document."
msgstr ""

#: ../../tutorial.rst:277
msgid ""
"``new_posts[1]`` has a different \"shape\" than the other posts - there "
"is no ``\"tags\"`` field and we've added a new field, ``\"title\"``. This"
" is what we mean when we say that MongoDB is *schema-free*."
msgstr ""

#: ../../tutorial.rst:283
msgid "Querying for More Than One Document"
msgstr ""

#: ../../tutorial.rst:284
msgid ""
"To get more than a single document as the result of a query we use the "
":meth:`~pymongo.collection.Collection.find` method. "
":meth:`~pymongo.collection.Collection.find` returns a "
":class:`~pymongo.cursor.Cursor` instance, which allows us to iterate over"
" all matching documents. For example, we can iterate over every document "
"in the ``posts`` collection:"
msgstr ""

#: ../../tutorial.rst:312
msgid ""
"Just like we did with :meth:`~pymongo.collection.Collection.find_one`, we"
" can pass a document to :meth:`~pymongo.collection.Collection.find` to "
"limit the returned results. Here, we get only those documents whose "
"author is \"Mike\":"
msgstr ""

#: ../../tutorial.rst:334
msgid "Counting"
msgstr ""

#: ../../tutorial.rst:335
msgid ""
"If we just want to know how many documents match a query we can perform a"
" :meth:`~pymongo.collection.Collection.count_documents` operation instead"
" of a full query. We can get a count of all of the documents in a "
"collection:"
msgstr ""

#: ../../tutorial.rst:345
msgid "or just of those documents that match a specific query:"
msgstr ""

#: ../../tutorial.rst:353
msgid "Range Queries"
msgstr ""

#: ../../tutorial.rst:354
msgid ""
"MongoDB supports many different types of `advanced queries "
"<http://www.mongodb.org/display/DOCS/Advanced+Queries>`_. As an example, "
"lets perform a query where we limit results to posts older than a certain"
" date, but also sort the results by author:"
msgstr ""

#: ../../tutorial.rst:376
msgid ""
"Here we use the special ``\"$lt\"`` operator to do a range query, and "
"also call :meth:`~pymongo.cursor.Cursor.sort` to sort the results by "
"author."
msgstr ""

#: ../../tutorial.rst:381
msgid "Indexing"
msgstr ""

#: ../../tutorial.rst:383
msgid ""
"Adding indexes can help accelerate certain queries and can also add "
"additional functionality to querying and storing documents. In this "
"example, we'll demonstrate how to create a `unique index "
"<http://docs.mongodb.org/manual/core/index-unique/>`_ on a key that "
"rejects documents whose value for that key already exists in the index."
msgstr ""

#: ../../tutorial.rst:389
msgid "First, we'll need to create the index:"
msgstr ""

#: ../../tutorial.rst:398
msgid ""
"Notice that we have two indexes now: one is the index on ``_id`` that "
"MongoDB creates automatically, and the other is the index on ``user_id`` "
"we just created."
msgstr ""

#: ../../tutorial.rst:402
msgid "Now let's set up some user profiles:"
msgstr ""

#: ../../tutorial.rst:411
msgid ""
"The index prevents us from inserting a document whose ``user_id`` is "
"already in the collection:"
msgstr ""

#: ../../tutorial.rst:424
msgid ""
"The MongoDB documentation on `indexes "
"<http://www.mongodb.org/display/DOCS/Indexes>`_"
msgstr ""

