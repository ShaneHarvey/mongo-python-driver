# SOME DESCRIPTIVE TITLE.
# Copyright (C) MongoDB, Inc. 2008-present. MongoDB, Mongo, and the leaf
# logo are registered trademarks of MongoDB, Inc
# This file is distributed under the same license as the PyMongo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMongo 3.11.1.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-24 18:14-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../api/bson/binary.rst:2
msgid ""
":mod:`binary` -- Tools for representing binary data to be stored in "
"MongoDB"
msgstr ""

#: bson.binary.BINARY_SUBTYPE:1 of
msgid "BSON binary subtype for binary data."
msgstr ""

#: bson.binary.BINARY_SUBTYPE:3 of
msgid "This is the default subtype for binary data."
msgstr ""

#: bson.binary.FUNCTION_SUBTYPE:1 of
msgid "BSON binary subtype for functions."
msgstr ""

#: bson.binary.OLD_BINARY_SUBTYPE:1 of
msgid "Old BSON binary subtype for binary data."
msgstr ""

#: bson.binary.OLD_BINARY_SUBTYPE:3 of
msgid ""
"This is the old default subtype, the current default is "
":data:`BINARY_SUBTYPE`."
msgstr ""

#: bson.binary.OLD_UUID_SUBTYPE:1 of
msgid "Old BSON binary subtype for a UUID."
msgstr ""

#: bson.binary.OLD_UUID_SUBTYPE:3 of
msgid ""
":class:`uuid.UUID` instances will automatically be encoded by :mod:`bson`"
" using this subtype."
msgstr ""

#: bson.binary.UUID_SUBTYPE:1 of
msgid "BSON binary subtype for a UUID."
msgstr ""

#: bson.binary.UUID_SUBTYPE:3 of
msgid ""
"This is the new BSON binary subtype for UUIDs. The current default is "
":data:`OLD_UUID_SUBTYPE`."
msgstr ""

#: bson.binary.UUID_SUBTYPE:6 of
msgid "Changed to subtype 4."
msgstr ""

#: bson.binary.STANDARD:1 of
msgid "An alias for :data:`UuidRepresentation.STANDARD`."
msgstr ""

#: bson.binary.PYTHON_LEGACY:1 of
msgid "An alias for :data:`UuidRepresentation.PYTHON_LEGACY`."
msgstr ""

#: bson.binary.JAVA_LEGACY:1 of
msgid "An alias for :data:`UuidRepresentation.JAVA_LEGACY`."
msgstr ""

#: bson.binary.CSHARP_LEGACY:3 bson.binary.JAVA_LEGACY:3 of
msgid "BSON binary subtype 4 is decoded using RFC-4122 byte order."
msgstr ""

#: bson.binary.CSHARP_LEGACY:1 of
msgid "An alias for :data:`UuidRepresentation.CSHARP_LEGACY`."
msgstr ""

#: bson.binary.MD5_SUBTYPE:1 of
msgid "BSON binary subtype for an MD5 hash."
msgstr ""

#: bson.binary.USER_DEFINED_SUBTYPE:1 of
msgid "BSON binary subtype for any user defined structure."
msgstr ""

#: bson.binary.UuidRepresentation.CSHARP_LEGACY:1 of
msgid "The C#/.net legacy UUID representation."
msgstr ""

#: bson.binary.UuidRepresentation.CSHARP_LEGACY:3 of
msgid ""
":class:`uuid.UUID` instances will automatically be encoded to and decoded"
" from BSON binary subtype :data:`OLD_UUID_SUBTYPE`, using the C# driver's"
" legacy byte order."
msgstr ""

#: bson.binary.UuidRepresentation.CSHARP_LEGACY:7 of
msgid "See :ref:`csharp-legacy-representation-details` for details."
msgstr ""

#: bson.binary.UuidRepresentation.JAVA_LEGACY:1 of
msgid "The Java legacy UUID representation."
msgstr ""

#: bson.binary.UuidRepresentation.JAVA_LEGACY:3 of
msgid ""
":class:`uuid.UUID` instances will automatically be encoded to and decoded"
" from BSON binary subtype :data:`OLD_UUID_SUBTYPE`, using the Java "
"driver's legacy byte order."
msgstr ""

#: bson.binary.UuidRepresentation.JAVA_LEGACY:7 of
msgid "See :ref:`java-legacy-representation-details` for details."
msgstr ""

#: bson.binary.UuidRepresentation.PYTHON_LEGACY:1 of
msgid "The Python legacy UUID representation."
msgstr ""

#: bson.binary.UuidRepresentation.PYTHON_LEGACY:3 of
msgid ""
":class:`uuid.UUID` instances will automatically be encoded to and decoded"
" from BSON binary, using RFC-4122 byte order with binary subtype "
":data:`OLD_UUID_SUBTYPE`."
msgstr ""

#: bson.binary.UuidRepresentation.PYTHON_LEGACY:7 of
msgid "See :ref:`python-legacy-representation-details` for details."
msgstr ""

#: bson.binary.UuidRepresentation.STANDARD:1 of
msgid "The standard UUID representation."
msgstr ""

#: bson.binary.UuidRepresentation.STANDARD:3 of
msgid ""
":class:`uuid.UUID` instances will automatically be encoded to and decoded"
" from BSON binary, using RFC-4122 byte order with binary subtype "
":data:`UUID_SUBTYPE`."
msgstr ""

#: bson.binary.UuidRepresentation.STANDARD:7 of
msgid "See :ref:`standard-representation-details` for details."
msgstr ""

#: bson.binary.UuidRepresentation.UNSPECIFIED:1 of
msgid "An unspecified UUID representation."
msgstr ""

#: bson.binary.UuidRepresentation.UNSPECIFIED:3 of
msgid ""
"When configured, :class:`uuid.UUID` instances will **not** be "
"automatically encoded to or decoded from :class:`~bson.binary.Binary`. "
"When encoding a :class:`uuid.UUID` instance, an error will be raised. To "
"encode a :class:`uuid.UUID` instance with this configuration, it must be "
"wrapped in the :class:`~bson.binary.Binary` class by the application "
"code. When decoding a BSON binary field with a UUID subtype, a "
":class:`~bson.binary.Binary` instance will be returned instead of a "
":class:`uuid.UUID` instance."
msgstr ""

#: bson.binary.UuidRepresentation.UNSPECIFIED:12 of
msgid "See :ref:`unspecified-representation-details` for details."
msgstr ""

#: bson.binary.Binary:1 of
msgid "Bases: :class:`bytes`"
msgstr ""

#: bson.binary.Binary:1 of
msgid "Representation of BSON binary data."
msgstr ""

#: bson.binary.Binary:3 of
msgid ""
"This is necessary because we want to represent Python strings as the BSON"
" string type. We need to wrap binary data so we can tell the difference "
"between what should be considered binary data and what should be "
"considered a string when we encode to BSON."
msgstr ""

#: bson.binary.Binary:8 of
msgid ""
"Raises TypeError if `data` is not an instance of :class:`bytes` "
"(:class:`str` in python 2) or `subtype` is not an instance of "
":class:`int`. Raises ValueError if `subtype` is not in [0, 256)."
msgstr ""

#: bson.binary.Binary:13 of
msgid ""
"In python 3 instances of Binary with subtype 0 will be decoded directly "
"to :class:`bytes`."
msgstr ""

#: bson.BSON.decode bson.BSON.encode bson.binary.Binary
#: bson.binary.Binary.as_uuid bson.binary.Binary.from_uuid
#: bson.binary.UUIDLegacy bson.code.Code bson.codec_options.TypeRegistry
#: bson.dbref.DBRef bson.decimal128.Decimal128
#: bson.decimal128.Decimal128.from_bid bson.decode bson.decode_file_iter
#: bson.decode_iter bson.encode bson.int64.Int64 bson.is_valid
#: bson.json_util.dumps bson.json_util.loads bson.objectid.ObjectId
#: bson.objectid.ObjectId.from_datetime bson.objectid.ObjectId.is_valid
#: bson.raw_bson.RawBSONDocument bson.regex.Regex bson.regex.Regex.from_native
#: bson.timestamp.Timestamp gridfs.GridFS gridfs.GridFS.delete
#: gridfs.GridFS.exists gridfs.GridFS.find gridfs.GridFS.find_one
#: gridfs.GridFS.get gridfs.GridFS.get_last_version gridfs.GridFS.get_version
#: gridfs.GridFS.list gridfs.GridFS.new_file gridfs.GridFS.put
#: gridfs.GridFSBucket gridfs.GridFSBucket.delete
#: gridfs.GridFSBucket.download_to_stream
#: gridfs.GridFSBucket.download_to_stream_by_name gridfs.GridFSBucket.find
#: gridfs.GridFSBucket.open_download_stream
#: gridfs.GridFSBucket.open_download_stream_by_name
#: gridfs.GridFSBucket.open_upload_stream
#: gridfs.GridFSBucket.open_upload_stream_with_id gridfs.GridFSBucket.rename
#: gridfs.GridFSBucket.upload_from_stream
#: gridfs.GridFSBucket.upload_from_stream_with_id gridfs.grid_file.GridIn
#: gridfs.grid_file.GridIn.write gridfs.grid_file.GridOut
#: gridfs.grid_file.GridOut.read gridfs.grid_file.GridOut.readline
#: gridfs.grid_file.GridOut.seek of pymongo.bulk.BulkOperationBuilder
#: pymongo.bulk.BulkOperationBuilder.execute
#: pymongo.bulk.BulkOperationBuilder.find
#: pymongo.bulk.BulkOperationBuilder.insert
#: pymongo.bulk.BulkUpsertOperation.replace_one
#: pymongo.bulk.BulkUpsertOperation.update
#: pymongo.bulk.BulkUpsertOperation.update_one
#: pymongo.bulk.BulkWriteOperation.replace_one
#: pymongo.bulk.BulkWriteOperation.update
#: pymongo.bulk.BulkWriteOperation.update_one
#: pymongo.client_session.ClientSession.advance_cluster_time
#: pymongo.client_session.ClientSession.advance_operation_time
#: pymongo.client_session.ClientSession.with_transaction
#: pymongo.client_session.SessionOptions
#: pymongo.client_session.TransactionOptions pymongo.collation.Collation
#: pymongo.collection.Collection pymongo.collection.Collection.aggregate
#: pymongo.collection.Collection.bulk_write pymongo.collection.Collection.count
#: pymongo.collection.Collection.count_documents
#: pymongo.collection.Collection.create_index
#: pymongo.collection.Collection.create_indexes
#: pymongo.collection.Collection.delete_many
#: pymongo.collection.Collection.delete_one
#: pymongo.collection.Collection.distinct pymongo.collection.Collection.drop
#: pymongo.collection.Collection.drop_index
#: pymongo.collection.Collection.drop_indexes
#: pymongo.collection.Collection.estimated_document_count
#: pymongo.collection.Collection.find pymongo.collection.Collection.find_one
#: pymongo.collection.Collection.find_one_and_delete
#: pymongo.collection.Collection.find_one_and_replace
#: pymongo.collection.Collection.find_one_and_update
#: pymongo.collection.Collection.index_information
#: pymongo.collection.Collection.initialize_ordered_bulk_op
#: pymongo.collection.Collection.initialize_unordered_bulk_op
#: pymongo.collection.Collection.inline_map_reduce
#: pymongo.collection.Collection.insert_many
#: pymongo.collection.Collection.insert_one
#: pymongo.collection.Collection.list_indexes
#: pymongo.collection.Collection.map_reduce
#: pymongo.collection.Collection.options
#: pymongo.collection.Collection.parallel_scan
#: pymongo.collection.Collection.reindex pymongo.collection.Collection.rename
#: pymongo.collection.Collection.replace_one
#: pymongo.collection.Collection.update_many
#: pymongo.collection.Collection.update_one pymongo.collection.Collection.watch
#: pymongo.collection.Collection.with_options
#: pymongo.command_cursor.CommandCursor.batch_size
#: pymongo.cursor.Cursor.__getitem__ pymongo.cursor.Cursor.allow_disk_use
#: pymongo.cursor.Cursor.batch_size pymongo.cursor.Cursor.collation
#: pymongo.cursor.Cursor.comment pymongo.cursor.Cursor.count
#: pymongo.cursor.Cursor.distinct pymongo.cursor.Cursor.hint
#: pymongo.cursor.Cursor.limit pymongo.cursor.Cursor.max
#: pymongo.cursor.Cursor.max_await_time_ms pymongo.cursor.Cursor.max_scan
#: pymongo.cursor.Cursor.max_time_ms pymongo.cursor.Cursor.min
#: pymongo.cursor.Cursor.skip pymongo.cursor.Cursor.sort
#: pymongo.cursor.Cursor.where pymongo.cursor_manager.CursorManager
#: pymongo.cursor_manager.CursorManager.close pymongo.database.Database
#: pymongo.database.Database.add_user pymongo.database.Database.aggregate
#: pymongo.database.Database.authenticate
#: pymongo.database.Database.collection_names pymongo.database.Database.command
#: pymongo.database.Database.create_collection
#: pymongo.database.Database.current_op pymongo.database.Database.dereference
#: pymongo.database.Database.drop_collection pymongo.database.Database.eval
#: pymongo.database.Database.get_collection
#: pymongo.database.Database.list_collection_names
#: pymongo.database.Database.list_collections
#: pymongo.database.Database.profiling_info
#: pymongo.database.Database.profiling_level
#: pymongo.database.Database.remove_user
#: pymongo.database.Database.set_profiling_level
#: pymongo.database.Database.validate_collection
#: pymongo.database.Database.watch pymongo.database.Database.with_options
#: pymongo.encryption.ClientEncryption
#: pymongo.encryption.ClientEncryption.create_data_key
#: pymongo.encryption.ClientEncryption.decrypt
#: pymongo.encryption.ClientEncryption.encrypt
#: pymongo.encryption_options.AutoEncryptionOpts
#: pymongo.event_loggers.CommandLogger.failed
#: pymongo.event_loggers.CommandLogger.started
#: pymongo.event_loggers.CommandLogger.succeeded
#: pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_failed
#: pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_started
#: pymongo.event_loggers.ConnectionPoolLogger.connection_checked_in
#: pymongo.event_loggers.ConnectionPoolLogger.connection_checked_out
#: pymongo.event_loggers.ConnectionPoolLogger.connection_closed
#: pymongo.event_loggers.ConnectionPoolLogger.connection_created
#: pymongo.event_loggers.ConnectionPoolLogger.connection_ready
#: pymongo.event_loggers.ConnectionPoolLogger.pool_cleared
#: pymongo.event_loggers.ConnectionPoolLogger.pool_closed
#: pymongo.event_loggers.ConnectionPoolLogger.pool_created
#: pymongo.event_loggers.HeartbeatLogger.failed
#: pymongo.event_loggers.HeartbeatLogger.started
#: pymongo.event_loggers.HeartbeatLogger.succeeded
#: pymongo.event_loggers.ServerLogger.closed
#: pymongo.event_loggers.ServerLogger.description_changed
#: pymongo.event_loggers.ServerLogger.opened
#: pymongo.event_loggers.TopologyLogger.closed
#: pymongo.event_loggers.TopologyLogger.description_changed
#: pymongo.event_loggers.TopologyLogger.opened pymongo.mongo_client.MongoClient
#: pymongo.mongo_client.MongoClient.close_cursor
#: pymongo.mongo_client.MongoClient.database_names
#: pymongo.mongo_client.MongoClient.drop_database
#: pymongo.mongo_client.MongoClient.get_database
#: pymongo.mongo_client.MongoClient.get_default_database
#: pymongo.mongo_client.MongoClient.kill_cursors
#: pymongo.mongo_client.MongoClient.list_database_names
#: pymongo.mongo_client.MongoClient.list_databases
#: pymongo.mongo_client.MongoClient.server_info
#: pymongo.mongo_client.MongoClient.set_cursor_manager
#: pymongo.mongo_client.MongoClient.unlock
#: pymongo.mongo_client.MongoClient.watch
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager
#: pymongo.monitoring.CommandFailedEvent
#: pymongo.monitoring.CommandListener.failed
#: pymongo.monitoring.CommandListener.started
#: pymongo.monitoring.CommandListener.succeeded
#: pymongo.monitoring.CommandStartedEvent
#: pymongo.monitoring.CommandSucceededEvent
#: pymongo.monitoring.ConnectionCheckOutFailedEvent
#: pymongo.monitoring.ConnectionCheckOutStartedEvent
#: pymongo.monitoring.ConnectionCheckedInEvent
#: pymongo.monitoring.ConnectionCheckedOutEvent
#: pymongo.monitoring.ConnectionClosedEvent
#: pymongo.monitoring.ConnectionCreatedEvent
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_failed
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_started
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_in
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_out
#: pymongo.monitoring.ConnectionPoolListener.connection_closed
#: pymongo.monitoring.ConnectionPoolListener.connection_created
#: pymongo.monitoring.ConnectionPoolListener.connection_ready
#: pymongo.monitoring.ConnectionPoolListener.pool_cleared
#: pymongo.monitoring.ConnectionPoolListener.pool_closed
#: pymongo.monitoring.ConnectionPoolListener.pool_created
#: pymongo.monitoring.ConnectionReadyEvent pymongo.monitoring.PoolClearedEvent
#: pymongo.monitoring.PoolClosedEvent pymongo.monitoring.PoolCreatedEvent
#: pymongo.monitoring.ServerHeartbeatListener.failed
#: pymongo.monitoring.ServerHeartbeatListener.started
#: pymongo.monitoring.ServerHeartbeatListener.succeeded
#: pymongo.monitoring.ServerListener.closed
#: pymongo.monitoring.ServerListener.description_changed
#: pymongo.monitoring.ServerListener.opened
#: pymongo.monitoring.TopologyListener.closed
#: pymongo.monitoring.TopologyListener.description_changed
#: pymongo.monitoring.TopologyListener.opened pymongo.monitoring.register
#: pymongo.operations.DeleteMany pymongo.operations.DeleteOne
#: pymongo.operations.IndexModel pymongo.operations.InsertOne
#: pymongo.operations.ReplaceOne pymongo.operations.UpdateMany
#: pymongo.operations.UpdateOne pymongo.pool.SocketInfo
#: pymongo.pool.SocketInfo.authenticate pymongo.pool.SocketInfo.check_auth
#: pymongo.pool.SocketInfo.command pymongo.pool.SocketInfo.legacy_write
#: pymongo.pool.SocketInfo.write_command pymongo.read_concern.ReadConcern
#: pymongo.read_preferences.Nearest pymongo.read_preferences.PrimaryPreferred
#: pymongo.read_preferences.Secondary
#: pymongo.read_preferences.SecondaryPreferred pymongo.results.BulkWriteResult
#: pymongo.server_description.ServerDescription
#: pymongo.son_manipulator.SONManipulator.transform_incoming
#: pymongo.son_manipulator.SONManipulator.transform_outgoing
#: pymongo.topology_description.TopologyDescription
#: pymongo.topology_description.TopologyDescription.has_readable_server
#: pymongo.uri_parser.parse_host pymongo.uri_parser.parse_ipv6_literal_host
#: pymongo.uri_parser.parse_uri pymongo.uri_parser.split_hosts
#: pymongo.uri_parser.split_options pymongo.uri_parser.validate_options
#: pymongo.write_concern.WriteConcern
msgid "Parameters"
msgstr ""

#: bson.binary.Binary:17 of
msgid ""
"`data`: the binary data to represent. Can be any bytes-like type that "
"implements the buffer protocol."
msgstr ""

#: bson.binary.Binary:19 of
msgid ""
"`subtype` (optional): the `binary subtype "
"<http://bsonspec.org/#/specification>`_ to use"
msgstr ""

#: bson.binary.Binary:23 of
msgid "Support any bytes-like type that implements the buffer protocol."
msgstr ""

#: bson.binary.Binary.as_uuid:1 of
msgid "Create a Python UUID from this BSON Binary object."
msgstr ""

#: bson.binary.Binary.as_uuid:3 of
msgid ""
"Decodes this binary object as a native :class:`uuid.UUID` instance with "
"the provided ``uuid_representation``."
msgstr ""

#: bson.binary.Binary.as_uuid:6 of
msgid ""
"Raises :exc:`ValueError` if this :class:`~bson.binary.Binary` instance "
"does not contain a UUID."
msgstr ""

#: bson.binary.Binary.as_uuid:10 bson.binary.Binary.from_uuid:13 of
msgid ""
"`uuid_representation`: A member of "
":class:`~bson.binary.UuidRepresentation`. Default: "
":const:`~bson.binary.UuidRepresentation.STANDARD`. See :ref:`handling-"
"uuid-data-example` for details."
msgstr ""

#: bson.binary.Binary.from_uuid:1 of
msgid "Create a BSON Binary object from a Python UUID."
msgstr ""

#: bson.binary.Binary.from_uuid:3 of
msgid ""
"Creates a :class:`~bson.binary.Binary` object from a :class:`uuid.UUID` "
"instance. Assumes that the native :class:`uuid.UUID` instance uses the "
"byte-order implied by the provided ``uuid_representation``."
msgstr ""

#: bson.binary.Binary.from_uuid:8 of
msgid ""
"Raises :exc:`TypeError` if `uuid` is not an instance of "
":class:`~uuid.UUID`."
msgstr ""

#: bson.binary.Binary.from_uuid:12 of
msgid "`uuid`: A :class:`uuid.UUID` instance."
msgstr ""

#: bson.binary.Binary.subtype:1 of
msgid "Subtype of this binary data."
msgstr ""

#: bson.binary.UUIDLegacy:1 of
msgid "Bases: :class:`bson.binary.Binary`"
msgstr ""

#: bson.binary.UUIDLegacy:1 of
msgid ""
"**DEPRECATED** - UUID wrapper to support working with UUIDs stored as "
"PYTHON_LEGACY."
msgstr ""

#: bson.binary.UUIDLegacy:4 of
msgid ""
"This class has been deprecated and will be removed in PyMongo 4.0. Use "
":meth:`~bson.binary.Binary.from_uuid` and "
":meth:`~bson.binary.Binary.as_uuid` with the appropriate "
":class:`~bson.binary.UuidRepresentation` to handle legacy-formatted UUIDs"
" instead.::"
msgstr ""

#: bson.binary.UUIDLegacy:50 of
msgid ""
"Raises :exc:`TypeError` if `obj` is not an instance of "
":class:`~uuid.UUID`."
msgstr ""

#: bson.binary.UUIDLegacy:53 of
msgid "`obj`: An instance of :class:`~uuid.UUID`."
msgstr ""

#: bson.binary.UUIDLegacy:55 of
msgid ""
"Deprecated. The same functionality can be replicated using the "
":meth:`~Binary.from_uuid` and :meth:`~Binary.to_uuid` methods with "
":data:`~UuidRepresentation.PYTHON_LEGACY`."
msgstr ""

#: bson.binary.UUIDLegacy.uuid:1 of
msgid "UUID instance wrapped by this UUIDLegacy instance."
msgstr ""

#: ../../api/bson/code.rst:2
msgid ":mod:`code` -- Tools for representing JavaScript code"
msgstr ""

#: bson.code:1 of
msgid "Tools for representing JavaScript code in BSON."
msgstr ""

#: bson.code.Code:1 of
msgid "Bases: :class:`str`"
msgstr ""

#: bson.code.Code:1 of
msgid "BSON's JavaScript code type."
msgstr ""

#: bson.code.Code:3 of
msgid ""
"Raises :class:`TypeError` if `code` is not an instance of "
":class:`basestring` (:class:`str` in python 3) or `scope` is not ``None``"
" or an instance of :class:`dict`."
msgstr ""

#: bson.code.Code:7 of
msgid ""
"Scope variables can be set by passing a dictionary as the `scope` "
"argument or by using keyword arguments. If a variable is set as a keyword"
" argument it will override any setting for that variable in the `scope` "
"dictionary."
msgstr ""

#: bson.code.Code:13 of
msgid ""
"`code`: A string containing JavaScript code to be evaluated or another "
"instance of Code. In the latter case, the scope of `code` becomes this "
"Code's :attr:`scope`."
msgstr ""

#: bson.code.Code:16 of
msgid ""
"`scope` (optional): dictionary representing the scope in which `code` "
"should be evaluated - a mapping from identifiers (as strings) to values. "
"Defaults to ``None``. This is applied after any scope associated with a "
"given `code` above."
msgstr ""

#: bson.code.Code:20 of
msgid ""
"`**kwargs` (optional): scope variables can also be passed as keyword "
"arguments. These are applied after `scope` and `code`."
msgstr ""

#: bson.code.Code:23 of
msgid "The default value for :attr:`scope` is ``None`` instead of ``{}``."
msgstr ""

#: bson.code.Code.scope:1 of
msgid "Scope dictionary for this instance or ``None``."
msgstr ""

#: ../../api/bson/codec_options.rst:2
msgid ":mod:`codec_options` -- Tools for specifying BSON codec options"
msgstr ""

#: bson.codec_options:1 of
msgid "Tools for specifying BSON codec options."
msgstr ""

#: bson.codec_options.CodecOptions:1 bson.json_util.JSONOptions:1 of
msgid ""
"Create new instance of CodecOptions(document_class, tz_aware, "
"uuid_representation, unicode_decode_error_handler, tzinfo, type_registry)"
msgstr ""

#: bson.codec_options.CodecOptions.with_options:1 of
msgid "Make a copy of this CodecOptions, overriding some options::"
msgstr ""

#: bson.codec_options.TypeCodec:1 of
msgid ""
"Base class for defining type codec classes which describe how a custom "
"type can be transformed to/from one of the types :mod:`bson` can already "
"encode/decode."
msgstr ""

#: bson.codec_options.TypeCodec:5 of
msgid ""
"Codec classes must implement the ``python_type`` attribute, and the "
"``transform_python`` method to support encoding, as well as the "
"``bson_type`` attribute, and the ``transform_bson`` method to support "
"decoding."
msgstr ""

#: bson.codec_options.TypeCodec:10 bson.codec_options.TypeDecoder:7
#: bson.codec_options.TypeEncoder:7 of
msgid "See :ref:`custom-type-type-codec` documentation for an example."
msgstr ""

#: bson.codec_options.TypeDecoder:1 of
msgid ""
"Base class for defining type codec classes which describe how a BSON type"
" can be transformed to a custom type."
msgstr ""

#: bson.codec_options.TypeDecoder:4 of
msgid ""
"Codec classes must implement the ``bson_type`` attribute, and the "
"``transform_bson`` method to support decoding."
msgstr ""

#: bson.codec_options.TypeDecoder.bson_type:1 of
msgid "The BSON type to be converted into our own type."
msgstr ""

#: bson.codec_options.TypeDecoder.transform_bson:1 of
msgid "Convert the given BSON value into our own type."
msgstr ""

#: bson.codec_options.TypeEncoder:1 of
msgid ""
"Base class for defining type codec classes which describe how a custom "
"type can be transformed to one of the types BSON understands."
msgstr ""

#: bson.codec_options.TypeEncoder:4 of
msgid ""
"Codec classes must implement the ``python_type`` attribute, and the "
"``transform_python`` method to support encoding."
msgstr ""

#: bson.codec_options.TypeEncoder.python_type:1 of
msgid "The Python type to be converted into something serializable."
msgstr ""

#: bson.codec_options.TypeEncoder.transform_python:1 of
msgid "Convert the given Python object into something serializable."
msgstr ""

#: bson.codec_options.TypeRegistry:1 of
msgid ""
"Encapsulates type codecs used in encoding and / or decoding BSON, as well"
" as the fallback encoder. Type registries cannot be modified after "
"instantiation."
msgstr ""

#: bson.codec_options.TypeRegistry:5 of
msgid ""
"``TypeRegistry`` can be initialized with an iterable of type codecs, and "
"a callable for the fallback encoder::"
msgstr ""

#: bson.codec_options.TypeRegistry:12 of
msgid "See :ref:`custom-type-type-registry` documentation for an example."
msgstr ""

#: bson.codec_options.TypeRegistry:15 of
msgid ""
"`type_codecs` (optional): iterable of type codec instances. If "
"``type_codecs`` contains multiple codecs that transform a single python "
"or BSON type, the transformation specified by the type codec occurring "
"last prevails. A TypeError will be raised if one or more type codecs "
"modify the encoding behavior of a built-in :mod:`bson` type."
msgstr ""

#: bson.codec_options.TypeRegistry:21 of
msgid ""
"`fallback_encoder` (optional): callable that accepts a single, "
"unencodable python value and transforms it into a type that :mod:`bson` "
"can encode. See :ref:`fallback-encoder-callable` documentation for an "
"example."
msgstr ""

#: ../../api/bson/dbref.rst:2
msgid ""
":mod:`dbref` -- Tools for manipulating DBRefs (references to documents "
"stored in MongoDB)"
msgstr ""

#: bson.dbref:1 of
msgid "Tools for manipulating DBRefs (references to MongoDB documents)."
msgstr ""

#: bson.dbref.DBRef:1 of
msgid "Initialize a new :class:`DBRef`."
msgstr ""

#: bson.dbref.DBRef:3 of
msgid ""
"Raises :class:`TypeError` if `collection` or `database` is not an "
"instance of :class:`basestring` (:class:`str` in python 3). `database` is"
" optional and allows references to documents to work across databases. "
"Any additional keyword arguments will create additional fields in the "
"resultant embedded document."
msgstr ""

#: bson.dbref.DBRef:10 of
msgid "`collection`: name of the collection the document is stored in"
msgstr ""

#: bson.dbref.DBRef:11 of
msgid "`id`: the value of the document's ``\"_id\"`` field"
msgstr ""

#: bson.dbref.DBRef:12 of
msgid "`database` (optional): name of the database to reference"
msgstr ""

#: bson.dbref.DBRef:13 of
msgid ""
"`**kwargs` (optional): additional keyword arguments will create "
"additional, custom fields"
msgstr ""

#: of
msgid "The MongoDB documentation on"
msgstr ""

#: bson.dbref.DBRef.as_doc:1 of
msgid "Get the SON document representation of this DBRef."
msgstr ""

#: bson.dbref.DBRef.as_doc:3 of
msgid "Generally not needed by application developers"
msgstr ""

#: bson.dbref.DBRef.collection:1 of
msgid "Get the name of this DBRef's collection as unicode."
msgstr ""

#: bson.dbref.DBRef.database:1 of
msgid "Get the name of this DBRef's database."
msgstr ""

#: bson.dbref.DBRef.database:3 of
msgid "Returns None if this DBRef doesn't specify a database."
msgstr ""

#: bson.dbref.DBRef.id:1 of
msgid "Get this DBRef's _id."
msgstr ""

#: ../../api/bson/decimal128.rst:2
msgid ":mod:`decimal128` -- Support for BSON Decimal128"
msgstr ""

#: bson.decimal128:1 of
msgid "Tools for working with the BSON decimal128 type."
msgstr ""

#: bson.decimal128:5 of
msgid "The Decimal128 BSON type requires MongoDB 3.4+."
msgstr ""

#: bson.decimal128.Decimal128:1 of
msgid "BSON Decimal128 type::"
msgstr ""

#: bson.decimal128.Decimal128:11 of
msgid ""
"`value`: An instance of :class:`decimal.Decimal`, string, or tuple of "
"(high bits, low bits) from Binary Integer Decimal (BID) format."
msgstr ""

#: bson.decimal128.Decimal128:14 of
msgid ""
":class:`~Decimal128` uses an instance of :class:`decimal.Context` "
"configured for IEEE-754 Decimal128 when validating parameters. Signals "
"like :class:`decimal.InvalidOperation`, :class:`decimal.Inexact`, and "
":class:`decimal.Overflow` are trapped and raised as exceptions::"
msgstr ""

#: bson.decimal128.Decimal128:37 of
msgid ""
"To ensure the result of a calculation can always be stored as BSON "
"Decimal128 use the context returned by "
":func:`create_decimal128_context`::"
msgstr ""

#: bson.decimal128.Decimal128:58 of
msgid ""
"To match the behavior of MongoDB's Decimal128 implementation "
"str(Decimal(value)) may not match str(Decimal128(value)) for NaN values::"
msgstr ""

#: bson.decimal128.Decimal128:70 of
msgid "However, :meth:`~Decimal128.to_decimal` will return the exact value::"
msgstr ""

#: bson.decimal128.Decimal128:81 of
msgid ""
"Two instances of :class:`Decimal128` compare equal if their Binary "
"Integer Decimal encodings are equal::"
msgstr ""

#: bson.decimal128.Decimal128:89 of
msgid "This differs from :class:`decimal.Decimal` comparisons for NaN::"
msgstr ""

#: bson.decimal128.Decimal128.bid:1 of
msgid "The Binary Integer Decimal (BID) encoding of this instance."
msgstr ""

#: bson.decimal128.Decimal128.from_bid:1 of
msgid ""
"Create an instance of :class:`Decimal128` from Binary Integer Decimal "
"string."
msgstr ""

#: bson.decimal128.Decimal128.from_bid:5 of
msgid ""
"`value`: 16 byte string (128-bit IEEE 754-2008 decimal floating point in "
"Binary Integer Decimal (BID) format)."
msgstr ""

#: bson.decimal128.Decimal128.to_decimal:1 of
msgid ""
"Returns an instance of :class:`decimal.Decimal` for this "
":class:`Decimal128`."
msgstr ""

#: bson.decimal128.create_decimal128_context:1 of
msgid ""
"Returns an instance of :class:`decimal.Context` appropriate for working "
"with IEEE-754 128-bit decimal floating point values."
msgstr ""

#: ../../api/bson/errors.rst:2
msgid ":mod:`errors` -- Exceptions raised by the :mod:`bson` package"
msgstr ""

#: bson.errors:1 of
msgid "Exceptions raised by the BSON package."
msgstr ""

#: bson.errors.BSONError:1 of
msgid "Base class for all BSON exceptions."
msgstr ""

#: bson.errors.InvalidBSON:1 of
msgid "Raised when trying to create a BSON object from invalid data."
msgstr ""

#: bson.errors.InvalidDocument:1 of
msgid "Raised when trying to create a BSON object from an invalid document."
msgstr ""

#: bson.errors.InvalidId:1 of
msgid "Raised when trying to create an ObjectId from invalid data."
msgstr ""

#: bson.errors.InvalidStringData:1 of
msgid "Raised when trying to encode a string containing non-UTF8 data."
msgstr ""

#: ../../api/bson/index.rst:2
msgid ":mod:`bson` -- BSON (Binary JSON) Encoding and Decoding"
msgstr ""

#: bson:1 of
msgid "BSON (Binary JSON) encoding and decoding."
msgstr ""

#: bson:3 of
msgid "The mapping from Python types to BSON types is as follows:"
msgstr ""

#: bson:6 of
msgid "Python Type"
msgstr ""

#: bson:6 of
msgid "BSON Type"
msgstr ""

#: bson:6 of
msgid "Supported Direction"
msgstr ""

#: bson:8 bson:24 of
msgid "None"
msgstr ""

#: bson:8 of
msgid "null"
msgstr ""

#: bson:8 bson:9 bson:12 bson:13 bson:15 bson:16 bson:17 bson:18 bson:19
#: bson:21 bson:22 bson:23 bson:28 of
msgid "both"
msgstr ""

#: bson:9 of
msgid "bool"
msgstr ""

#: bson:9 of
msgid "boolean"
msgstr ""

#: bson:10 of
msgid "int [#int]_"
msgstr ""

#: bson:10 of
msgid "int32 / int64"
msgstr ""

#: bson:10 bson:11 bson:14 bson:20 bson:26 of
msgid "py -> bson"
msgstr ""

#: bson:11 of
msgid "long"
msgstr ""

#: bson:11 bson:12 of
msgid "int64"
msgstr ""

#: bson:12 of
msgid "`bson.int64.Int64`"
msgstr ""

#: bson:13 of
msgid "float"
msgstr ""

#: bson:13 of
msgid "number (real)"
msgstr ""

#: bson:14 bson:15 of
msgid "string"
msgstr ""

#: bson:15 bson:25 bson:27 of
msgid "unicode"
msgstr ""

#: bson:16 of
msgid "list"
msgstr ""

#: bson:16 of
msgid "array"
msgstr ""

#: bson:17 of
msgid "dict / `SON`"
msgstr ""

#: bson:17 of
msgid "object"
msgstr ""

#: bson:18 of
msgid "datetime.datetime [#dt]_ [#dt2]_"
msgstr ""

#: bson:18 of
msgid "date"
msgstr ""

#: bson:19 of
msgid "`bson.regex.Regex`"
msgstr ""

#: bson:19 bson:20 of
msgid "regex"
msgstr ""

#: bson:20 of
msgid "compiled re [#re]_"
msgstr ""

#: bson:21 of
msgid "`bson.binary.Binary`"
msgstr ""

#: bson:21 bson:28 of
msgid "binary"
msgstr ""

#: bson:22 of
msgid "`bson.objectid.ObjectId`"
msgstr ""

#: bson:22 of
msgid "oid"
msgstr ""

#: bson:23 of
msgid "`bson.dbref.DBRef`"
msgstr ""

#: bson:23 of
msgid "dbref"
msgstr ""

#: bson:24 of
msgid "undefined"
msgstr ""

#: bson:24 bson:25 bson:27 of
msgid "bson -> py"
msgstr ""

#: bson:25 bson:26 of
msgid "code"
msgstr ""

#: bson:26 of
msgid "`bson.code.Code`"
msgstr ""

#: bson:27 of
msgid "symbol"
msgstr ""

#: bson:28 of
msgid "bytes (Python 3) [#bytes]_"
msgstr ""

#: bson:31 of
msgid ""
"Note that, when using Python 2.x, to save binary data it must be wrapped "
"as an instance of `bson.binary.Binary`. Otherwise it will be saved as a "
"BSON string and retrieved as unicode. Users of Python 3.x can use the "
"Python bytes type."
msgstr ""

#: bson:36 of
msgid ""
"A Python int will be saved as a BSON int32 or BSON int64 depending on its"
" size. A BSON int32 will always decode to a Python int. A BSON int64 will"
" always decode to a :class:`~bson.int64.Int64`."
msgstr ""

#: bson:39 of
msgid ""
"datetime.datetime instances will be rounded to the nearest millisecond "
"when saved"
msgstr ""

#: bson:41 of
msgid ""
"all datetime.datetime instances are treated as *naive*. clients should "
"always use UTC."
msgstr ""

#: bson:43 of
msgid ""
":class:`~bson.regex.Regex` instances and regular expression objects from "
"``re.compile()`` are both saved as BSON regular expressions. BSON regular"
" expressions are decoded as :class:`~bson.regex.Regex` instances."
msgstr ""

#: bson:47 of
msgid ""
"The bytes type from Python 3.x is encoded as BSON binary with subtype 0. "
"In Python 3.x it will be decoded back to bytes. In Python 2.x it will be "
"decoded to an instance of :class:`~bson.binary.Binary` with subtype 0."
msgstr ""

#: bson.BSON:1 of
msgid "BSON (Binary JSON) data."
msgstr ""

#: bson.BSON:3 of
msgid ""
"Using this class to encode and decode BSON adds a performance cost. For "
"better performance use the module level functions :func:`encode` and "
":func:`decode` instead."
msgstr ""

#: bson.BSON.decode:1 of
msgid "Decode this BSON data."
msgstr ""

#: bson.BSON.decode:3 bson.decode:3 of
msgid ""
"By default, returns a BSON document represented as a Python "
":class:`dict`. To use a different :class:`MutableMapping` class, "
"configure a :class:`~bson.codec_options.CodecOptions`::"
msgstr ""

#: bson.BSON.decode:19 bson.BSON.encode:16 bson.decode:21
#: bson.decode_file_iter:8 bson.decode_iter:11 bson.encode:16 of
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`."
msgstr ""

#: bson.BSON.decode:22 of
msgid ""
"Removed `compile_re` option: PyMongo now always represents BSON regular "
"expressions as :class:`~bson.regex.Regex` objects. Use "
":meth:`~bson.regex.Regex.try_compile` to attempt to convert from a BSON "
"regular expression to a Python regular expression object."
msgstr ""

#: bson.BSON.decode:28 bson.decode_file_iter:11 bson.decode_iter:14 of
msgid ""
"Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with "
"`codec_options`."
msgstr ""

#: bson.BSON.decode:31 of pymongo.database.Database.command:75
msgid ""
"Added `compile_re` option. If set to False, PyMongo represented BSON "
"regular expressions as :class:`~bson.regex.Regex` objects instead of "
"attempting to compile BSON regular expressions as Python native regular "
"expressions, thus preventing errors for some incompatible patterns, see "
"`PYTHON-500`_."
msgstr ""

#: bson.BSON.encode:1 of
msgid "Encode a document to a new :class:`BSON` instance."
msgstr ""

#: bson.BSON.encode:3 bson.encode:3 of
msgid "A document can be any mapping type (like :class:`dict`)."
msgstr ""

#: bson.BSON.encode:5 bson.encode:5 of
msgid ""
"Raises :class:`TypeError` if `document` is not a mapping type, or "
"contains keys that are not instances of :class:`basestring` (:class:`str`"
" in python 3). Raises :class:`~bson.errors.InvalidDocument` if `document`"
" cannot be converted to :class:`BSON`."
msgstr ""

#: bson.BSON.encode:12 bson.encode:12 of
msgid "`document`: mapping type representing a document"
msgstr ""

#: bson.BSON.encode:13 bson.encode:13 of
msgid ""
"`check_keys` (optional): check if keys start with '$' or contain '.', "
"raising :class:`~bson.errors.InvalidDocument` in either case"
msgstr ""

#: bson.BSON.encode:19 of
msgid "Replaced `uuid_subtype` option with `codec_options`."
msgstr ""

#: bson.decode:1 of
msgid "Decode BSON to a document."
msgstr ""

#: bson.decode:19 of
msgid ""
"`data`: the BSON to decode. Any bytes-like object that implements the "
"buffer protocol."
msgstr ""

#: bson.decode_file_iter:1 of
msgid "Decode bson data from a file to multiple documents as a generator."
msgstr ""

#: bson.decode_file_iter:3 of
msgid ""
"Works similarly to the decode_all function, but reads from the file "
"object in chunks and parses bson in chunks, yielding one document at a "
"time."
msgstr ""

#: bson.decode_file_iter:7 of
msgid "`file_obj`: A file object containing BSON data."
msgstr ""

#: bson.decode_iter:1 of
msgid "Decode BSON data to multiple documents as a generator."
msgstr ""

#: bson.decode_iter:3 of
msgid ""
"Works similarly to the decode_all function, but yields one document at a "
"time."
msgstr ""

#: bson.decode_iter:6 of
msgid "`data` must be a string of concatenated, valid, BSON-encoded documents."
msgstr ""

#: bson.decode_iter:10 of
msgid "`data`: BSON data"
msgstr ""

#: bson.encode:1 of
msgid "Encode a document to BSON."
msgstr ""

#: bson.gen_list_name:1 of
msgid ""
"Generate \"keys\" for encoded lists in the sequence b\"0 \", b\"1 \", "
"b\"2 \", ..."
msgstr ""

#: bson.gen_list_name:4 of
msgid ""
"The first 1000 keys are returned from a pre-built cache. All subsequent "
"keys are generated on the fly."
msgstr ""

#: bson.has_c:1 of pymongo.has_c:1
msgid "Is the C extension installed?"
msgstr ""

#: bson.is_valid:1 of
msgid "Check that the given string represents valid :class:`BSON` data."
msgstr ""

#: bson.is_valid:3 of
msgid ""
"Raises :class:`TypeError` if `bson` is not an instance of :class:`str` "
"(:class:`bytes` in python 3). Returns ``True`` if `bson` is valid "
":class:`BSON`, ``False`` otherwise."
msgstr ""

#: bson.is_valid:8 of
msgid "`bson`: the data to be validated"
msgstr ""

#: ../../api/bson/index.rst:8 ../../api/gridfs/index.rst:8
#: ../../api/pymongo/index.rst:29
msgid "Sub-modules:"
msgstr ""

#: ../../api/bson/int64.rst:2
msgid ":mod:`int64` -- Tools for representing BSON int64"
msgstr ""

#: bson.int64:1 of
msgid "A BSON wrapper for long (int in python3)"
msgstr ""

#: bson.int64.Int64:1 of
msgid "Representation of the BSON int64 type."
msgstr ""

#: bson.int64.Int64:3 of
msgid ""
"This is necessary because every integral number is an :class:`int` in "
"Python 3. Small integral numbers are encoded to BSON int32 by default, "
"but Int64 numbers will always be encoded to BSON int64."
msgstr ""

#: bson.int64.Int64:8 of
msgid "`value`: the numeric value to represent"
msgstr ""

#: ../../api/bson/json_util.rst:2
msgid ""
":mod:`json_util` -- Tools for using Python's :mod:`json` module with BSON"
" documents"
msgstr ""

#: bson.json_util:1 of
msgid "Tools for using Python's :mod:`json` module with BSON documents."
msgstr ""

#: bson.json_util:3 of
msgid ""
"This module provides two helper methods `dumps` and `loads` that wrap the"
" native :mod:`json` methods and provide explicit BSON conversion to and "
"from JSON. :class:`~bson.json_util.JSONOptions` provides a way to control"
" how JSON is emitted and parsed, with the default being the legacy "
"PyMongo format. :mod:`~bson.json_util` can also generate Canonical or "
"Relaxed `Extended JSON`_ when :const:`CANONICAL_JSON_OPTIONS` or "
":const:`RELAXED_JSON_OPTIONS` is provided, respectively."
msgstr ""

#: bson.json_util:13 of
msgid "Example usage (deserialization):"
msgstr ""

#: bson.json_util:21 of
msgid "Example usage (serialization):"
msgstr ""

#: bson.json_util:33 of
msgid "Example usage (with :const:`CANONICAL_JSON_OPTIONS`):"
msgstr ""

#: bson.json_util:46 of
msgid "Example usage (with :const:`RELAXED_JSON_OPTIONS`):"
msgstr ""

#: bson.json_util:59 of
msgid ""
"Alternatively, you can manually pass the `default` to :func:`json.dumps`."
" It won't handle :class:`~bson.binary.Binary` and "
":class:`~bson.code.Code` instances (as they are extended strings you "
"can't provide custom defaults), but it will be faster as there is less "
"recursion."
msgstr ""

#: bson.json_util:65 of
msgid ""
"If your application does not need the flexibility offered by "
":class:`JSONOptions` and spends a large amount of time in the `json_util`"
" module, look to `python-bsonjs <https://pypi.python.org/pypi/python-"
"bsonjs>`_ for a nice performance improvement. `python-bsonjs` is a fast "
"BSON to MongoDB Extended JSON converter for Python built on top of "
"`libbson <https://github.com/mongodb/libbson>`_. `python-bsonjs` works "
"best with PyMongo when using :class:`~bson.raw_bson.RawBSONDocument`."
msgstr ""

#: bson.json_util:74 of
msgid ""
"The output format for :class:`~bson.timestamp.Timestamp` has changed from"
" '{\"t\": <int>, \"i\": <int>}' to '{\"$timestamp\": {\"t\": <int>, "
"\"i\": <int>}}'. This new format will be decoded to an instance of "
":class:`~bson.timestamp.Timestamp`. The old format will continue to be "
"decoded to a python dict as before. Encoding to the old format is no "
"longer supported as it was never correct and loses type information. "
"Added support for $numberLong and $undefined - new in MongoDB 2.6 - and "
"parsing $date in ISO-8601 format."
msgstr ""

#: bson.json_util:84 bson.json_util.dumps:14 of
msgid ""
"Preserves order when rendering SON, Timestamp, Code, Binary, and DBRef "
"instances."
msgstr ""

#: bson.json_util:88 of
msgid ""
"Added dumps and loads helpers to automatically handle conversion to and "
"from json and supports :class:`~bson.binary.Binary` and "
":class:`~bson.code.Code`"
msgstr ""

#: bson.json_util.DatetimeRepresentation.LEGACY:1 of
msgid "Legacy MongoDB Extended JSON datetime representation."
msgstr ""

#: bson.json_util.DatetimeRepresentation.LEGACY:3 of
msgid ""
":class:`datetime.datetime` instances will be encoded to JSON in the "
"format `{\"$date\": <dateAsMilliseconds>}`, where `dateAsMilliseconds` is"
" a 64-bit signed integer giving the number of milliseconds since the Unix"
" epoch UTC. This was the default encoding before PyMongo version 3.4."
msgstr ""

#: bson.json_util.DatetimeRepresentation.NUMBERLONG:1 of
msgid "NumberLong datetime representation."
msgstr ""

#: bson.json_util.DatetimeRepresentation.NUMBERLONG:3 of
msgid ""
":class:`datetime.datetime` instances will be encoded to JSON in the "
"format `{\"$date\": {\"$numberLong\": \"<dateAsMilliseconds>\"}}`, where "
"`dateAsMilliseconds` is the string representation of a 64-bit signed "
"integer giving the number of milliseconds since the Unix epoch UTC."
msgstr ""

#: bson.json_util.DatetimeRepresentation.ISO8601:1 of
msgid "ISO-8601 datetime representation."
msgstr ""

#: bson.json_util.DatetimeRepresentation.ISO8601:3 of
msgid ""
":class:`datetime.datetime` instances greater than or equal to the Unix "
"epoch UTC will be encoded to JSON in the format `{\"$date\": "
"\"<ISO-8601>\"}`. :class:`datetime.datetime` instances before the Unix "
"epoch UTC will be encoded as if the datetime representation is "
":const:`~DatetimeRepresentation.NUMBERLONG`."
msgstr ""

#: bson.json_util.JSONMode.LEGACY:1 of
msgid "Legacy Extended JSON representation."
msgstr ""

#: bson.json_util.JSONMode.LEGACY:3 of
msgid ""
"In this mode, :func:`~bson.json_util.dumps` produces PyMongo's legacy "
"non-standard JSON output. Consider using "
":const:`~bson.json_util.JSONMode.RELAXED` or "
":const:`~bson.json_util.JSONMode.CANONICAL` instead."
msgstr ""

#: bson.json_util.JSONMode.RELAXED:1 of
msgid "Relaxed Extended JSON representation."
msgstr ""

#: bson.json_util.JSONMode.RELAXED:3 of
msgid ""
"In this mode, :func:`~bson.json_util.dumps` produces Relaxed Extended "
"JSON, a mostly JSON-like format. Consider using this for things like a "
"web API, where one is sending a document (or a projection of a document) "
"that only uses ordinary JSON type primitives. In particular, the ``int``,"
" :class:`~bson.int64.Int64`, and ``float`` numeric types are represented "
"in the native JSON number format. This output is also the most human "
"readable and is useful for debugging and documentation."
msgstr ""

#: bson.json_util.JSONMode.RELAXED:11 of
msgid "The specification for Relaxed `Extended JSON`_."
msgstr ""

#: bson.json_util.JSONMode.CANONICAL:1 of
msgid "Canonical Extended JSON representation."
msgstr ""

#: bson.json_util.JSONMode.CANONICAL:3 of
msgid ""
"In this mode, :func:`~bson.json_util.dumps` produces Canonical Extended "
"JSON, a type preserving format. Consider using this for things like "
"testing, where one has to precisely specify expected types in JSON. In "
"particular, the ``int``, :class:`~bson.int64.Int64`, and ``float`` "
"numeric types are encoded with type wrappers."
msgstr ""

#: bson.json_util.JSONMode.CANONICAL:9 of
msgid "The specification for Canonical `Extended JSON`_."
msgstr ""

#: bson.json_util.JSONOptions.with_options:1 of
msgid "Make a copy of this JSONOptions, overriding some options::"
msgstr ""

#: bson.json_util.LEGACY_JSON_OPTIONS:1 of
msgid ":class:`JSONOptions` for encoding to PyMongo's legacy JSON format."
msgstr ""

#: bson.json_util.LEGACY_JSON_OPTIONS:3 of
msgid "The documentation for :const:`bson.json_util.JSONMode.LEGACY`."
msgstr ""

#: bson.json_util.DEFAULT_JSON_OPTIONS:1 of
msgid "The default :class:`JSONOptions` for JSON encoding/decoding."
msgstr ""

#: bson.json_util.DEFAULT_JSON_OPTIONS:3 of
msgid ""
"The same as :const:`LEGACY_JSON_OPTIONS`. This will change to "
":const:`RELAXED_JSON_OPTIONS` in a future release."
msgstr ""

#: bson.json_util.CANONICAL_JSON_OPTIONS:1 of
msgid ":class:`JSONOptions` for Canonical Extended JSON."
msgstr ""

#: bson.json_util.CANONICAL_JSON_OPTIONS:3 of
msgid "The documentation for :const:`bson.json_util.JSONMode.CANONICAL`."
msgstr ""

#: bson.json_util.RELAXED_JSON_OPTIONS:1 of
msgid ":class:`JSONOptions` for Relaxed Extended JSON."
msgstr ""

#: bson.json_util.RELAXED_JSON_OPTIONS:3 of
msgid "The documentation for :const:`bson.json_util.JSONMode.RELAXED`."
msgstr ""

#: bson.json_util.STRICT_JSON_OPTIONS:1 of
msgid ""
"**DEPRECATED** - :class:`JSONOptions` for MongoDB Extended JSON's *Strict"
" mode* encoding."
msgstr ""

#: bson.json_util.STRICT_JSON_OPTIONS:6 of
msgid ""
"Deprecated. Use :const:`RELAXED_JSON_OPTIONS` or "
":const:`CANONICAL_JSON_OPTIONS` instead."
msgstr ""

#: bson.json_util.dumps:1 of
msgid "Helper function that wraps :func:`json.dumps`."
msgstr ""

#: bson.json_util.dumps:3 of
msgid ""
"Recursive function that handles all BSON types including "
":class:`~bson.binary.Binary` and :class:`~bson.code.Code`."
msgstr ""

#: bson.json_util.dumps:7 of
msgid ""
"`json_options`: A :class:`JSONOptions` instance used to modify the "
"encoding of MongoDB Extended JSON types. Defaults to "
":const:`DEFAULT_JSON_OPTIONS`."
msgstr ""

#: bson.json_util.dumps:11 bson.json_util.loads:18 of
msgid "Accepts optional parameter `json_options`. See :class:`JSONOptions`."
msgstr ""

#: bson.json_util.loads:1 of
msgid "Helper function that wraps :func:`json.loads`."
msgstr ""

#: bson.json_util.loads:3 of
msgid "Automatically passes the object_hook for BSON type conversion."
msgstr ""

#: bson.json_util.loads:5 of
msgid ""
"Raises ``TypeError``, ``ValueError``, ``KeyError``, or "
":exc:`~bson.errors.InvalidId` on invalid MongoDB Extended JSON."
msgstr ""

#: bson.json_util.loads:9 of
msgid ""
"`json_options`: A :class:`JSONOptions` instance used to modify the "
"decoding of MongoDB Extended JSON types. Defaults to "
":const:`DEFAULT_JSON_OPTIONS`."
msgstr ""

#: bson.json_util.loads:13 of
msgid ""
"Parses Relaxed and Canonical Extended JSON as well as PyMongo's legacy "
"format. Now raises ``TypeError`` or ``ValueError`` when parsing JSON type"
" wrappers with values of the wrong type or any extra keys."
msgstr ""

#: ../../api/bson/max_key.rst:2
msgid ":mod:`max_key` -- Representation for the MongoDB internal MaxKey type"
msgstr ""

#: bson.max_key:1 of
msgid "Representation for the MongoDB internal MaxKey type."
msgstr ""

#: bson.max_key.MaxKey:1 of
msgid "MongoDB internal MaxKey type."
msgstr ""

#: bson.max_key.MaxKey:3 of
msgid "``MaxKey`` now implements comparison operators."
msgstr ""

#: ../../api/bson/min_key.rst:2
msgid ":mod:`min_key` -- Representation for the MongoDB internal MinKey type"
msgstr ""

#: bson.min_key:1 of
msgid "Representation for the MongoDB internal MinKey type."
msgstr ""

#: bson.min_key.MinKey:1 of
msgid "MongoDB internal MinKey type."
msgstr ""

#: bson.min_key.MinKey:3 of
msgid "``MinKey`` now implements comparison operators."
msgstr ""

#: ../../api/bson/objectid.rst:2
msgid ":mod:`objectid` -- Tools for working with MongoDB ObjectIds"
msgstr ""

#: bson.objectid:1 of
msgid ""
"Tools for working with MongoDB `ObjectIds "
"<http://dochub.mongodb.org/core/objectids>`_."
msgstr ""

#: bson.objectid.ObjectId:1 of
msgid "Initialize a new ObjectId."
msgstr ""

#: bson.objectid.ObjectId:3 of
msgid "An ObjectId is a 12-byte unique identifier consisting of:"
msgstr ""

#: bson.objectid.ObjectId:5 of
msgid "a 4-byte value representing the seconds since the Unix epoch,"
msgstr ""

#: bson.objectid.ObjectId:6 of
msgid "a 5-byte random value,"
msgstr ""

#: bson.objectid.ObjectId:7 of
msgid "a 3-byte counter, starting with a random value."
msgstr ""

#: bson.objectid.ObjectId:9 of
msgid ""
"By default, ``ObjectId()`` creates a new unique identifier. The optional "
"parameter `oid` can be an :class:`ObjectId`, or any 12 :class:`bytes` or,"
" in Python 2, any 12-character :class:`str`."
msgstr ""

#: bson.objectid.ObjectId:13 of
msgid ""
"For example, the 12 bytes b'foo-bar-quux' do not follow the ObjectId "
"specification but they are acceptable input::"
msgstr ""

#: bson.objectid.ObjectId:19 of
msgid "`oid` can also be a :class:`unicode` or :class:`str` of 24 hex digits::"
msgstr ""

#: bson.objectid.ObjectId:28 of
msgid ""
"Raises :class:`~bson.errors.InvalidId` if `oid` is not 12 bytes nor 24 "
"hex digits, or :class:`TypeError` if `oid` is not an accepted type."
msgstr ""

#: bson.objectid.ObjectId:32 of
msgid "`oid` (optional): a valid ObjectId."
msgstr ""

#: bson.objectid.ObjectId:36 of
msgid ""
":class:`~bson.objectid.ObjectId` now implements the `ObjectID "
"specification version 0.2 "
"<https://github.com/mongodb/specifications/blob/master/source/ "
"objectid.rst>`_."
msgstr ""

#: ../../api/bson/objectid.rst:12
msgid "Get a hex encoded version of :class:`ObjectId` `o`."
msgstr ""

#: ../../api/bson/objectid.rst:14
msgid "The following property always holds:"
msgstr ""

#: ../../api/bson/objectid.rst:26
msgid ""
"This representation is useful for urls or other places where ``o.binary``"
" is inappropriate."
msgstr ""

#: bson.objectid.ObjectId.binary:1 of
msgid "12-byte binary representation of this ObjectId."
msgstr ""

#: bson.objectid.ObjectId.from_datetime:1 of
msgid "Create a dummy ObjectId instance with a specific generation time."
msgstr ""

#: bson.objectid.ObjectId.from_datetime:3 of
msgid ""
"This method is useful for doing range queries on a field containing "
":class:`ObjectId` instances."
msgstr ""

#: bson.objectid.ObjectId.from_datetime:7 of
msgid ""
"It is not safe to insert a document containing an ObjectId generated "
"using this method. This method deliberately eliminates the uniqueness "
"guarantee that ObjectIds generally provide. ObjectIds generated with this"
" method should be used exclusively in queries."
msgstr ""

#: bson.objectid.ObjectId.from_datetime:13 of
msgid ""
"`generation_time` will be converted to UTC. Naive datetime instances will"
" be treated as though they already contain UTC."
msgstr ""

#: bson.objectid.ObjectId.from_datetime:16 of
msgid ""
"An example using this helper to get documents where ``\"_id\"`` was "
"generated before January 1, 2010 would be:"
msgstr ""

#: bson.objectid.ObjectId.from_datetime:24 of
msgid ""
"`generation_time`: :class:`~datetime.datetime` to be used as the "
"generation time for the resulting ObjectId."
msgstr ""

#: bson.objectid.ObjectId.generation_time:1 of
msgid ""
"A :class:`datetime.datetime` instance representing the time of generation"
" for this :class:`ObjectId`."
msgstr ""

#: bson.objectid.ObjectId.generation_time:4 of
msgid ""
"The :class:`datetime.datetime` is timezone aware, and represents the "
"generation time in UTC. It is precise to the second."
msgstr ""

#: bson.objectid.ObjectId.is_valid:1 of
msgid "Checks if a `oid` string is valid or not."
msgstr ""

#: bson.objectid.ObjectId.is_valid:4 of
msgid "`oid`: the object id to validate"
msgstr ""

#: ../../api/bson/raw_bson.rst:2
msgid ":mod:`raw_bson` -- Tools for representing raw BSON documents."
msgstr ""

#: bson.raw_bson:1 of
msgid "Tools for representing raw BSON documents."
msgstr ""

#: bson.raw_bson.DEFAULT_RAW_BSON_OPTIONS:1 of
msgid ""
"The default :class:`~bson.codec_options.CodecOptions` for "
":class:`RawBSONDocument`."
msgstr ""

#: bson.raw_bson.RawBSONDocument:1 of
msgid "Create a new :class:`RawBSONDocument`"
msgstr ""

#: bson.raw_bson.RawBSONDocument:3 of
msgid ""
":class:`RawBSONDocument` is a representation of a BSON document that "
"provides access to the underlying raw BSON bytes. Only when a field is "
"accessed or modified within the document does RawBSONDocument decode its "
"bytes."
msgstr ""

#: bson.raw_bson.RawBSONDocument:8 of
msgid ""
":class:`RawBSONDocument` implements the ``Mapping`` abstract base class "
"from the standard library so it can be used like a read-only ``dict``::"
msgstr ""

#: bson.raw_bson.RawBSONDocument:20 of
msgid "`bson_bytes`: the BSON bytes that compose this document"
msgstr ""

#: bson.raw_bson.RawBSONDocument:21 of
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions` whose ``document_class`` must "
"be :class:`RawBSONDocument`. The default is "
":attr:`DEFAULT_RAW_BSON_OPTIONS`."
msgstr ""

#: bson.raw_bson.RawBSONDocument:26 of
msgid ""
":class:`RawBSONDocument` now validates that the ``bson_bytes`` passed in "
"represent a single bson document."
msgstr ""

#: bson.raw_bson.RawBSONDocument:30 of
msgid ""
"If a :class:`~bson.codec_options.CodecOptions` is passed in, its "
"`document_class` must be :class:`RawBSONDocument`."
msgstr ""

#: bson.raw_bson.RawBSONDocument.items:1 of
msgid "Lazily decode and iterate elements in this document."
msgstr ""

#: bson.raw_bson.RawBSONDocument.raw:1 of
msgid "The raw BSON bytes composing this document."
msgstr ""

#: ../../api/bson/regex.rst:2
msgid ":mod:`regex` -- Tools for representing MongoDB regular expressions"
msgstr ""

#: bson.regex:1 of
msgid "Tools for representing MongoDB regular expressions."
msgstr ""

#: bson.regex.Regex:1 of
msgid "BSON regular expression data."
msgstr ""

#: bson.regex.Regex:3 of
msgid ""
"This class is useful to store and retrieve regular expressions that are "
"incompatible with Python's regular expression dialect."
msgstr ""

#: bson.regex.Regex:7 of
msgid "`pattern`: string"
msgstr ""

#: bson.regex.Regex:8 of
msgid ""
"`flags`: (optional) an integer bitmask, or a string of flag characters "
"like \"im\" for IGNORECASE and MULTILINE"
msgstr ""

#: bson.regex.Regex.from_native:1 of
msgid "Convert a Python regular expression into a ``Regex`` instance."
msgstr ""

#: bson.regex.Regex.from_native:3 of
msgid ""
"Note that in Python 3, a regular expression compiled from a :class:`str` "
"has the ``re.UNICODE`` flag set. If it is undesirable to store this flag "
"in a BSON regular expression, unset it first::"
msgstr ""

#: bson.regex.Regex.from_native:13 of
msgid "`regex`: A regular expression object from ``re.compile()``."
msgstr ""

#: bson.regex.Regex.from_native:16 of
msgid ""
"Python regular expressions use a different syntax and different set of "
"flags than MongoDB, which uses `PCRE`_. A regular expression retrieved "
"from the server may not compile in Python, or may match a different set "
"of strings in Python than when used in a MongoDB query."
msgstr ""

#: bson.regex.Regex.try_compile:1 of
msgid "Compile this :class:`Regex` as a Python regular expression."
msgstr ""

#: bson.regex.Regex.try_compile:4 of
msgid ""
"Python regular expressions use a different syntax and different set of "
"flags than MongoDB, which uses `PCRE`_. A regular expression retrieved "
"from the server may not compile in Python, or may match a different set "
"of strings in Python than when used in a MongoDB query. "
":meth:`try_compile()` may raise :exc:`re.error`."
msgstr ""

#: ../../api/bson/son.rst:2
msgid ":mod:`son` -- Tools for working with SON, an ordered mapping"
msgstr ""

#: bson.son:1 of
msgid "Tools for creating and manipulating SON, the Serialized Ocument Notation."
msgstr ""

#: bson.son:3 of
msgid ""
"Regular dictionaries can be used instead of SON objects, but not when the"
" order of keys is important. A SON object can be used just like a normal "
"Python dictionary."
msgstr ""

#: bson.son.SON:1 of
msgid "SON data."
msgstr ""

#: bson.son.SON:3 of
msgid ""
"A subclass of dict that maintains ordering of keys and provides a few "
"extra niceties for dealing with SON. SON provides an API similar to "
"collections.OrderedDict from Python 2.7+."
msgstr ""

#: bson.son.SON.get:1 bson.son.SON.setdefault:3 of
msgid "Return the value for key if key is in the dictionary, else default."
msgstr ""

#: bson.son.SON.pop:1 of
msgid "If key is not found, d is returned if given, otherwise KeyError is raised"
msgstr ""

#: bson.son.SON.popitem:1 of
msgid "Remove and return a (key, value) pair as a 2-tuple."
msgstr ""

#: bson.son.SON.popitem:3 of
msgid ""
"Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if"
" the dict is empty."
msgstr ""

#: bson.son.SON.setdefault:1 of
msgid "Insert key with a value of default if key is not in the dictionary."
msgstr ""

#: bson.son.SON.to_dict:1 of
msgid "Convert a SON document to a normal Python dictionary instance."
msgstr ""

#: bson.son.SON.to_dict:3 of
msgid "This is trickier than just *dict(...)* because it needs to be recursive."
msgstr ""

#: bson.son.SON.update:1 of
msgid ""
"If E is present and has a .keys() method, then does:  for k in E: D[k] = "
"E[k] If E is present and lacks a .keys() method, then does:  for k, v in "
"E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"
msgstr ""

#: ../../api/bson/timestamp.rst:2
msgid ":mod:`timestamp` -- Tools for representing MongoDB internal Timestamps"
msgstr ""

#: bson.timestamp:1 of
msgid "Tools for representing MongoDB internal Timestamps."
msgstr ""

#: bson.timestamp.Timestamp:1 of
msgid "Create a new :class:`Timestamp`."
msgstr ""

#: bson.timestamp.Timestamp:3 of
msgid ""
"This class is only for use with the MongoDB opLog. If you need to store a"
" regular timestamp, please use a :class:`~datetime.datetime`."
msgstr ""

#: bson.timestamp.Timestamp:7 of
msgid ""
"Raises :class:`TypeError` if `time` is not an instance of :class: `int` "
"or :class:`~datetime.datetime`, or `inc` is not an instance of "
":class:`int`. Raises :class:`ValueError` if `time` or `inc` is not in [0,"
" 2**32)."
msgstr ""

#: bson.timestamp.Timestamp:13 of
msgid ""
"`time`: time in seconds since epoch UTC, or a naive UTC "
":class:`~datetime.datetime`, or an aware :class:`~datetime.datetime`"
msgstr ""

#: bson.timestamp.Timestamp:16 of
msgid "`inc`: the incrementing counter"
msgstr ""

#: bson.timestamp.Timestamp.as_datetime:1 of
msgid ""
"Return a :class:`~datetime.datetime` instance corresponding to the time "
"portion of this :class:`Timestamp`."
msgstr ""

#: bson.timestamp.Timestamp.as_datetime:4 of
msgid "The returned datetime's timezone is UTC."
msgstr ""

#: bson.timestamp.Timestamp.inc:1 of
msgid "Get the inc portion of this :class:`Timestamp`."
msgstr ""

#: bson.timestamp.Timestamp.time:1 of
msgid "Get the time portion of this :class:`Timestamp`."
msgstr ""

#: ../../api/bson/tz_util.rst:2
msgid ":mod:`tz_util` -- Utilities for dealing with timezones in Python"
msgstr ""

#: bson.tz_util:1 of
msgid "Timezone related utilities for BSON."
msgstr ""

#: bson.tz_util.FixedOffset:1 of
msgid "Fixed offset timezone, in minutes east from UTC."
msgstr ""

#: bson.tz_util.FixedOffset:3 of
msgid ""
"Implementation based from the Python `standard library documentation "
"<http://docs.python.org/library/datetime.html#tzinfo-objects>`_. Defining"
" __getinitargs__ enables pickling / copying."
msgstr ""

#: bson.tz_util.FixedOffset.dst:1 of
msgid "datetime -> DST offset as timedelta positive east of UTC."
msgstr ""

#: bson.tz_util.FixedOffset.tzname:1 of
msgid "datetime -> string name of time zone."
msgstr ""

#: bson.tz_util.FixedOffset.utcoffset:1 of
msgid ""
"datetime -> timedelta showing offset from UTC, negative values indicating"
" West of UTC"
msgstr ""

#: bson.tz_util.utc:1 of
msgid "Fixed offset timezone representing UTC."
msgstr ""

#: ../../api/gridfs/errors.rst:2
msgid ":mod:`errors` -- Exceptions raised by the :mod:`gridfs` package"
msgstr ""

#: gridfs.errors:1 of
msgid "Exceptions raised by the :mod:`gridfs` package"
msgstr ""

#: gridfs.errors.CorruptGridFile:1 of
msgid "Raised when a file in :class:`~gridfs.GridFS` is malformed."
msgstr ""

#: gridfs.errors.FileExists:1 of
msgid "Raised when trying to create a file that already exists."
msgstr ""

#: gridfs.errors.GridFSError:1 of
msgid "Base class for all GridFS exceptions."
msgstr ""

#: gridfs.errors.NoFile:1 of
msgid "Raised when trying to read from a non-existent file."
msgstr ""

#: ../../api/gridfs/grid_file.rst:2
msgid ":mod:`grid_file` -- Tools for representing files stored in GridFS"
msgstr ""

#: gridfs.grid_file:1 of
msgid "Tools for representing files stored in GridFS."
msgstr ""

#: gridfs.grid_file.GridIn:1 of
msgid "Write a file to GridFS"
msgstr ""

#: gridfs.grid_file.GridIn:3 gridfs.grid_file.GridOut:3 of
msgid ""
"Application developers should generally not need to instantiate this "
"class directly - instead see the methods provided by "
":class:`~gridfs.GridFS`."
msgstr ""

#: gridfs.grid_file.GridIn:7 of
msgid ""
"Raises :class:`TypeError` if `root_collection` is not an instance of "
":class:`~pymongo.collection.Collection`."
msgstr ""

#: gridfs.grid_file.GridIn:10 of
msgid ""
"Any of the file level options specified in the `GridFS Spec "
"<http://dochub.mongodb.org/core/gridfsspec>`_ may be passed as keyword "
"arguments. Any additional keyword arguments will be set as additional "
"fields on the file document. Valid keyword arguments include:"
msgstr ""

#: gridfs.grid_file.GridIn:16 of
msgid ""
"``\"_id\"``: unique ID for this file (default: "
":class:`~bson.objectid.ObjectId`) - this ``\"_id\"`` must not have "
"already been used for another file"
msgstr ""

#: gridfs.grid_file.GridIn:20 of
msgid "``\"filename\"``: human name for the file"
msgstr ""

#: gridfs.grid_file.GridIn:22 of
msgid "``\"contentType\"`` or ``\"content_type\"``: valid mime-type for the file"
msgstr ""

#: gridfs.grid_file.GridIn:25 of
msgid ""
"``\"chunkSize\"`` or ``\"chunk_size\"``: size of each of the chunks, in "
"bytes (default: 255 kb)"
msgstr ""

#: gridfs.grid_file.GridIn:28 of
msgid ""
"``\"encoding\"``: encoding used for this file. In Python 2, any "
":class:`unicode` that is written to the file will be converted to a "
":class:`str`. In Python 3, any :class:`str` that is written to the file "
"will be converted to :class:`bytes`."
msgstr ""

#: gridfs.grid_file.GridIn:35 of
msgid "`root_collection`: root collection to write to"
msgstr ""

#: gridfs.grid_file.GridIn:36 gridfs.grid_file.GridOut:17 of
msgid ""
"`session` (optional): a :class:`~pymongo.client_session.ClientSession` to"
" use for all commands"
msgstr ""

#: gridfs.grid_file.GridIn:39 of
msgid ""
"`disable_md5` (optional): When True, an MD5 checksum will not be computed"
" for the uploaded file. Useful in environments where MD5 cannot be used "
"for regulatory or other reasons. Defaults to False."
msgstr ""

#: gridfs.grid_file.GridIn:43 of
msgid "`**kwargs` (optional): file level options (see above)"
msgstr ""

#: gridfs.GridFS.delete:19 gridfs.GridFS.exists:35 gridfs.GridFS.find_one:21
#: gridfs.GridFS.get:11 gridfs.GridFS.get_last_version:13
#: gridfs.GridFS.get_version:29 gridfs.GridFS.list:8
#: gridfs.GridFSBucket.delete:19 gridfs.GridFSBucket.download_to_stream:24
#: gridfs.GridFSBucket.download_to_stream_by_name:35
#: gridfs.GridFSBucket.open_download_stream:22
#: gridfs.GridFSBucket.open_download_stream_by_name:35
#: gridfs.GridFSBucket.open_upload_stream:33
#: gridfs.GridFSBucket.open_upload_stream_with_id:37
#: gridfs.GridFSBucket.rename:19 gridfs.GridFSBucket.upload_from_stream:33
#: gridfs.GridFSBucket.upload_from_stream_with_id:34 gridfs.grid_file.GridIn:45
#: gridfs.grid_file.GridOut:26 of pymongo.collection.Collection:44
#: pymongo.collection.Collection.bulk_write:58
#: pymongo.collection.Collection.count:51
#: pymongo.collection.Collection.delete_many:30
#: pymongo.collection.Collection.delete_one:30
#: pymongo.collection.Collection.distinct:28
#: pymongo.collection.Collection.drop:15 pymongo.collection.Collection.find:155
#: pymongo.collection.Collection.find_one_and_delete:50
#: pymongo.collection.Collection.find_one_and_replace:56
#: pymongo.collection.Collection.index_information:23
#: pymongo.collection.Collection.inline_map_reduce:27
#: pymongo.collection.Collection.insert_many:32
#: pymongo.collection.Collection.insert_one:29
#: pymongo.collection.Collection.list_indexes:15
#: pymongo.collection.Collection.map_reduce:35
#: pymongo.collection.Collection.options:12
#: pymongo.collection.Collection.parallel_scan:46
#: pymongo.collection.Collection.rename:21
#: pymongo.collection.Collection.replace_one:55
#: pymongo.database.Database.collection_names:13
#: pymongo.database.Database.command:63
#: pymongo.database.Database.create_collection:49
#: pymongo.database.Database.current_op:30
#: pymongo.database.Database.dereference:18
#: pymongo.database.Database.drop_collection:13
#: pymongo.database.Database.profiling_info:7
#: pymongo.database.Database.profiling_level:10
#: pymongo.database.Database.set_profiling_level:28
#: pymongo.database.Database.validate_collection:25
#: pymongo.mongo_client.MongoClient.database_names:11
#: pymongo.mongo_client.MongoClient.drop_database:14
#: pymongo.mongo_client.MongoClient.fsync:24
#: pymongo.mongo_client.MongoClient.server_info:7
#: pymongo.mongo_client.MongoClient.unlock:21
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names:11
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:14
msgid "Added ``session`` parameter."
msgstr ""

#: gridfs.grid_file.GridIn:48 of
msgid ""
"`root_collection` must use an acknowledged "
":attr:`~pymongo.collection.Collection.write_concern`"
msgstr ""

#: gridfs.grid_file.GridIn._id:1 gridfs.grid_file.GridOut._id:1 of
msgid "The ``'_id'`` value for this file."
msgstr ""

#: gridfs.grid_file.GridIn._id:3 gridfs.grid_file.GridIn.chunk_size:3
#: gridfs.grid_file.GridOut._id:3 gridfs.grid_file.GridOut.aliases:3
#: gridfs.grid_file.GridOut.chunk_size:3
#: gridfs.grid_file.GridOut.content_type:3 gridfs.grid_file.GridOut.filename:3
#: gridfs.grid_file.GridOut.length:3 gridfs.grid_file.GridOut.md5:3
#: gridfs.grid_file.GridOut.metadata:3 gridfs.grid_file.GridOut.name:3
#: gridfs.grid_file.GridOut.upload_date:3 of
msgid "This attribute is read-only."
msgstr ""

#: gridfs.grid_file.GridIn.abort:1 of
msgid "Remove all chunks/files that may have been uploaded and close."
msgstr ""

#: gridfs.grid_file.GridIn.chunk_size:1 gridfs.grid_file.GridOut.chunk_size:1
#: of
msgid "Chunk size for this file."
msgstr ""

#: gridfs.grid_file.GridIn.close:1 of
msgid "Flush the file and close it."
msgstr ""

#: gridfs.grid_file.GridIn.close:3 of
msgid ""
"A closed file cannot be written any more. Calling :meth:`close` more than"
" once is allowed."
msgstr ""

#: gridfs.grid_file.GridIn.closed:1 of
msgid "Is this file closed?"
msgstr ""

#: gridfs.grid_file.GridIn.content_type:1
#: gridfs.grid_file.GridOut.content_type:1 of
msgid "Mime-type for this file."
msgstr ""

#: gridfs.grid_file.GridIn.filename:1 gridfs.grid_file.GridOut.filename:1 of
msgid "Name of this file."
msgstr ""

#: gridfs.grid_file.GridIn.length:1 gridfs.grid_file.GridOut.length:1 of
msgid "Length (in bytes) of this file."
msgstr ""

#: gridfs.grid_file.GridIn.length:3 gridfs.grid_file.GridIn.md5:3
#: gridfs.grid_file.GridIn.upload_date:3 of
msgid ""
"This attribute is read-only and can only be read after :meth:`close` has "
"been called."
msgstr ""

#: gridfs.grid_file.GridIn.md5:1 gridfs.grid_file.GridOut.md5:1 of
msgid "MD5 of the contents of this file if an md5 sum was created."
msgstr ""

#: gridfs.grid_file.GridIn.name:1 gridfs.grid_file.GridOut.name:1 of
msgid "Alias for `filename`."
msgstr ""

#: gridfs.grid_file.GridIn.upload_date:1 of
msgid "Date that this file was uploaded."
msgstr ""

#: gridfs.grid_file.GridIn.write:1 of
msgid "Write data to the file. There is no return value."
msgstr ""

#: gridfs.grid_file.GridIn.write:3 of
msgid ""
"`data` can be either a string of bytes or a file-like object "
"(implementing :meth:`read`). If the file has an :attr:`encoding` "
"attribute, `data` can also be a :class:`unicode` (:class:`str` in python "
"3) instance, which will be encoded as :attr:`encoding` before being "
"written."
msgstr ""

#: gridfs.grid_file.GridIn.write:9 of
msgid ""
"Due to buffering, the data may not actually be written to the database "
"until the :meth:`close` method is called. Raises :class:`ValueError` if "
"this file is already closed. Raises :class:`TypeError` if `data` is not "
"an instance of :class:`str` (:class:`bytes` in python 3), a file-like "
"object, or an instance of :class:`unicode` (:class:`str` in python 3). "
"Unicode data is only allowed if the file has an :attr:`encoding` "
"attribute."
msgstr ""

#: gridfs.grid_file.GridIn.write:19 of
msgid "`data`: string of bytes or file-like object to be written to the file"
msgstr ""

#: gridfs.grid_file.GridIn.writelines:1 of
msgid "Write a sequence of strings to the file."
msgstr ""

#: gridfs.grid_file.GridIn.writelines:3 of
msgid "Does not add seperators."
msgstr ""

#: gridfs.grid_file.GridOut:1 of
msgid "Read a file from GridFS"
msgstr ""

#: gridfs.grid_file.GridOut:7 of
msgid ""
"Either `file_id` or `file_document` must be specified, `file_document` "
"will be given priority if present. Raises :class:`TypeError` if "
"`root_collection` is not an instance of "
":class:`~pymongo.collection.Collection`."
msgstr ""

#: gridfs.grid_file.GridOut:13 of
msgid "`root_collection`: root collection to read from"
msgstr ""

#: gridfs.grid_file.GridOut:14 of
msgid "`file_id` (optional): value of ``\"_id\"`` for the file to read"
msgstr ""

#: gridfs.grid_file.GridOut:15 of
msgid "`file_document` (optional): file document from `root_collection.files`"
msgstr ""

#: gridfs.grid_file.GridOut:21 of
msgid ""
"For better performance and to better follow the GridFS spec, "
":class:`GridOut` now uses a single cursor to read all the chunks in the "
"file."
msgstr ""

#: gridfs.grid_file.GridOut:29 of
msgid ""
"Creating a GridOut does not immediately retrieve the file metadata from "
"the server. Metadata is fetched when first needed."
msgstr ""

#: gridfs.grid_file.GridOut.__iter__:1 of
msgid "Return an iterator over all of this file's data."
msgstr ""

#: gridfs.grid_file.GridOut.__iter__:3 of
msgid ""
"The iterator will return chunk-sized instances of :class:`str` "
"(:class:`bytes` in python 3). This can be useful when serving files using"
" a webserver that handles such an iterator efficiently."
msgstr ""

#: gridfs.grid_file.GridOut.__iter__:9 of
msgid ""
"This is different from :py:class:`io.IOBase` which iterates over *lines* "
"in the file. Use :meth:`GridOut.readline` to read line by line instead of"
" chunk by chunk."
msgstr ""

#: gridfs.grid_file.GridOut.__iter__:13 of
msgid ""
"The iterator now raises :class:`CorruptGridFile` when encountering any "
"truncated, missing, or extra chunk in a file. The previous behavior was "
"to only raise :class:`CorruptGridFile` on a missing chunk."
msgstr ""

#: gridfs.grid_file.GridOut.aliases:1 of
msgid "List of aliases for this file."
msgstr ""

#: gridfs.grid_file.GridOut.close:1 of
msgid "Make GridOut more generically file-like."
msgstr ""

#: gridfs.grid_file.GridOut.metadata:1 of
msgid "Metadata attached to this file."
msgstr ""

#: gridfs.grid_file.GridOut.read:1 of
msgid "Read at most `size` bytes from the file (less if there isn't enough data)."
msgstr ""

#: gridfs.grid_file.GridOut.read:4 of
msgid ""
"The bytes are returned as an instance of :class:`str` (:class:`bytes` in "
"python 3). If `size` is negative or omitted all data is read."
msgstr ""

#: gridfs.grid_file.GridOut.read:8 of
msgid "`size` (optional): the number of bytes to read"
msgstr ""

#: gridfs.grid_file.GridOut.read:10 of
msgid ""
"This method now only checks for extra chunks after reading the entire "
"file. Previously, this method would check for extra chunks on every call."
msgstr ""

#: gridfs.grid_file.GridOut.readchunk:1 of
msgid ""
"Reads a chunk at a time. If the current position is within a chunk the "
"remainder of the chunk is returned."
msgstr ""

#: gridfs.grid_file.GridOut.readline:1 of
msgid "Read one line or up to `size` bytes from the file."
msgstr ""

#: gridfs.grid_file.GridOut.readline:4 of
msgid "`size` (optional): the maximum number of bytes to read"
msgstr ""

#: gridfs.grid_file.GridOut.seek:1 of
msgid "Set the current position of this file."
msgstr ""

#: gridfs.grid_file.GridOut.seek:4 of
msgid "`pos`: the position (or offset if using relative positioning) to seek to"
msgstr ""

#: gridfs.grid_file.GridOut.seek:6 of
msgid ""
"`whence` (optional): where to seek from. :attr:`os.SEEK_SET` (``0``) for "
"absolute file positioning, :attr:`os.SEEK_CUR` (``1``) to seek relative "
"to the current position, :attr:`os.SEEK_END` (``2``) to seek relative to "
"the file's end."
msgstr ""

#: gridfs.grid_file.GridOut.tell:1 of
msgid "Return the current position of this file."
msgstr ""

#: gridfs.grid_file.GridOut.upload_date:1 of
msgid "Date that this file was first uploaded."
msgstr ""

#: gridfs.grid_file.GridOutCursor:1 of
msgid ""
"Create a new cursor, similar to the normal "
":class:`~pymongo.cursor.Cursor`."
msgstr ""

#: gridfs.grid_file.GridOutCursor:4 of
msgid ""
"Should not be called directly by application developers - see the "
":class:`~gridfs.GridFS` method :meth:`~gridfs.GridFS.find` instead."
msgstr ""

#: gridfs.grid_file.GridOutCursor.add_option:1 of
#: pymongo.cursor.Cursor.add_option:1
msgid "Set arbitrary query flags using a bitmask."
msgstr ""

#: gridfs.grid_file.GridOutCursor.add_option:3 of
#: pymongo.cursor.Cursor.add_option:3
msgid "To set the tailable flag: cursor.add_option(2)"
msgstr ""

#: gridfs.grid_file.GridOutCursor.next:1 of
msgid "Get next GridOut object from cursor."
msgstr ""

#: gridfs.grid_file.GridOutCursor.remove_option:1 of
#: pymongo.cursor.Cursor.remove_option:1
msgid "Unset arbitrary query flags using a bitmask."
msgstr ""

#: gridfs.grid_file.GridOutCursor.remove_option:3 of
#: pymongo.cursor.Cursor.remove_option:3
msgid "To unset the tailable flag: cursor.remove_option(2)"
msgstr ""

#: ../../api/gridfs/index.rst:2
msgid ":mod:`gridfs` -- Tools for working with GridFS"
msgstr ""

#: gridfs:1 of
msgid "GridFS is a specification for storing large objects in Mongo."
msgstr ""

#: gridfs:3 of
msgid ""
"The :mod:`gridfs` package is an implementation of GridFS on top of "
":mod:`pymongo`, exposing a file-like interface."
msgstr ""

#: gridfs.GridFS:1 of
msgid "Create a new instance of :class:`GridFS`."
msgstr ""

#: gridfs.GridFS:3 of
msgid ""
"Raises :class:`TypeError` if `database` is not an instance of "
":class:`~pymongo.database.Database`."
msgstr ""

#: gridfs.GridFS:7 of
msgid "`database`: database to use"
msgstr ""

#: gridfs.GridFS:8 of
msgid "`collection` (optional): root collection to use"
msgstr ""

#: gridfs.GridFS:9 gridfs.GridFSBucket:19 of
msgid ""
"`disable_md5` (optional): When True, MD5 checksums will not be computed "
"for uploaded files. Useful in environments where MD5 cannot be used for "
"regulatory or other reasons. Defaults to False."
msgstr ""

#: gridfs.GridFS:13 of
msgid ""
"Running a GridFS operation in a transaction now always raises an error. "
"GridFS does not support multi-document transactions."
msgstr ""

#: gridfs.GridFS:17 of
msgid "Indexes are only ensured on the first write to the DB."
msgstr ""

#: gridfs.GridFS:20 of
msgid ""
"`database` must use an acknowledged "
":attr:`~pymongo.database.Database.write_concern`"
msgstr ""

#: gridfs.GridFS.delete:1 of
msgid "Delete a file from GridFS by ``\"_id\"``."
msgstr ""

#: gridfs.GridFS.delete:3 of
msgid "Deletes all data belonging to the file with ``\"_id\"``: `file_id`."
msgstr ""

#: gridfs.GridFS.delete:6 of
msgid ""
"Any processes/threads reading from the file while this method is "
"executing will likely see an invalid/corrupt file. Care should be taken "
"to avoid concurrent reads to a file while it is being deleted."
msgstr ""

#: gridfs.GridFS.delete:11 of
msgid ""
"Deletes of non-existent files are considered successful since the end "
"result is the same: no file with that _id remains."
msgstr ""

#: gridfs.GridFS.delete:15 of
msgid "`file_id`: ``\"_id\"`` of the file to delete"
msgstr ""

#: gridfs.GridFS.delete:16 gridfs.GridFS.exists:30 gridfs.GridFS.find_one:16
#: gridfs.GridFS.get:8 gridfs.GridFS.get_last_version:9
#: gridfs.GridFS.get_version:25 gridfs.GridFS.list:5
#: gridfs.GridFSBucket.delete:16 gridfs.GridFSBucket.download_to_stream:21
#: gridfs.GridFSBucket.download_to_stream_by_name:23
#: gridfs.GridFSBucket.open_download_stream:19
#: gridfs.GridFSBucket.open_download_stream_by_name:23
#: gridfs.GridFSBucket.open_upload_stream:30
#: gridfs.GridFSBucket.open_upload_stream_with_id:34
#: gridfs.GridFSBucket.rename:16 gridfs.GridFSBucket.upload_from_stream:30
#: gridfs.GridFSBucket.upload_from_stream_with_id:31 of
msgid "`session` (optional): a :class:`~pymongo.client_session.ClientSession`"
msgstr ""

#: gridfs.GridFS.delete:22 of
msgid "``delete`` no longer ensures indexes."
msgstr ""

#: gridfs.GridFS.exists:1 of
msgid "Check if a file exists in this instance of :class:`GridFS`."
msgstr ""

#: gridfs.GridFS.exists:3 of
msgid ""
"The file to check for can be specified by the value of its ``_id`` key, "
"or by passing in a query document. A query document can be passed in as "
"dictionary, or by using keyword arguments. Thus, the following three "
"calls are equivalent:"
msgstr ""

#: gridfs.GridFS.exists:12 of
msgid "As are the following two calls:"
msgstr ""

#: gridfs.GridFS.exists:17 of
msgid "And the following two:"
msgstr ""

#: gridfs.GridFS.exists:22 of
msgid ""
"Returns ``True`` if a matching file exists, ``False`` otherwise. Calls to"
" :meth:`exists` will not automatically create appropriate indexes; "
"application developers should be sure to create indexes if needed and as "
"appropriate."
msgstr ""

#: gridfs.GridFS.exists:28 of
msgid ""
"`document_or_id` (optional): query document, or _id of the document to "
"check for"
msgstr ""

#: gridfs.GridFS.exists:32 of
msgid ""
"`**kwargs` (optional): keyword arguments are used as a query document, if"
" they're present."
msgstr ""

#: gridfs.GridFS.find:1 of
msgid "Query GridFS for files."
msgstr ""

#: gridfs.GridFS.find:3 of
msgid ""
"Returns a cursor that iterates across files matching arbitrary queries on"
" the files collection. Can be combined with other modifiers for "
"additional control. For example::"
msgstr ""

#: gridfs.GridFS.find:11 gridfs.GridFSBucket.find:13 of
msgid ""
"would iterate through all versions of \"lisa.txt\" stored in GridFS. Note"
" that setting no_cursor_timeout to True may be important to prevent the "
"cursor from timing out during long multi-file processing work."
msgstr ""

#: gridfs.GridFS.find:16 gridfs.GridFSBucket.find:18 of
msgid "As another example, the call::"
msgstr ""

#: gridfs.GridFS.find:20 gridfs.GridFSBucket.find:22 of
msgid "would return a cursor to the three most recently uploaded files in GridFS."
msgstr ""

#: gridfs.GridFS.find:23 gridfs.GridFSBucket.find:25 of
msgid ""
"Follows a similar interface to "
":meth:`~pymongo.collection.Collection.find` in "
":class:`~pymongo.collection.Collection`."
msgstr ""

#: gridfs.GridFS.find:27 gridfs.GridFSBucket.find:29 of
msgid ""
"If a :class:`~pymongo.client_session.ClientSession` is passed to "
":meth:`find`, all returned :class:`~gridfs.grid_file.GridOut` instances "
"are associated with that session."
msgstr ""

#: gridfs.GridFS.find:32 of pymongo.collection.Collection.find:23
msgid ""
"`filter` (optional): a SON object specifying elements which must be "
"present for a document to be included in the result set"
msgstr ""

#: gridfs.GridFS.find:35 of
msgid ""
"`skip` (optional): the number of files to omit (from the start of the "
"result set) when returning the results"
msgstr ""

#: gridfs.GridFS.find:37 of
msgid "`limit` (optional): the maximum number of results to return"
msgstr ""

#: gridfs.GridFS.find:39 of pymongo.collection.Collection.find:38
msgid ""
"`no_cursor_timeout` (optional): if False (the default), any returned "
"cursor is closed by the server after 10 minutes of inactivity. If set to "
"True, the returned cursor will never time out on the server. Care should "
"be taken to ensure that cursors with no_cursor_timeout turned on are "
"properly closed."
msgstr ""

#: gridfs.GridFS.find:44 of pymongo.collection.Collection.find:66
msgid ""
"`sort` (optional): a list of (key, direction) pairs specifying the sort "
"order for this query. See :meth:`~pymongo.cursor.Cursor.sort` for "
"details."
msgstr ""

#: gridfs.GridFS.find:48 of
msgid ""
"Raises :class:`TypeError` if any of the arguments are of improper type. "
"Returns an instance of :class:`~gridfs.grid_file.GridOutCursor` "
"corresponding to this query."
msgstr ""

#: gridfs.GridFS.find:53 of
msgid ""
"Removed the read_preference, tag_sets, and "
"secondary_acceptable_latency_ms options."
msgstr ""

#: gridfs.GridFS.find_one:1 of
msgid "Get a single file from gridfs."
msgstr ""

#: gridfs.GridFS.find_one:3 of
msgid ""
"All arguments to :meth:`find` are also valid arguments for "
":meth:`find_one`, although any `limit` argument will be ignored. Returns "
"a single :class:`~gridfs.grid_file.GridOut`, or ``None`` if no matching "
"file is found. For example::"
msgstr ""

#: gridfs.GridFS.find_one:11 of
msgid ""
"`filter` (optional): a dictionary specifying the query to be performing "
"OR any other type to be used as the value for a query for ``\"_id\"`` in "
"the file collection."
msgstr ""

#: gridfs.GridFS.find_one:14 of pymongo.collection.Collection.find_one:17
msgid ""
"`*args` (optional): any additional positional arguments are the same as "
"the arguments to :meth:`find`."
msgstr ""

#: gridfs.GridFS.find_one:18 of pymongo.collection.Collection.find_one:20
msgid ""
"`**kwargs` (optional): any additional keyword arguments are the same as "
"the arguments to :meth:`find`."
msgstr ""

#: gridfs.GridFS.get:1 of
msgid "Get a file from GridFS by ``\"_id\"``."
msgstr ""

#: gridfs.GridFS.get:3 of
msgid ""
"Returns an instance of :class:`~gridfs.grid_file.GridOut`, which provides"
" a file-like interface for reading."
msgstr ""

#: gridfs.GridFS.get:7 of
msgid "`file_id`: ``\"_id\"`` of the file to get"
msgstr ""

#: gridfs.GridFS.get_last_version:1 of
msgid ""
"Get the most recent version of a file in GridFS by ``\"filename\"`` or "
"metadata fields."
msgstr ""

#: gridfs.GridFS.get_last_version:4 of
msgid ""
"Equivalent to calling :meth:`get_version` with the default `version` "
"(``-1``)."
msgstr ""

#: gridfs.GridFS.get_last_version:8 gridfs.GridFS.get_version:22 of
msgid "`filename`: ``\"filename\"`` of the file to get, or `None`"
msgstr ""

#: gridfs.GridFS.get_last_version:11 gridfs.GridFS.get_version:27 of
msgid "`**kwargs` (optional): find files by custom metadata."
msgstr ""

#: gridfs.GridFS.get_version:1 of
msgid "Get a file from GridFS by ``\"filename\"`` or metadata fields."
msgstr ""

#: gridfs.GridFS.get_version:3 of
msgid ""
"Returns a version of the file in GridFS whose filename matches `filename`"
" and whose metadata fields match the supplied keyword arguments, as an "
"instance of :class:`~gridfs.grid_file.GridOut`."
msgstr ""

#: gridfs.GridFS.get_version:7 of
msgid ""
"Version numbering is a convenience atop the GridFS API provided by "
"MongoDB. If more than one file matches the query (either by `filename` "
"alone, by metadata fields, or by a combination of both), then version "
"``-1`` will be the most recently uploaded matching file, ``-2`` the "
"second most recently uploaded, etc. Version ``0`` will be the first "
"version uploaded, ``1`` the second version, etc. So if three versions "
"have been uploaded, then version ``0`` is the same as version ``-3``, "
"version ``1`` is the same as version ``-2``, and version ``2`` is the "
"same as version ``-1``."
msgstr ""

#: gridfs.GridFS.get_version:18 of
msgid ""
"Raises :class:`~gridfs.errors.NoFile` if no such version of that file "
"exists."
msgstr ""

#: gridfs.GridFS.get_version:23 of
msgid ""
"`version` (optional): version of the file to get (defaults to -1, the "
"most recent version uploaded)"
msgstr ""

#: gridfs.GridFS.get_version:32 of
msgid "``get_version`` no longer ensures indexes."
msgstr ""

#: gridfs.GridFS.list:1 of
msgid "List the names of all files stored in this instance of :class:`GridFS`."
msgstr ""

#: gridfs.GridFS.list:11 of
msgid "``list`` no longer ensures indexes."
msgstr ""

#: gridfs.GridFS.new_file:1 of
msgid "Create a new file in GridFS."
msgstr ""

#: gridfs.GridFS.new_file:3 of
msgid ""
"Returns a new :class:`~gridfs.grid_file.GridIn` instance to which data "
"can be written. Any keyword arguments will be passed through to "
":meth:`~gridfs.grid_file.GridIn`."
msgstr ""

#: gridfs.GridFS.new_file:7 gridfs.GridFS.put:20 of
msgid ""
"If the ``\"_id\"`` of the file is manually specified, it must not already"
" exist in GridFS. Otherwise :class:`~gridfs.errors.FileExists` is raised."
msgstr ""

#: gridfs.GridFS.new_file:12 gridfs.GridFS.put:26 of
msgid "`**kwargs` (optional): keyword arguments for file creation"
msgstr ""

#: gridfs.GridFS.put:1 of
msgid "Put data in GridFS as a new file."
msgstr ""

#: gridfs.GridFS.put:3 of
msgid "Equivalent to doing::"
msgstr ""

#: gridfs.GridFS.put:11 of
msgid ""
"`data` can be either an instance of :class:`str` (:class:`bytes` in "
"python 3) or a file-like object providing a :meth:`read` method. If an "
"`encoding` keyword argument is passed, `data` can also be a "
":class:`unicode` (:class:`str` in python 3) instance, which will be "
"encoded as `encoding` before being written. Any keyword arguments will be"
" passed through to the created file - see "
":meth:`~gridfs.grid_file.GridIn` for possible arguments. Returns the "
"``\"_id\"`` of the created file."
msgstr ""

#: gridfs.GridFS.put:25 of
msgid "`data`: data to be written as a file."
msgstr ""

#: gridfs.GridFS.put:28 of
msgid "w=0 writes to GridFS are now prohibited."
msgstr ""

#: gridfs.GridFSBucket:1 of
msgid "Create a new instance of :class:`GridFSBucket`."
msgstr ""

#: gridfs.GridFSBucket:3 of
msgid ""
"Raises :exc:`TypeError` if `database` is not an instance of "
":class:`~pymongo.database.Database`."
msgstr ""

#: gridfs.GridFSBucket:6 of
msgid ""
"Raises :exc:`~pymongo.errors.ConfigurationError` if `write_concern` is "
"not acknowledged."
msgstr ""

#: gridfs.GridFSBucket:10 of
msgid "`database`: database to use."
msgstr ""

#: gridfs.GridFSBucket:11 of
msgid "`bucket_name` (optional): The name of the bucket. Defaults to 'fs'."
msgstr ""

#: gridfs.GridFSBucket:12 of
msgid "`chunk_size_bytes` (optional): The chunk size in bytes. Defaults to 255KB."
msgstr ""

#: gridfs.GridFSBucket:14 of
msgid ""
"`write_concern` (optional): The "
":class:`~pymongo.write_concern.WriteConcern` to use. If ``None`` (the "
"default) db.write_concern is used."
msgstr ""

#: gridfs.GridFSBucket:17 of
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) db.read_preference is used."
msgstr ""

#: gridfs.GridFSBucket:23 of
msgid ""
"Running a GridFS operation in a transaction now always raises an error. "
"GridFSBucket does not support multi-document transactions."
msgstr ""

#: gridfs.GridFSBucket.delete:1 of
msgid ""
"Given an file_id, delete this stored file's files collection document and"
" associated chunks from a GridFS bucket."
msgstr ""

#: gridfs.GridFSBucket.delete:4 gridfs.GridFSBucket.download_to_stream:4
#: gridfs.GridFSBucket.download_to_stream_by_name:4 gridfs.GridFSBucket.find:7
#: gridfs.GridFSBucket.open_download_stream:4
#: gridfs.GridFSBucket.open_download_stream_by_name:4
#: gridfs.GridFSBucket.rename:3 of
msgid "For example::"
msgstr ""

#: gridfs.GridFSBucket.delete:12 gridfs.GridFSBucket.download_to_stream:16
#: gridfs.GridFSBucket.open_download_stream:15 gridfs.GridFSBucket.rename:11 of
msgid "Raises :exc:`~gridfs.errors.NoFile` if no file with file_id exists."
msgstr ""

#: gridfs.GridFSBucket.delete:15 of
msgid "`file_id`: The _id of the file to be deleted."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream:1 of
msgid ""
"Downloads the contents of the stored file specified by file_id and writes"
" the contents to `destination`."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream:19
#: gridfs.GridFSBucket.open_download_stream:18 of
msgid "`file_id`: The _id of the file to be downloaded."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream:20 of
msgid "`destination`: a file-like object implementing :meth:`write`."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:1 of
msgid ""
"Write the contents of `filename` (with optional `revision`) to "
"`destination`."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:12
#: gridfs.GridFSBucket.open_download_stream_by_name:13 of
msgid ""
"Raises :exc:`~gridfs.errors.NoFile` if no such version of that file "
"exists."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:15 of
msgid "Raises :exc:`~ValueError` if `filename` is not a string."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:18
#: gridfs.GridFSBucket.open_download_stream_by_name:19 of
msgid "`filename`: The name of the file to read from."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:19 of
msgid "`destination`: A file-like object that implements :meth:`write`."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:20
#: gridfs.GridFSBucket.open_download_stream_by_name:20 of
msgid ""
"`revision` (optional): Which revision (documents with the same filename "
"and different uploadDate) of the file to retrieve. Defaults to -1 (the "
"most recent revision)."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name
#: gridfs.GridFSBucket.open_download_stream_by_name of
msgid "Note"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:26
#: gridfs.GridFSBucket.open_download_stream_by_name:26 of
msgid "Revision numbers are defined as follows:"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:28
#: gridfs.GridFSBucket.open_download_stream_by_name:28 of
msgid "0 = the original stored file"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:29
#: gridfs.GridFSBucket.open_download_stream_by_name:29 of
msgid "1 = the first revision"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:30
#: gridfs.GridFSBucket.open_download_stream_by_name:30 of
msgid "2 = the second revision"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:31
#: gridfs.GridFSBucket.open_download_stream_by_name:31 of
msgid "etc..."
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:32
#: gridfs.GridFSBucket.open_download_stream_by_name:32 of
msgid "-2 = the second most recent revision"
msgstr ""

#: gridfs.GridFSBucket.download_to_stream_by_name:33
#: gridfs.GridFSBucket.open_download_stream_by_name:33 of
msgid "-1 = the most recent revision"
msgstr ""

#: gridfs.GridFSBucket.find:1 of
msgid "Find and return the files collection documents that match ``filter``"
msgstr ""

#: gridfs.GridFSBucket.find:3 of
msgid ""
"Returns a cursor that iterates across files matching arbitrary queries on"
" the files collection. Can be combined with other modifiers for "
"additional control."
msgstr ""

#: gridfs.GridFSBucket.find:34 of
msgid "`filter`: Search query."
msgstr ""

#: gridfs.GridFSBucket.find:35 of
msgid "`batch_size` (optional): The number of documents to return per batch."
msgstr ""

#: gridfs.GridFSBucket.find:37 of
msgid "`limit` (optional): The maximum number of documents to return."
msgstr ""

#: gridfs.GridFSBucket.find:38 of
msgid ""
"`no_cursor_timeout` (optional): The server normally times out idle "
"cursors after an inactivity period (10 minutes) to prevent excess memory "
"use. Set this option to True prevent that."
msgstr ""

#: gridfs.GridFSBucket.find:41 of
msgid "`skip` (optional): The number of documents to skip before returning."
msgstr ""

#: gridfs.GridFSBucket.find:43 of
msgid "`sort` (optional): The order by which to sort results. Defaults to None."
msgstr ""

#: gridfs.GridFSBucket.open_download_stream:1 of
msgid ""
"Opens a Stream from which the application can read the contents of the "
"stored file specified by file_id."
msgstr ""

#: gridfs.GridFSBucket.open_download_stream:13
#: gridfs.GridFSBucket.open_download_stream_by_name:11 of
msgid "Returns an instance of :class:`~gridfs.grid_file.GridOut`."
msgstr ""

#: gridfs.GridFSBucket.open_download_stream_by_name:1 of
msgid ""
"Opens a Stream from which the application can read the contents of "
"`filename` and optional `revision`."
msgstr ""

#: gridfs.GridFSBucket.open_download_stream_by_name:16 of
msgid "Raises :exc:`~ValueError` filename is not a string."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:1
#: gridfs.GridFSBucket.open_upload_stream_with_id:1 of
msgid "Opens a Stream that the application can write the contents of the file to."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:4 of
msgid ""
"The user must specify the filename, and can choose to add any additional "
"information in the metadata field of the file document or modify the "
"chunk size. For example::"
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:17
#: gridfs.GridFSBucket.open_upload_stream_with_id:19 of
msgid "Returns an instance of :class:`~gridfs.grid_file.GridIn`."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:19
#: gridfs.GridFSBucket.open_upload_stream_with_id:21
#: gridfs.GridFSBucket.upload_from_stream:17
#: gridfs.GridFSBucket.upload_from_stream_with_id:16 of
msgid ""
"Raises :exc:`~gridfs.errors.NoFile` if no such version of that file "
"exists. Raises :exc:`~ValueError` if `filename` is not a string."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:24
#: gridfs.GridFSBucket.open_upload_stream_with_id:28
#: gridfs.GridFSBucket.upload_from_stream:22
#: gridfs.GridFSBucket.upload_from_stream_with_id:23 of
msgid "`filename`: The name of the file to upload."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:25
#: gridfs.GridFSBucket.open_upload_stream_with_id:29 of
msgid ""
"`chunk_size_bytes` (options): The number of bytes per chunk of this file."
" Defaults to the chunk_size_bytes in :class:`GridFSBucket`."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream:27
#: gridfs.GridFSBucket.open_upload_stream_with_id:31
#: gridfs.GridFSBucket.upload_from_stream:27
#: gridfs.GridFSBucket.upload_from_stream_with_id:28 of
msgid ""
"`metadata` (optional): User data for the 'metadata' field of the files "
"collection document. If not provided the metadata field will be omitted "
"from the files collection document."
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream_with_id:4 of
msgid ""
"The user must specify the file id and filename, and can choose to add any"
" additional information in the metadata field of the file document or "
"modify the chunk size. For example::"
msgstr ""

#: gridfs.GridFSBucket.open_upload_stream_with_id:26
#: gridfs.GridFSBucket.upload_from_stream_with_id:21 of
msgid ""
"`file_id`: The id to use for this file. The id must not have already been"
" used for another file."
msgstr ""

#: gridfs.GridFSBucket.rename:1 of
msgid "Renames the stored file with the specified file_id."
msgstr ""

#: gridfs.GridFSBucket.rename:14 of
msgid "`file_id`: The _id of the file to be renamed."
msgstr ""

#: gridfs.GridFSBucket.rename:15 of
msgid "`new_filename`: The new name of the file."
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream:1 of
msgid "Uploads a user file to a GridFS bucket."
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream:3
#: gridfs.GridFSBucket.upload_from_stream_with_id:3 of
msgid ""
"Reads the contents of the user file from `source` and uploads it to the "
"file `filename`. Source can be a string or file-like object. For "
"example::"
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream:15 of
msgid "Returns the _id of the uploaded file."
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream:23
#: gridfs.GridFSBucket.upload_from_stream_with_id:24 of
msgid ""
"`source`: The source stream of the content to be uploaded. Must be a "
"file-like object that implements :meth:`read` or a string."
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream:25
#: gridfs.GridFSBucket.upload_from_stream_with_id:26 of
msgid ""
"`chunk_size_bytes` (options): The number of bytes per chunk of this file."
" Defaults to the chunk_size_bytes of :class:`GridFSBucket`."
msgstr ""

#: gridfs.GridFSBucket.upload_from_stream_with_id:1 of
msgid "Uploads a user file to a GridFS bucket with a custom file id."
msgstr ""

#: ../../api/index.rst:2
msgid "API Documentation"
msgstr ""

#: ../../api/index.rst:4
msgid ""
"The PyMongo distribution contains three top-level packages for "
"interacting with MongoDB. :mod:`bson` is an implementation of the `BSON "
"format <http://bsonspec.org>`_, :mod:`pymongo` is a full-featured driver "
"for MongoDB, and :mod:`gridfs` is a set of tools for working with the "
"`GridFS <http://www.mongodb.org/display/DOCS/GridFS+Specification>`_ "
"storage specification."
msgstr ""

#: ../../api/pymongo/bulk.rst:2
msgid ":mod:`bulk` -- The bulk write operations interface"
msgstr ""

#: of pymongo.bulk:1
msgid "The bulk write operations interface."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:1
msgid "**DEPRECATED**: Initialize a new BulkOperationBuilder instance."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:4
msgid "`collection`: A :class:`~pymongo.collection.Collection` instance."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:5
msgid ""
"`ordered` (optional): If ``True`` all operations will be executed "
"serially, in the order provided, and the entire execution will abort on "
"the first error. If ``False`` operations will be executed in arbitrary "
"order (possibly in parallel on the server), reporting any errors that "
"occurred after attempting all operations. Defaults to ``True``."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:11
#: pymongo.collection.Collection.bulk_write:44
#: pymongo.collection.Collection.initialize_ordered_bulk_op:8
#: pymongo.collection.Collection.initialize_unordered_bulk_op:7
#: pymongo.collection.Collection.insert_many:18
#: pymongo.collection.Collection.insert_one:15
msgid ""
"`bypass_document_validation`: (optional) If ``True``, allows the write to"
" opt-out of document level validation. Default is ``False``."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:15
#: pymongo.collection.Collection.bulk_write:55
#: pymongo.collection.Collection.initialize_ordered_bulk_op:16
#: pymongo.collection.Collection.initialize_unordered_bulk_op:15
#: pymongo.collection.Collection.insert_many:29
#: pymongo.collection.Collection.insert_one:26
msgid "`bypass_document_validation` requires server version **>= 3.2**"
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:18
#: pymongo.collection.Collection.initialize_ordered_bulk_op:19
#: pymongo.collection.Collection.initialize_unordered_bulk_op:18
msgid "Deprecated. Use :meth:`~pymongo.collection.Collection.bulk_write` instead."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder:22
#: pymongo.collection.Collection.bulk_write:61
#: pymongo.collection.Collection.initialize_ordered_bulk_op:23
#: pymongo.collection.Collection.initialize_unordered_bulk_op:22
#: pymongo.collection.Collection.insert_many:35
#: pymongo.collection.Collection.insert_one:32
msgid "Added bypass_document_validation support"
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.execute:1
msgid "Execute all provided operations."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.execute:4
msgid "write_concern (optional): the write concern for this bulk execution."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find:1
msgid "Specify selection criteria for bulk operations."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find:4
msgid ""
"`selector` (dict): the selection criteria for update and remove "
"operations."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find:6
#: pymongo.collection.Collection.aggregate:17
#: pymongo.collection.Collection.count:16
#: pymongo.collection.Collection.count_documents:17
#: pymongo.collection.Collection.delete_many:13
#: pymongo.collection.Collection.delete_one:13
#: pymongo.collection.Collection.distinct:12
#: pymongo.collection.Collection.find:78
#: pymongo.collection.Collection.replace_one:38
#: pymongo.collection.Collection.update_many:29
#: pymongo.collection.Collection.update_one:29 pymongo.operations.DeleteMany:7
#: pymongo.operations.DeleteOne:7 pymongo.operations.ReplaceOne:10
#: pymongo.operations.UpdateMany:10 pymongo.operations.UpdateOne:10
msgid ""
"`collation` (optional): An instance of "
":class:`~pymongo.collation.Collation`. This option is only supported on "
"MongoDB 3.4 and above."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find
#: pymongo.bulk.BulkWriteOperation.upsert
#: pymongo.change_stream.ChangeStream.try_next
#: pymongo.client_session.ClientSession.with_transaction
#: pymongo.collection.Collection.aggregate
#: pymongo.collection.Collection.bulk_write
#: pymongo.collection.Collection.delete_many
#: pymongo.collection.Collection.delete_one
#: pymongo.collection.Collection.insert_many
#: pymongo.collection.Collection.insert_one
#: pymongo.collection.Collection.list_indexes
#: pymongo.collection.Collection.replace_one
#: pymongo.collection.Collection.update_many
#: pymongo.collection.Collection.update_one pymongo.collection.Collection.watch
#: pymongo.database.Database.aggregate
#: pymongo.database.Database.list_collections pymongo.database.Database.watch
#: pymongo.encryption.ClientEncryption.create_data_key
#: pymongo.encryption.ClientEncryption.decrypt
#: pymongo.encryption.ClientEncryption.encrypt
#: pymongo.mongo_client.MongoClient.list_databases
#: pymongo.mongo_client.MongoClient.start_session
#: pymongo.mongo_client.MongoClient.watch
msgid "Returns"
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find:11
msgid ""
"A :class:`BulkWriteOperation` instance, used to add update and remove "
"operations to this bulk operation."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.find:14
#: pymongo.collection.Collection.delete_many:32
#: pymongo.collection.Collection.delete_one:32
#: pymongo.collection.Collection.find_one_and_delete:61
#: pymongo.collection.Collection.group:10
#: pymongo.collection.Collection.inline_map_reduce:29
#: pymongo.collection.Collection.map_reduce:44
#: pymongo.collection.Collection.replace_one:57
#: pymongo.collection.Collection.update_many:53
#: pymongo.operations.DeleteMany:19 pymongo.operations.DeleteOne:19
#: pymongo.operations.UpdateMany:28 pymongo.operations.UpdateOne:28
msgid "Added the `collation` option."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.insert:1
#: pymongo.collection.Collection.insert_one:1
msgid "Insert a single document."
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.insert:4
msgid "`document` (dict): the document to insert"
msgstr ""

#: of pymongo.bulk.BulkOperationBuilder.insert:6
#: pymongo.collection.Collection.bulk_write:53
#: pymongo.collection.Collection.insert_many:27
#: pymongo.collection.Collection.insert_one:24
msgid ":ref:`writes-and-ids`"
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation:1
msgid "An interface for adding upsert operations."
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation.replace_one:1
#: pymongo.bulk.BulkWriteOperation.replace_one:1
msgid "Replace one entire document matching the selector criteria."
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation.replace_one:4
#: pymongo.bulk.BulkWriteOperation.replace_one:4
msgid "`replacement` (dict): the replacement document"
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation.update:1
msgid "Update all documents matching the selector."
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation.update:4
#: pymongo.bulk.BulkUpsertOperation.update_one:4
#: pymongo.bulk.BulkWriteOperation.update:4
#: pymongo.bulk.BulkWriteOperation.update_one:4
msgid "`update` (dict): the update operations to apply"
msgstr ""

#: of pymongo.bulk.BulkUpsertOperation.update_one:1
msgid "Update one document matching the selector."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation:1
msgid "An interface for adding update or remove operations."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.remove:1
msgid "Remove all documents matching the selector criteria."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.remove_one:1
msgid "Remove a single document matching the selector criteria."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.update:1
msgid "Update all documents matching the selector criteria."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.update_one:1
msgid "Update one document matching the selector criteria."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.upsert:1
msgid "Specify that all chained update operations should be upserts."
msgstr ""

#: of pymongo.bulk.BulkWriteOperation.upsert:5
msgid ""
"A :class:`BulkUpsertOperation` instance, used to add update operations to"
" this bulk operation."
msgstr ""

#: ../../api/pymongo/change_stream.rst:2
msgid ""
":mod:`change_stream` -- Watch changes on a collection, database, or "
"cluster"
msgstr ""

#: of pymongo.change_stream:1
msgid "Watch changes on a collection, a database, or the entire cluster."
msgstr ""

#: of pymongo.change_stream.ChangeStream:1
msgid "The internal abstract base class for change stream cursors."
msgstr ""

#: of pymongo.change_stream.ChangeStream:3
msgid ""
"Should not be called directly by application developers. Use  "
":meth:`pymongo.collection.Collection.watch`, "
":meth:`pymongo.database.Database.watch`, or "
":meth:`pymongo.mongo_client.MongoClient.watch` instead."
msgstr ""

#: of pymongo.change_stream.ChangeStream.alive:1
#: pymongo.command_cursor.CommandCursor.alive:1 pymongo.cursor.Cursor.alive:1
msgid "Does this cursor have the potential to return more data?"
msgstr ""

#: of pymongo.change_stream.ChangeStream.alive:3
msgid ""
"Even if :attr:`alive` is ``True``, :meth:`next` can raise "
":exc:`StopIteration` and :meth:`try_next` can return ``None``."
msgstr ""

#: of pymongo.change_stream.ChangeStream.close:1
msgid "Close this ChangeStream."
msgstr ""

#: of pymongo.change_stream.ChangeStream.next:1
#: pymongo.command_cursor.CommandCursor.next:1 pymongo.cursor.Cursor.next:1
msgid "Advance the cursor."
msgstr ""

#: of pymongo.change_stream.ChangeStream.next:3
msgid ""
"This method blocks until the next change document is returned or an "
"unrecoverable error is raised. This method is used when iterating over "
"all changes in the cursor. For example::"
msgstr ""

#: of pymongo.change_stream.ChangeStream.next:30
msgid "Raises :exc:`StopIteration` if this ChangeStream is closed."
msgstr ""

#: of pymongo.change_stream.ChangeStream.resume_token:1
msgid ""
"The cached resume token that will be used to resume after the most "
"recently returned change."
msgstr ""

#: of pymongo.change_stream.ChangeStream.try_next:1
msgid "Advance the cursor without blocking indefinitely."
msgstr ""

#: of pymongo.change_stream.ChangeStream.try_next:3
msgid ""
"This method returns the next change document without waiting indefinitely"
" for the next change. For example::"
msgstr ""

#: of pymongo.change_stream.ChangeStream.try_next:21
msgid ""
"If no change document is cached locally then this method runs a single "
"getMore command. If the getMore yields any documents, the next document "
"is returned, otherwise, if the getMore returns no documents (because "
"there have been no changes) then ``None`` is returned."
msgstr ""

#: of pymongo.change_stream.ChangeStream.try_next:27
msgid ""
"The next change document or ``None`` when no document is available after "
"running a single getMore or when the cursor is closed."
msgstr ""

#: of pymongo.change_stream.ClusterChangeStream:1
msgid "A change stream that watches changes on all collections in the cluster."
msgstr ""

#: of pymongo.change_stream.ClusterChangeStream:3
msgid ""
"Should not be called directly by application developers. Use helper "
"method :meth:`pymongo.mongo_client.MongoClient.watch` instead."
msgstr ""

#: of pymongo.change_stream.CollectionChangeStream:1
msgid "A change stream that watches changes on a single collection."
msgstr ""

#: of pymongo.change_stream.CollectionChangeStream:3
msgid ""
"Should not be called directly by application developers. Use helper "
"method :meth:`pymongo.collection.Collection.watch` instead."
msgstr ""

#: of pymongo.change_stream.DatabaseChangeStream:1
msgid "A change stream that watches changes on all collections in a database."
msgstr ""

#: of pymongo.change_stream.DatabaseChangeStream:3
msgid ""
"Should not be called directly by application developers. Use helper "
"method :meth:`pymongo.database.Database.watch` instead."
msgstr ""

#: ../../api/pymongo/client_session.rst:2
msgid ":mod:`client_session` -- Logical sessions for sequential operations"
msgstr ""

#: of pymongo.client_session:1
msgid "Logical sessions for ordering sequential operations."
msgstr ""

#: of pymongo.client_session:3
msgid "Requires MongoDB 3.6."
msgstr ""

#: of pymongo.client_session:8
msgid "Causally Consistent Reads"
msgstr ""

#: of pymongo.client_session:21
msgid ""
"If `causal_consistency` is True (the default), read operations that use "
"the session are causally after previous read and write operations. Using "
"a causally consistent session, an application can read its own writes and"
" is guaranteed monotonic reads, even when reading from replica set "
"secondaries."
msgstr ""

#: of pymongo.client_session:31
msgid "Transactions"
msgstr ""

#: of pymongo.client_session:33
msgid ""
"MongoDB 4.0 adds support for transactions on replica set primaries. A "
"transaction is associated with a :class:`ClientSession`. To start a "
"transaction on a session, use :meth:`ClientSession.start_transaction` in "
"a with-statement. Then, execute an operation within the transaction by "
"passing the session to the operation:"
msgstr ""

#: of pymongo.client_session:49
msgid ""
"Upon normal completion of ``with session.start_transaction()`` block, the"
" transaction automatically calls "
":meth:`ClientSession.commit_transaction`. If the block exits with an "
"exception, the transaction automatically calls "
":meth:`ClientSession.abort_transaction`."
msgstr ""

#: of pymongo.client_session:54
msgid ""
"In general, multi-document transactions only support read/write (CRUD) "
"operations on existing collections. However, MongoDB 4.4 adds support for"
" creating collections and indexes with some limitations, including an "
"insert operation that would result in the creation of a new collection. "
"For a complete description of all the supported and unsupported "
"operations see the `MongoDB server's documentation for transactions "
"<http://dochub.mongodb.org/core/transactions>`_."
msgstr ""

#: of pymongo.client_session:62
msgid ""
"A session may only have a single active transaction at a time, multiple "
"transactions on the same session can be executed in sequence."
msgstr ""

#: of pymongo.client_session:68
msgid "Sharded Transactions"
msgstr ""

#: of pymongo.client_session:70
msgid ""
"PyMongo 3.9 adds support for transactions on sharded clusters running "
"MongoDB 4.2. Sharded transactions have the same API as replica set "
"transactions. When running a transaction against a sharded cluster, the "
"session is pinned to the mongos server selected for the first operation "
"in the transaction. All subsequent operations that are part of the same "
"transaction are routed to the same mongos server. When the transaction is"
" completed, by running either commitTransaction or abortTransaction, the "
"session is unpinned."
msgstr ""

#: of pymongo.client_session:83
msgid "Classes"
msgstr ""

#: of pymongo.client_session.ClientSession:1
msgid "A session for ordering sequential operations."
msgstr ""

#: of pymongo.client_session.ClientSession:3
msgid ""
":class:`ClientSession` instances are **not thread-safe or fork-safe**. "
"They can only be used by one thread or process at a time. A single "
":class:`ClientSession` cannot be used to run multiple operations "
"concurrently."
msgstr ""

#: of pymongo.client_session.ClientSession:8
msgid ""
"Should not be initialized directly by application developers - to create "
"a :class:`ClientSession`, call "
":meth:`~pymongo.mongo_client.MongoClient.start_session`."
msgstr ""

#: of pymongo.client_session.ClientSession.abort_transaction:1
msgid "Abort a multi-statement transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.advance_cluster_time:1
msgid "Update the cluster time for this session."
msgstr ""

#: of pymongo.client_session.ClientSession.advance_cluster_time:4
msgid ""
"`cluster_time`: The "
":data:`~pymongo.client_session.ClientSession.cluster_time` from another "
"`ClientSession` instance."
msgstr ""

#: of pymongo.client_session.ClientSession.advance_operation_time:1
msgid "Update the operation time for this session."
msgstr ""

#: of pymongo.client_session.ClientSession.advance_operation_time:4
msgid ""
"`operation_time`: The "
":data:`~pymongo.client_session.ClientSession.operation_time` from another"
" `ClientSession` instance."
msgstr ""

#: of pymongo.client_session.ClientSession.client:1
msgid ""
"The :class:`~pymongo.mongo_client.MongoClient` this session was created "
"from."
msgstr ""

#: of pymongo.client_session.ClientSession.cluster_time:1
msgid "The cluster time returned by the last operation executed in this session."
msgstr ""

#: of pymongo.client_session.ClientSession.commit_transaction:1
msgid "Commit a multi-statement transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.end_session:1
msgid "Finish this session. If a transaction has started, abort it."
msgstr ""

#: of pymongo.client_session.ClientSession.end_session:3
msgid "It is an error to use the session after the session has ended."
msgstr ""

#: of pymongo.client_session.ClientSession.has_ended:1
msgid "True if this session is finished."
msgstr ""

#: of pymongo.client_session.ClientSession.in_transaction:1
msgid "True if this session has an active multi-statement transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.operation_time:1
msgid ""
"The operation time returned by the last operation executed in this "
"session."
msgstr ""

#: of pymongo.client_session.ClientSession.options:1
msgid "The :class:`SessionOptions` this session was created with."
msgstr ""

#: of pymongo.client_session.ClientSession.session_id:1
msgid "A BSON document, the opaque server session identifier."
msgstr ""

#: of pymongo.client_session.ClientSession.start_transaction:1
msgid "Start a multi-statement transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.start_transaction:3
msgid "Takes the same arguments as :class:`TransactionOptions`."
msgstr ""

#: of pymongo.client_session.ClientSession.start_transaction:5
#: pymongo.client_session.TransactionOptions:22
msgid "Added the ``max_commit_time_ms`` option."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:1
msgid "Execute a callback in a transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:3
msgid ""
"This method starts a transaction on this session, executes ``callback`` "
"once, and then commits the transaction. For example::"
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:16
msgid ""
"To pass arbitrary arguments to the ``callback``, wrap your callable with "
"a ``lambda`` like this::"
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:26
msgid ""
"In the event of an exception, ``with_transaction`` may retry the commit "
"or the entire transaction, therefore ``callback`` may be invoked multiple"
" times by a single call to ``with_transaction``. Developers should be "
"mindful of this possiblity when writing a ``callback`` that modifies "
"application state or has any other side-effects. Note that even when the "
"``callback`` is invoked multiple times, ``with_transaction`` ensures that"
" the transaction will be committed at-most-once on the server."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:35
msgid ""
"The ``callback`` should not attempt to start new transactions, but should"
" simply run operations meant to be contained within a transaction. The "
"``callback`` should also not commit the transaction; this is handled "
"automatically by ``with_transaction``. If the ``callback`` does commit or"
" abort the transaction without error, however, ``with_transaction`` will "
"return without taking further action."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:43
msgid ""
":class:`ClientSession` instances are **not thread-safe or fork-safe**. "
"Consequently, the ``callback`` must not attempt to execute multiple "
"operations concurrently."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:47
msgid ""
"When ``callback`` raises an exception, ``with_transaction`` automatically"
" aborts the current transaction. When ``callback`` or "
":meth:`~ClientSession.commit_transaction` raises an exception that "
"includes the ``\"TransientTransactionError\"`` error label, "
"``with_transaction`` starts a new transaction and re-executes the "
"``callback``."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:54
msgid ""
"When :meth:`~ClientSession.commit_transaction` raises an exception with "
"the ``\"UnknownTransactionCommitResult\"`` error label, "
"``with_transaction`` retries the commit until the result of the "
"transaction is known."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:59
msgid ""
"This method will cease retrying after 120 seconds has elapsed. This "
"timeout is not configurable and any exception raised by the ``callback`` "
"or by :meth:`ClientSession.commit_transaction` after the timeout is "
"reached will be re-raised. Applications that desire a different timeout "
"duration should not use this method."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:66
msgid ""
"`callback`: The callable ``callback`` to run inside a transaction. The "
"callable must accept a single argument, this session. Note, under certain"
" error conditions the callback may be run multiple times."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:70
msgid ""
"`read_concern` (optional): The :class:`~pymongo.read_concern.ReadConcern`"
" to use for this transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:73
msgid ""
"`write_concern` (optional): The "
":class:`~pymongo.write_concern.WriteConcern` to use for this transaction."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:76
msgid ""
"`read_preference` (optional): The read preference to use for this "
"transaction. If ``None`` (the default) the :attr:`read_preference` of "
"this :class:`Database` is used. See :mod:`~pymongo.read_preferences` for "
"options."
msgstr ""

#: of pymongo.client_session.ClientSession.with_transaction:82
msgid "The return value of the ``callback``."
msgstr ""

#: of pymongo.client_session.SessionOptions:1
msgid "Options for a new :class:`ClientSession`."
msgstr ""

#: of pymongo.client_session.SessionOptions:4
msgid ""
"`causal_consistency` (optional): If True (the default), read operations "
"are causally ordered within the session."
msgstr ""

#: of pymongo.client_session.SessionOptions:6
msgid ""
"`default_transaction_options` (optional): The default TransactionOptions "
"to use for transactions started on this session."
msgstr ""

#: of pymongo.client_session.SessionOptions.causal_consistency:1
msgid "Whether causal consistency is configured."
msgstr ""

#: of pymongo.client_session.SessionOptions.default_transaction_options:1
msgid ""
"The default TransactionOptions to use for transactions started on this "
"session."
msgstr ""

#: of pymongo.client_session.TransactionOptions:1
msgid "Options for :meth:`ClientSession.start_transaction`."
msgstr ""

#: of pymongo.client_session.TransactionOptions:4
msgid ""
"`read_concern` (optional): The :class:`~pymongo.read_concern.ReadConcern`"
" to use for this transaction. If ``None`` (the default) the "
":attr:`read_preference` of the :class:`MongoClient` is used."
msgstr ""

#: of pymongo.client_session.TransactionOptions:8
msgid ""
"`write_concern` (optional): The "
":class:`~pymongo.write_concern.WriteConcern` to use for this transaction."
" If ``None`` (the default) the :attr:`read_preference` of the "
":class:`MongoClient` is used."
msgstr ""

#: of pymongo.client_session.TransactionOptions:12
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) the :attr:`read_preference` of this :class:`MongoClient` is"
" used. See :mod:`~pymongo.read_preferences` for options. Transactions "
"which read must use "
":attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`."
msgstr ""

#: of pymongo.client_session.TransactionOptions:17
msgid ""
"`max_commit_time_ms` (optional): The maximum amount of time to allow a "
"single commitTransaction command to run. This option is an alias for "
"maxTimeMS option on the commitTransaction command. If ``None`` (the "
"default) maxTimeMS is not used."
msgstr ""

#: of pymongo.client_session.TransactionOptions.max_commit_time_ms:1
msgid "The maxTimeMS to use when running a commitTransaction command."
msgstr ""

#: of pymongo.client_session.TransactionOptions.read_concern:1
msgid "This transaction's :class:`~pymongo.read_concern.ReadConcern`."
msgstr ""

#: of pymongo.client_session.TransactionOptions.read_preference:1
msgid "This transaction's :class:`~pymongo.read_preferences.ReadPreference`."
msgstr ""

#: of pymongo.client_session.TransactionOptions.write_concern:1
msgid "This transaction's :class:`~pymongo.write_concern.WriteConcern`."
msgstr ""

#: ../../api/pymongo/collation.rst:2
msgid ":mod:`collation` -- Tools for working with collations."
msgstr ""

#: of pymongo.collation:1
msgid "Tools for working with `collations`_."
msgstr ""

#: of pymongo.collation.Collation:2
msgid ""
"`locale`: (string) The locale of the collation. This should be a string "
"that identifies an `ICU locale ID` exactly. For example, ``en_US`` is "
"valid, but ``en_us`` and ``en-US`` are not. Consult the MongoDB "
"documentation for a list of supported locales."
msgstr ""

#: of pymongo.collation.Collation:6
msgid ""
"`caseLevel`: (optional) If ``True``, turn on case sensitivity if "
"`strength` is 1 or 2 (case sensitivity is implied if `strength` is "
"greater than 2). Defaults to ``False``."
msgstr ""

#: of pymongo.collation.Collation:9
msgid ""
"`caseFirst`: (optional) Specify that either uppercase or lowercase "
"characters take precedence. Must be one of the following values:"
msgstr ""

#: of pymongo.collation.Collation:12
msgid ":data:`~CollationCaseFirst.UPPER`"
msgstr ""

#: of pymongo.collation.Collation:13
msgid ":data:`~CollationCaseFirst.LOWER`"
msgstr ""

#: of pymongo.collation.Collation:14
msgid ":data:`~CollationCaseFirst.OFF` (the default)"
msgstr ""

#: of pymongo.collation.Collation:16
msgid ""
"`strength`: (optional) Specify the comparison strength. This is also "
"known as the ICU comparison level. This must be one of the following "
"values:"
msgstr ""

#: of pymongo.collation.Collation:20
msgid ":data:`~CollationStrength.PRIMARY`"
msgstr ""

#: of pymongo.collation.Collation:21
msgid ":data:`~CollationStrength.SECONDARY`"
msgstr ""

#: of pymongo.collation.Collation:22
msgid ":data:`~CollationStrength.TERTIARY` (the default)"
msgstr ""

#: of pymongo.collation.Collation:23
msgid ":data:`~CollationStrength.QUATERNARY`"
msgstr ""

#: of pymongo.collation.Collation:24
msgid ":data:`~CollationStrength.IDENTICAL`"
msgstr ""

#: of pymongo.collation.Collation:26
msgid ""
"Each successive level builds upon the previous. For example, a `strength`"
" of :data:`~CollationStrength.SECONDARY` differentiates characters based "
"both on the unadorned base character and its accents."
msgstr ""

#: of pymongo.collation.Collation:30
msgid ""
"`numericOrdering`: (optional) If ``True``, order numbers numerically "
"instead of in collation order (defaults to ``False``)."
msgstr ""

#: of pymongo.collation.Collation:32
msgid ""
"`alternate`: (optional) Specify whether spaces and punctuation are "
"considered base characters. This must be one of the following values:"
msgstr ""

#: of pymongo.collation.Collation:35
msgid ":data:`~CollationAlternate.NON_IGNORABLE` (the default)"
msgstr ""

#: of pymongo.collation.Collation:36
msgid ":data:`~CollationAlternate.SHIFTED`"
msgstr ""

#: of pymongo.collation.Collation:38
msgid ""
"`maxVariable`: (optional) When `alternate` is "
":data:`~CollationAlternate.SHIFTED`, this option specifies what "
"characters may be ignored. This must be one of the following values:"
msgstr ""

#: of pymongo.collation.Collation:42
msgid ":data:`~CollationMaxVariable.PUNCT` (the default)"
msgstr ""

#: of pymongo.collation.Collation:43
msgid ":data:`~CollationMaxVariable.SPACE`"
msgstr ""

#: of pymongo.collation.Collation:45
msgid ""
"`normalization`: (optional) If ``True``, normalizes text into Unicode "
"NFD. Defaults to ``False``."
msgstr ""

#: of pymongo.collation.Collation:47
msgid ""
"`backwards`: (optional) If ``True``, accents on characters are considered"
" from the back of the word to the front, as it is done in some French "
"dictionary ordering traditions. Defaults to ``False``."
msgstr ""

#: of pymongo.collation.Collation:50
msgid ""
"`kwargs`: (optional) Keyword arguments supplying any additional options "
"to be sent with this Collation object."
msgstr ""

#: of pymongo.collation.CollationStrength:1
msgid ""
"An enum that defines values for `strength` on a "
":class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.collation.CollationStrength.PRIMARY:1
msgid "Differentiate base (unadorned) characters."
msgstr ""

#: of pymongo.collation.CollationStrength.SECONDARY:1
msgid "Differentiate character accents."
msgstr ""

#: of pymongo.collation.CollationStrength.TERTIARY:1
msgid "Differentiate character case."
msgstr ""

#: of pymongo.collation.CollationStrength.QUATERNARY:1
msgid "Differentiate words with and without punctuation."
msgstr ""

#: of pymongo.collation.CollationStrength.IDENTICAL:1
msgid "Differentiate unicode code point (characters are exactly identical)."
msgstr ""

#: of pymongo.collation.CollationAlternate:1
msgid ""
"An enum that defines values for `alternate` on a "
":class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.collation.CollationAlternate.NON_IGNORABLE:1
msgid "Spaces and punctuation are treated as base characters."
msgstr ""

#: of pymongo.collation.CollationAlternate.SHIFTED:1
msgid "Spaces and punctuation are *not* considered base characters."
msgstr ""

#: of pymongo.collation.CollationAlternate.SHIFTED:3
msgid ""
"Spaces and punctuation are distinguished regardless when the "
":class:`~pymongo.collation.Collation` strength is at least "
":data:`~pymongo.collation.CollationStrength.QUATERNARY`."
msgstr ""

#: of pymongo.collation.CollationCaseFirst:1
msgid ""
"An enum that defines values for `case_first` on a "
":class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.collation.CollationCaseFirst.UPPER:1
msgid "Sort uppercase characters first."
msgstr ""

#: of pymongo.collation.CollationCaseFirst.LOWER:1
msgid "Sort lowercase characters first."
msgstr ""

#: of pymongo.collation.CollationCaseFirst.OFF:1
msgid "Default for locale or collation strength."
msgstr ""

#: of pymongo.collation.CollationMaxVariable:1
msgid ""
"An enum that defines values for `max_variable` on a "
":class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.collation.CollationMaxVariable.PUNCT:1
msgid "Both punctuation and spaces are ignored."
msgstr ""

#: of pymongo.collation.CollationMaxVariable.SPACE:1
msgid "Spaces alone are ignored."
msgstr ""

#: ../../api/pymongo/collection.rst:2
msgid ":mod:`collection` -- Collection level operations"
msgstr ""

#: of pymongo.collection:1
msgid "Collection level utilities for Mongo."
msgstr ""

#: of pymongo.ASCENDING:1
msgid "Ascending sort order."
msgstr ""

#: of pymongo.DESCENDING:1
msgid "Descending sort order."
msgstr ""

#: of pymongo.GEO2D:1
msgid "Index specifier for a 2-dimensional `geospatial index`_."
msgstr ""

#: of pymongo.GEOHAYSTACK:1
msgid "**DEPRECATED** - Index specifier for a 2-dimensional `haystack index`_."
msgstr ""

#: of pymongo.GEOHAYSTACK:3
msgid ""
"**DEPRECATED** - :attr:`GEOHAYSTACK` is deprecated and will be removed in"
" PyMongo 4.0. geoHaystack indexes (and the geoSearch command) were "
"deprecated in MongoDB 4.4. Instead, create a 2d index and use $geoNear or"
" $geoWithin. See https://dochub.mongodb.org/core/4.4-deprecate-"
"geoHaystack."
msgstr ""

#: of pymongo.GEOHAYSTACK:8 pymongo.collection.Collection.count:48
#: pymongo.collection.Collection.parallel_scan:43
#: pymongo.collection.Collection.reindex:22 pymongo.cursor.Cursor.count:31
#: pymongo.database.Database.current_op:27 pymongo.database.Database.error:7
#: pymongo.database.Database.incoming_copying_manipulators:3
#: pymongo.database.Database.incoming_manipulators:3
#: pymongo.database.Database.last_status:9
#: pymongo.database.Database.outgoing_copying_manipulators:3
#: pymongo.database.Database.outgoing_manipulators:3
#: pymongo.database.Database.previous_error:11
#: pymongo.database.Database.reset_error_history:10
#: pymongo.mongo_client.MongoClient.close_cursor:18
#: pymongo.mongo_client.MongoClient.fsync:21
#: pymongo.mongo_client.MongoClient.is_locked:16
#: pymongo.mongo_client.MongoClient.kill_cursors:12
#: pymongo.mongo_client.MongoClient.unlock:18
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:18
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:12
msgid "Deprecated."
msgstr ""

#: of pymongo.GEOSPHERE:1
msgid "Index specifier for a `spherical geospatial index`_."
msgstr ""

#: of pymongo.HASHED:1
msgid "Index specifier for a `hashed index`_."
msgstr ""

#: of pymongo.TEXT:1
msgid "Index specifier for a `text index`_."
msgstr ""

#: of pymongo.TEXT:3
msgid ""
"MongoDB's `Atlas Search <https://docs.atlas.mongodb.com/atlas-search/>`_ "
"which offers more advanced text search functionality."
msgstr ""

#: of pymongo.collection.ReturnDocument:1
msgid ""
"An enum used with "
":meth:`~pymongo.collection.Collection.find_one_and_replace` and "
":meth:`~pymongo.collection.Collection.find_one_and_update`."
msgstr ""

#: of pymongo.collection.ReturnDocument.BEFORE:1
msgid ""
"Return the original document before it was updated/replaced, or ``None`` "
"if no document matches the query."
msgstr ""

#: of pymongo.collection.ReturnDocument.AFTER:1
msgid "Return the updated/replaced or inserted document."
msgstr ""

#: of pymongo.collection.Collection:1
msgid "Get / create a Mongo collection."
msgstr ""

#: of pymongo.collection.Collection:3
msgid ""
"Raises :class:`TypeError` if `name` is not an instance of "
":class:`basestring` (:class:`str` in python 3). Raises "
":class:`~pymongo.errors.InvalidName` if `name` is not a valid collection "
"name. Any additional keyword arguments will be used as options passed to "
"the create command. See "
":meth:`~pymongo.database.Database.create_collection` for valid options."
msgstr ""

#: of pymongo.collection.Collection:11
msgid ""
"If `create` is ``True``, `collation` is specified, or any additional "
"keyword arguments are present, a ``create`` command will be sent, using "
"``session`` if specified. Otherwise, a ``create`` command will not be "
"sent and the collection will be created implicitly on first use. The "
"optional ``session`` argument is *only* used for the ``create`` command, "
"it is not associated with the collection afterward."
msgstr ""

#: of pymongo.collection.Collection:19
msgid "`database`: the database to get a collection from"
msgstr ""

#: of pymongo.collection.Collection:20
msgid "`name`: the name of the collection to get"
msgstr ""

#: of pymongo.collection.Collection:21
msgid ""
"`create` (optional): if ``True``, force collection creation even without "
"options being set"
msgstr ""

#: of pymongo.collection.Collection:23
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`. If ``None`` (the default) "
"database.codec_options is used."
msgstr ""

#: of pymongo.collection.Collection:26
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) database.read_preference is used."
msgstr ""

#: of pymongo.collection.Collection:28
msgid ""
"`write_concern` (optional): An instance of "
":class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the default) "
"database.write_concern is used."
msgstr ""

#: of pymongo.collection.Collection:31
msgid ""
"`read_concern` (optional): An instance of "
":class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the default) "
"database.read_concern is used."
msgstr ""

#: of pymongo.collection.Collection:34
msgid ""
"`collation` (optional): An instance of "
":class:`~pymongo.collation.Collation`. If a collation is provided, it "
"will be passed to the create collection command. This option is only "
"supported on MongoDB 3.4 and above."
msgstr ""

#: of pymongo.collection.Collection:38
msgid ""
"`session` (optional): a :class:`~pymongo.client_session.ClientSession` "
"that is used with the create collection command"
msgstr ""

#: of pymongo.collection.Collection:41
#: pymongo.database.Database.create_collection:42
msgid ""
"`**kwargs` (optional): additional keyword arguments will be passed as "
"options for the create collection command"
msgstr ""

#: of pymongo.collection.Collection:47 pymongo.collection.Collection.count:54
#: pymongo.collection.Collection.distinct:31
msgid "Support the `collation` option."
msgstr ""

#: of pymongo.collection.Collection:50 pymongo.database.Database:25
msgid "Added the read_concern option."
msgstr ""

#: of pymongo.collection.Collection:53
msgid ""
"Added the codec_options, read_preference, and write_concern options. "
"Removed the uuid_subtype attribute. "
":class:`~pymongo.collection.Collection` no longer returns an instance of "
":class:`~pymongo.collection.Collection` for attribute names with leading "
"underscores. You must use dict-style lookups instead::"
msgstr ""

#: of pymongo.collection.Collection:61
msgid "collection['__my_collection__']"
msgstr ""

#: of pymongo.collection.Collection:63 pymongo.database.Database:36
msgid "Not:"
msgstr ""

#: of pymongo.collection.Collection:65
msgid "collection.__my_collection__"
msgstr ""

#: of pymongo.collection.Collection:67
#: pymongo.database.Database.create_collection:58
msgid "Removed deprecated argument: options"
msgstr ""

#: of pymongo.collection.Collection:70
msgid "uuid_subtype attribute"
msgstr ""

#: ../../api/pymongo/collection.rst:26
msgid "Get the `name` sub-collection of :class:`Collection` `c`."
msgstr ""

#: ../../api/pymongo/collection.rst:28 ../../api/pymongo/database.rst:20
msgid ""
"Raises :class:`~pymongo.errors.InvalidName` if an invalid collection name"
" is used."
msgstr ""

#: of pymongo.collection.Collection.full_name:1
msgid "The full name of this :class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.full_name:3
msgid "The full name is of the form `database_name.collection_name`."
msgstr ""

#: of pymongo.collection.Collection.name:1
msgid "The name of this :class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.database:1
msgid ""
"The :class:`~pymongo.database.Database` that this :class:`Collection` is "
"a part of."
msgstr ""

#: of pymongo.collection.Collection.codec_options:1
#: pymongo.database.Database.codec_options:1
#: pymongo.mongo_client.MongoClient.codec_options:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.codec_options:1
msgid ""
"Read only access to the :class:`~bson.codec_options.CodecOptions` of this"
" instance."
msgstr ""

#: of pymongo.collection.Collection.read_preference:1
#: pymongo.database.Database.read_preference:1
#: pymongo.mongo_client.MongoClient.read_preference:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.read_preference:1
msgid "Read only access to the read preference of this instance."
msgstr ""

#: of pymongo.collection.Collection.read_preference:3
#: pymongo.database.Database.read_preference:3
#: pymongo.mongo_client.MongoClient.read_preference:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.read_preference:3
msgid "The :attr:`read_preference` attribute is now read only."
msgstr ""

#: of pymongo.collection.Collection.write_concern:1
#: pymongo.database.Database.write_concern:1
#: pymongo.mongo_client.MongoClient.write_concern:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.write_concern:1
msgid ""
"Read only access to the :class:`~pymongo.write_concern.WriteConcern` of "
"this instance."
msgstr ""

#: of pymongo.collection.Collection.write_concern:4
#: pymongo.database.Database.write_concern:4
#: pymongo.mongo_client.MongoClient.write_concern:4
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.write_concern:4
msgid "The :attr:`write_concern` attribute is now read only."
msgstr ""

#: of pymongo.collection.Collection.read_concern:1
#: pymongo.database.Database.read_concern:1
#: pymongo.mongo_client.MongoClient.read_concern:1
msgid ""
"Read only access to the :class:`~pymongo.read_concern.ReadConcern` of "
"this instance."
msgstr ""

#: of pymongo.collection.Collection.with_options:1
msgid "Get a clone of this collection changing the specified settings."
msgstr ""

#: of pymongo.collection.Collection.with_options:13
#: pymongo.database.Database.with_options:13
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`. If ``None`` (the default) the "
":attr:`codec_options` of this :class:`Collection` is used."
msgstr ""

#: of pymongo.collection.Collection.with_options:17
#: pymongo.database.Database.with_options:17
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) the :attr:`read_preference` of this :class:`Collection` is "
"used. See :mod:`~pymongo.read_preferences` for options."
msgstr ""

#: of pymongo.collection.Collection.with_options:21
#: pymongo.database.Database.with_options:21
msgid ""
"`write_concern` (optional): An instance of "
":class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the default) "
"the :attr:`write_concern` of this :class:`Collection` is used."
msgstr ""

#: of pymongo.collection.Collection.with_options:25
#: pymongo.database.Database.with_options:25
msgid ""
"`read_concern` (optional): An instance of "
":class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the default) the"
" :attr:`read_concern` of this :class:`Collection` is used."
msgstr ""

#: of pymongo.collection.Collection.bulk_write:1
msgid "Send a batch of write operations to the server."
msgstr ""

#: of pymongo.collection.Collection.bulk_write:3
msgid ""
"Requests are passed as a list of write operation instances ( "
":class:`~pymongo.operations.InsertOne`, "
":class:`~pymongo.operations.UpdateOne`, "
":class:`~pymongo.operations.UpdateMany`, "
":class:`~pymongo.operations.ReplaceOne`, "
":class:`~pymongo.operations.DeleteOne`, or "
":class:`~pymongo.operations.DeleteMany`)."
msgstr ""

#: of pymongo.collection.Collection.bulk_write:38
msgid "`requests`: A list of write operations (see examples above)."
msgstr ""

#: of pymongo.collection.Collection.bulk_write:39
msgid ""
"`ordered` (optional): If ``True`` (the default) requests will be "
"performed on the server serially, in the order provided. If an error "
"occurs all remaining operations are aborted. If ``False`` requests will "
"be performed on the server in arbitrary order, possibly in parallel, and "
"all operations will be attempted."
msgstr ""

#: of pymongo.collection.Collection.aggregate:37
#: pymongo.collection.Collection.bulk_write:47
#: pymongo.collection.Collection.count:44
#: pymongo.collection.Collection.count_documents:47
#: pymongo.collection.Collection.create_index:74
#: pymongo.collection.Collection.create_indexes:13
#: pymongo.collection.Collection.delete_many:22
#: pymongo.collection.Collection.delete_one:22
#: pymongo.collection.Collection.distinct:24
#: pymongo.collection.Collection.drop:4
#: pymongo.collection.Collection.drop_index:19
#: pymongo.collection.Collection.drop_indexes:7
#: pymongo.collection.Collection.find:31
#: pymongo.collection.Collection.find_one_and_delete:42
#: pymongo.collection.Collection.find_one_and_replace:48
#: pymongo.collection.Collection.find_one_and_update:88
#: pymongo.collection.Collection.index_information:20
#: pymongo.collection.Collection.inline_map_reduce:19
#: pymongo.collection.Collection.insert_many:21
#: pymongo.collection.Collection.insert_one:18
#: pymongo.collection.Collection.list_indexes:9
#: pymongo.collection.Collection.map_reduce:18
#: pymongo.collection.Collection.options:9
#: pymongo.collection.Collection.parallel_scan:36
#: pymongo.collection.Collection.reindex:13
#: pymongo.collection.Collection.rename:11
#: pymongo.collection.Collection.replace_one:47
#: pymongo.collection.Collection.update_many:41
#: pymongo.collection.Collection.update_one:41
#: pymongo.collection.Collection.watch:75 pymongo.database.Database.add_user:45
#: pymongo.database.Database.aggregate:43
#: pymongo.database.Database.collection_names:7
#: pymongo.database.Database.create_collection:40
#: pymongo.database.Database.current_op:24
#: pymongo.database.Database.dereference:12
#: pymongo.database.Database.drop_collection:6
#: pymongo.database.Database.list_collection_names:9
#: pymongo.database.Database.list_collections:4
#: pymongo.database.Database.profiling_info:4
#: pymongo.database.Database.profiling_level:7
#: pymongo.database.Database.remove_user:13
#: pymongo.database.Database.set_profiling_level:9
#: pymongo.database.Database.validate_collection:17
#: pymongo.database.Database.watch:66
#: pymongo.mongo_client.MongoClient.database_names:5
#: pymongo.mongo_client.MongoClient.drop_database:11
#: pymongo.mongo_client.MongoClient.fsync:6
#: pymongo.mongo_client.MongoClient.list_database_names:4
#: pymongo.mongo_client.MongoClient.list_databases:4
#: pymongo.mongo_client.MongoClient.server_info:4
#: pymongo.mongo_client.MongoClient.unlock:4
#: pymongo.mongo_client.MongoClient.watch:66
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names:5
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:11
msgid "`session` (optional): a :class:`~pymongo.client_session.ClientSession`."
msgstr ""

#: of pymongo.collection.Collection.bulk_write:51
msgid "An instance of :class:`~pymongo.results.BulkWriteResult`."
msgstr ""

#: of pymongo.collection.Collection.insert_one:12
msgid ""
"`document`: The document to insert. Must be a mutable mapping type. If "
"the document does not have an _id field one will be added automatically."
msgstr ""

#: of pymongo.collection.Collection.insert_one:22
msgid "An instance of :class:`~pymongo.results.InsertOneResult`."
msgstr ""

#: of pymongo.collection.Collection.insert_many:1
msgid "Insert an iterable of documents."
msgstr ""

#: of pymongo.collection.Collection.insert_many:12
msgid "`documents`: A iterable of documents to insert."
msgstr ""

#: of pymongo.collection.Collection.insert_many:13
msgid ""
"`ordered` (optional): If ``True`` (the default) documents will be "
"inserted on the server serially, in the order provided. If an error "
"occurs all remaining inserts are aborted. If ``False``, documents will be"
" inserted on the server in arbitrary order, possibly in parallel, and all"
" document inserts will be attempted."
msgstr ""

#: of pymongo.collection.Collection.insert_many:25
msgid "An instance of :class:`~pymongo.results.InsertManyResult`."
msgstr ""

#: of pymongo.collection.Collection.replace_one:1
msgid "Replace a single document matching the filter."
msgstr ""

#: of pymongo.collection.Collection.replace_one:17
msgid ""
"The *upsert* option can be used to insert a new document if a matching "
"document does not exist."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:24
#: pymongo.collection.Collection.replace_one:31 pymongo.operations.ReplaceOne:6
msgid "`filter`: A query that matches the document to replace."
msgstr ""

#: of pymongo.collection.Collection.replace_one:32
#: pymongo.operations.ReplaceOne:7
msgid "`replacement`: The new document."
msgstr ""

#: of pymongo.collection.Collection.replace_one:33
#: pymongo.collection.Collection.update_many:24
#: pymongo.collection.Collection.update_one:24 pymongo.operations.ReplaceOne:8
#: pymongo.operations.UpdateMany:8 pymongo.operations.UpdateOne:8
msgid ""
"`upsert` (optional): If ``True``, perform an insert if no documents match"
" the filter."
msgstr ""

#: of pymongo.collection.Collection.replace_one:35
#: pymongo.collection.Collection.update_one:26
msgid ""
"`bypass_document_validation`: (optional) If ``True``, allows the write to"
" opt-out of document level validation. Default is ``False``. This option "
"is only supported on MongoDB 3.2 and above."
msgstr ""

#: of pymongo.collection.Collection.replace_one:41
#: pymongo.collection.Collection.update_many:35
#: pymongo.collection.Collection.update_one:35 pymongo.operations.ReplaceOne:13
#: pymongo.operations.UpdateMany:15 pymongo.operations.UpdateOne:15
msgid ""
"`hint` (optional): An index to use to support the query predicate "
"specified either by its string name, or in the same format as passed to "
":meth:`~pymongo.collection.Collection.create_index` (e.g. ``[('field', "
"ASCENDING)]``). This option is only supported on MongoDB 4.2 and above."
msgstr ""

#: of pymongo.collection.Collection.replace_one:51
#: pymongo.collection.Collection.update_many:45
#: pymongo.collection.Collection.update_one:45
msgid "An instance of :class:`~pymongo.results.UpdateResult`."
msgstr ""

#: of pymongo.collection.Collection.delete_many:28
#: pymongo.collection.Collection.delete_one:28
#: pymongo.collection.Collection.find_one_and_delete:48
#: pymongo.collection.Collection.replace_one:53
#: pymongo.collection.Collection.update_many:47
#: pymongo.collection.Collection.update_one:47
msgid "Added ``hint`` parameter."
msgstr ""

#: of pymongo.collection.Collection.replace_one:59
#: pymongo.collection.Collection.update_many:55
msgid "Added bypass_document_validation support."
msgstr ""

#: of pymongo.collection.Collection.update_one:1
msgid "Update a single document matching the filter."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:62
#: pymongo.collection.Collection.update_one:22 pymongo.operations.UpdateOne:6
msgid "`filter`: A query that matches the document to update."
msgstr ""

#: of pymongo.collection.Collection.update_many:23
#: pymongo.collection.Collection.update_one:23 pymongo.operations.UpdateMany:7
#: pymongo.operations.UpdateOne:7
msgid "`update`: The modifications to apply."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:79
#: pymongo.collection.Collection.update_many:32
#: pymongo.collection.Collection.update_one:32
msgid ""
"`array_filters` (optional): A list of filters specifying which array "
"elements an update should apply. This option is only supported on MongoDB"
" 3.6 and above."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:96
#: pymongo.collection.Collection.update_one:49
msgid "Added the ability to accept a pipeline as the ``update``."
msgstr ""

#: of pymongo.collection.Collection.update_one:51
msgid "Added the ``array_filters`` and ``session`` parameters."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:58
#: pymongo.collection.Collection.find_one_and_update:100
#: pymongo.collection.Collection.update_one:53 pymongo.operations.ReplaceOne:22
msgid "Added the ``collation`` option."
msgstr ""

#: of pymongo.collection.Collection.update_one:55
msgid "Added ``bypass_document_validation`` support."
msgstr ""

#: of pymongo.collection.Collection.update_many:1
msgid "Update one or more documents that match the filter."
msgstr ""

#: of pymongo.collection.Collection.update_many:22
#: pymongo.operations.UpdateMany:6
msgid "`filter`: A query that matches the documents to update."
msgstr ""

#: of pymongo.collection.Collection.update_many:26
msgid ""
"`bypass_document_validation` (optional): If ``True``, allows the write to"
" opt-out of document level validation. Default is ``False``. This option "
"is only supported on MongoDB 3.2 and above."
msgstr ""

#: of pymongo.collection.Collection.update_many:49
#: pymongo.operations.UpdateMany:24 pymongo.operations.UpdateOne:24
msgid "Added the ability to accept a pipeline as the `update`."
msgstr ""

#: of pymongo.collection.Collection.update_many:51
msgid "Added ``array_filters`` and ``session`` parameters."
msgstr ""

#: of pymongo.collection.Collection.delete_one:1
msgid "Delete a single document matching the filter."
msgstr ""

#: of pymongo.collection.Collection.delete_one:12
#: pymongo.collection.Collection.find_one_and_delete:28
#: pymongo.operations.DeleteOne:6
msgid "`filter`: A query that matches the document to delete."
msgstr ""

#: of pymongo.collection.Collection.delete_many:16
#: pymongo.collection.Collection.delete_one:16
#: pymongo.collection.Collection.find_one_and_delete:37
#: pymongo.collection.Collection.find_one_and_replace:42
#: pymongo.collection.Collection.find_one_and_update:82
#: pymongo.operations.DeleteMany:10 pymongo.operations.DeleteOne:10
msgid ""
"`hint` (optional): An index to use to support the query predicate "
"specified either by its string name, or in the same format as passed to "
":meth:`~pymongo.collection.Collection.create_index` (e.g. ``[('field', "
"ASCENDING)]``). This option is only supported on MongoDB 4.4 and above."
msgstr ""

#: of pymongo.collection.Collection.delete_many:26
#: pymongo.collection.Collection.delete_one:26
msgid "An instance of :class:`~pymongo.results.DeleteResult`."
msgstr ""

#: of pymongo.collection.Collection.delete_many:1
msgid "Delete one or more documents matching the filter."
msgstr ""

#: of pymongo.collection.Collection.delete_many:12
#: pymongo.operations.DeleteMany:6
msgid "`filter`: A query that matches the documents to delete."
msgstr ""

#: of pymongo.collection.Collection.aggregate:1
msgid "Perform an aggregation using the aggregation framework on this collection."
msgstr ""

#: of pymongo.collection.Collection.aggregate:4
#: pymongo.database.Database.aggregate:15
msgid ""
"All optional `aggregate command`_ parameters should be passed as keyword "
"arguments to this method. Valid options include, but are not limited to:"
msgstr ""

#: of pymongo.collection.Collection.aggregate:8
#: pymongo.database.Database.aggregate:19
msgid ""
"`allowDiskUse` (bool): Enables writing to temporary files. When set to "
"True, aggregation stages can write data to the _tmp subdirectory of the "
"--dbpath directory. The default is False."
msgstr ""

#: of pymongo.collection.Collection.aggregate:11
#: pymongo.database.Database.aggregate:22
msgid ""
"`maxTimeMS` (int): The maximum amount of time to allow the operation to "
"run in milliseconds."
msgstr ""

#: of pymongo.collection.Collection.aggregate:13
msgid ""
"`batchSize` (int): The maximum number of documents to return per batch. "
"Ignored if the connected mongod or mongos does not support returning "
"aggregate results using a cursor, or `useCursor` is ``False``."
msgstr ""

#: of pymongo.collection.Collection.aggregate:20
msgid "`useCursor` (bool): Deprecated. Will be removed in PyMongo 4.0."
msgstr ""

#: of pymongo.collection.Collection.aggregate:22
msgid ""
"The :meth:`aggregate` method obeys the :attr:`read_preference` of this "
":class:`Collection`, except when ``$out`` or ``$merge`` are used, in "
"which case  :attr:`~pymongo.read_preferences.ReadPreference.PRIMARY` is "
"used."
msgstr ""

#: of pymongo.collection.Collection.aggregate:27
msgid ""
"This method does not support the 'explain' option. Please use "
":meth:`~pymongo.database.Database.command` instead. An example is "
"included in the :ref:`aggregate-examples` documentation."
msgstr ""

#: of pymongo.collection.Collection.aggregate:31
#: pymongo.collection.Collection.create_index:67
#: pymongo.collection.Collection.create_indexes:22
#: pymongo.collection.Collection.drop_index:24
#: pymongo.collection.Collection.drop_indexes:12
#: pymongo.collection.Collection.rename:17
msgid ""
"The :attr:`~pymongo.collection.Collection.write_concern` of this "
"collection is automatically applied to this operation when using MongoDB "
">= 3.4."
msgstr ""

#: of pymongo.collection.Collection.aggregate:36
#: pymongo.database.Database.aggregate:42
msgid "`pipeline`: a list of aggregation pipeline stages"
msgstr ""

#: of pymongo.collection.Collection.aggregate:39
#: pymongo.collection.Collection.count:46
#: pymongo.collection.Collection.count_documents:49
#: pymongo.collection.Collection.distinct:26
#: pymongo.collection.Collection.estimated_document_count:14
#: pymongo.database.Database.aggregate:45
msgid "`**kwargs` (optional): See list of options above."
msgstr ""

#: of pymongo.collection.Collection.aggregate:42
#: pymongo.database.Database.aggregate:48
msgid "A :class:`~pymongo.command_cursor.CommandCursor` over the result set."
msgstr ""

#: of pymongo.collection.Collection.aggregate:45
msgid ""
"Apply this collection's read concern to pipelines containing the `$out` "
"stage when connected to MongoDB >= 4.2. Added support for the ``$merge`` "
"pipeline stage. Aggregations that write always use read preference "
":attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`."
msgstr ""

#: of pymongo.collection.Collection.aggregate:51
msgid ""
"Added the `session` parameter. Added the `maxAwaitTimeMS` option. "
"Deprecated the `useCursor` option."
msgstr ""

#: of pymongo.collection.Collection.aggregate:54
#: pymongo.collection.Collection.create_index:85
msgid ""
"Apply this collection's write concern automatically to this operation "
"when connected to MongoDB >= 3.4. Support the `collation` option."
msgstr ""

#: of pymongo.collection.Collection.aggregate:57
msgid ""
"The :meth:`aggregate` method always returns a CommandCursor. The pipeline"
" argument must be a list."
msgstr ""

#: of pymongo.collection.Collection.aggregate:60
msgid ""
"When the cursor option is used, return "
":class:`~pymongo.command_cursor.CommandCursor` instead of "
":class:`~pymongo.cursor.Cursor`."
msgstr ""

#: of pymongo.collection.Collection.aggregate:64
msgid "Added cursor support."
msgstr ""

#: of pymongo.collection.Collection.aggregate:68
#: pymongo.collection.Collection.map_reduce:42
msgid ":doc:`/examples/aggregation`"
msgstr ""

#: of pymongo.collection.Collection.aggregate_raw_batches:1
msgid "Perform an aggregation and retrieve batches of raw BSON."
msgstr ""

#: of pymongo.collection.Collection.aggregate_raw_batches:3
msgid ""
"Similar to the :meth:`aggregate` method but returns a "
":class:`~pymongo.cursor.RawBatchCursor`."
msgstr ""

#: of pymongo.collection.Collection.aggregate_raw_batches:6
#: pymongo.collection.Collection.find_raw_batches:6
msgid ""
"This example demonstrates how to work with raw batches, but in practice "
"raw batches should be passed to an external library that can decode BSON "
"into another data type, rather than used with PyMongo's :mod:`bson` "
"module."
msgstr ""

#: of pymongo.collection.Collection.aggregate_raw_batches:17
msgid "aggregate_raw_batches does not support sessions or auto encryption."
msgstr ""

#: of pymongo.collection.Collection.watch:1
msgid "Watch changes on this collection."
msgstr ""

#: of pymongo.collection.Collection.watch:3
msgid ""
"Performs an aggregation with an implicit initial ``$changeStream`` stage "
"and returns a :class:`~pymongo.change_stream.CollectionChangeStream` "
"cursor which iterates over changes on this collection."
msgstr ""

#: of pymongo.collection.Collection.watch:8
#: pymongo.database.Database.aggregate:6
msgid "Introduced in MongoDB 3.6."
msgstr ""

#: of pymongo.collection.Collection.watch:16
msgid ""
"The :class:`~pymongo.change_stream.CollectionChangeStream` iterable "
"blocks until the next change document is returned or an error is raised. "
"If the :meth:`~pymongo.change_stream.CollectionChangeStream.next` method "
"encounters a network error when retrieving a batch from the server, it "
"will automatically attempt to recreate the cursor such that no change "
"events are missed. Any error encountered during the resume attempt "
"indicates there may be an outage and will be raised."
msgstr ""

#: of pymongo.collection.Collection.watch:37 pymongo.database.Database.watch:37
#: pymongo.mongo_client.MongoClient.watch:37
msgid ""
"For a precise description of the resume process see the `change streams "
"specification`_."
msgstr ""

#: of pymongo.collection.Collection.watch:40
msgid ""
"Using this helper method is preferred to directly calling "
":meth:`~pymongo.collection.Collection.aggregate` with a ``$changeStream``"
" stage, for the purpose of supporting resumability."
msgstr ""

#: of pymongo.collection.Collection.watch:45
msgid ""
"This Collection's :attr:`read_concern` must be "
"``ReadConcern(\"majority\")`` in order to use the ``$changeStream`` "
"stage."
msgstr ""

#: of pymongo.collection.Collection.watch:50 pymongo.database.Database.watch:41
#: pymongo.mongo_client.MongoClient.watch:41
msgid ""
"`pipeline` (optional): A list of aggregation pipeline stages to append to"
" an initial ``$changeStream`` stage. Not all pipeline stages are valid "
"after a ``$changeStream`` stage, see the MongoDB documentation on change "
"streams for the supported stages."
msgstr ""

#: of pymongo.collection.Collection.watch:54 pymongo.database.Database.watch:45
#: pymongo.mongo_client.MongoClient.watch:45
msgid ""
"`full_document` (optional): The fullDocument to pass as an option to the "
"``$changeStream`` stage. Allowed values: 'updateLookup'. When set to "
"'updateLookup', the change notification for partial updates will include "
"both a delta describing the changes to the document, as well as a copy of"
" the entire document that was changed from some time after the change "
"occurred."
msgstr ""

#: of pymongo.collection.Collection.watch:60 pymongo.database.Database.watch:51
#: pymongo.mongo_client.MongoClient.watch:51
msgid ""
"`resume_after` (optional): A resume token. If provided, the change stream"
" will start returning changes that occur directly after the operation "
"specified in the resume token. A resume token is the _id value of a "
"change document."
msgstr ""

#: of pymongo.collection.Collection.watch:64 pymongo.database.Database.watch:55
#: pymongo.mongo_client.MongoClient.watch:55
msgid ""
"`max_await_time_ms` (optional): The maximum time in milliseconds for the "
"server to wait for changes before responding to a getMore operation."
msgstr ""

#: of pymongo.collection.Collection.watch:67 pymongo.database.Database.watch:58
#: pymongo.mongo_client.MongoClient.watch:58
msgid ""
"`batch_size` (optional): The maximum number of documents to return per "
"batch."
msgstr ""

#: of pymongo.collection.Collection.watch:69 pymongo.database.Database.watch:60
#: pymongo.mongo_client.MongoClient.watch:60
msgid ""
"`collation` (optional): The :class:`~pymongo.collation.Collation` to use "
"for the aggregation."
msgstr ""

#: of pymongo.collection.Collection.watch:71 pymongo.database.Database.watch:62
#: pymongo.mongo_client.MongoClient.watch:62
msgid ""
"`start_at_operation_time` (optional): If provided, the resulting change "
"stream will only return changes that occurred at or after the specified "
":class:`~bson.timestamp.Timestamp`. Requires MongoDB >= 4.0."
msgstr ""

#: of pymongo.collection.Collection.watch:77 pymongo.database.Database.watch:68
#: pymongo.mongo_client.MongoClient.watch:68
msgid ""
"`start_after` (optional): The same as `resume_after` except that "
"`start_after` can resume notifications after an invalidate event. This "
"option and `resume_after` are mutually exclusive."
msgstr ""

#: of pymongo.collection.Collection.watch:82
msgid "A :class:`~pymongo.change_stream.CollectionChangeStream` cursor."
msgstr ""

#: of pymongo.collection.Collection.watch:84 pymongo.database.Database.watch:75
#: pymongo.mongo_client.MongoClient.watch:75
msgid "Added the ``start_after`` parameter."
msgstr ""

#: of pymongo.collection.Collection.watch:87
msgid "Added the ``start_at_operation_time`` parameter."
msgstr ""

#: of pymongo.collection.Collection.find:1
msgid "Query the database."
msgstr ""

#: of pymongo.collection.Collection.find:3
msgid ""
"The `filter` argument is a prototype document that all results must "
"match. For example:"
msgstr ""

#: of pymongo.collection.Collection.find:8
msgid ""
"only matches documents that have a key \"hello\" with value \"world\".  "
"Matches can have other keys *in addition* to \"hello\". The `projection` "
"argument is used to specify a subset of fields that should be included in"
" the result documents. By limiting results to a certain subset of fields "
"you can cut down on network traffic and decoding time."
msgstr ""

#: of pymongo.collection.Collection.find:15
msgid ""
"Raises :class:`TypeError` if any of the arguments are of improper type. "
"Returns an instance of :class:`~pymongo.cursor.Cursor` corresponding to "
"this query."
msgstr ""

#: of pymongo.collection.Collection.find:19
msgid ""
"The :meth:`find` method obeys the :attr:`read_preference` of this "
":class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.find:26
msgid ""
"`projection` (optional): a list of field names that should be returned in"
" the result set or a dict specifying the fields to include or exclude. If"
" `projection` is a list \"_id\" will always be returned. Use a dict to "
"exclude fields from the result (e.g. projection={'_id': False})."
msgstr ""

#: of pymongo.collection.Collection.find:33
msgid ""
"`skip` (optional): the number of documents to omit (from the start of the"
" result set) when returning the results"
msgstr ""

#: of pymongo.collection.Collection.find:35
msgid ""
"`limit` (optional): the maximum number of results to return. A limit of 0"
" (the default) is equivalent to setting no limit."
msgstr ""

#: of pymongo.collection.Collection.find:43
msgid ""
"`cursor_type` (optional): the type of cursor to return. The valid options"
" are defined by :class:`~pymongo.cursor.CursorType`:"
msgstr ""

#: of pymongo.collection.Collection.find:46
msgid ""
":attr:`~pymongo.cursor.CursorType.NON_TAILABLE` - the result of this find"
" call will return a standard cursor over the result set."
msgstr ""

#: of pymongo.collection.Collection.find:48
msgid ""
":attr:`~pymongo.cursor.CursorType.TAILABLE` - the result of this find "
"call will be a tailable cursor - tailable cursors are only for use with "
"capped collections. They are not closed when the last data is retrieved "
"but are kept open and the cursor location marks the final document "
"position. If more data is received iteration of the cursor will continue "
"from the last document received. For details, see the `tailable cursor "
"documentation <http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_."
msgstr ""

#: of pymongo.collection.Collection.find:56
msgid ""
":attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` - the result of this "
"find call will be a tailable cursor with the await flag set. The server "
"will wait for a few seconds after returning the full result set so that "
"it can capture and return additional data added during the query."
msgstr ""

#: of pymongo.collection.Collection.find:61
msgid ""
":attr:`~pymongo.cursor.CursorType.EXHAUST` - the result of this find call"
" will be an exhaust cursor. MongoDB will stream batched results to the "
"client without waiting for the client to request each batch, reducing "
"latency. See notes on compatibility below."
msgstr ""

#: of pymongo.collection.Collection.find:69
msgid ""
"`allow_partial_results` (optional): if True, mongos will return partial "
"results if some shards are down instead of returning an error."
msgstr ""

#: of pymongo.collection.Collection.find:72
msgid ""
"`oplog_replay` (optional): **DEPRECATED** - if True, set the oplogReplay "
"query flag. Default: False."
msgstr ""

#: of pymongo.collection.Collection.find:74
msgid ""
"`batch_size` (optional): Limits the number of documents returned in a "
"single batch."
msgstr ""

#: of pymongo.collection.Collection.find:76
msgid ""
"`manipulate` (optional): **DEPRECATED** - If True, apply any outgoing SON"
" manipulators before returning. Default: True."
msgstr ""

#: of pymongo.collection.Collection.find:81
msgid ""
"`return_key` (optional): If True, return only the index keys in each "
"document."
msgstr ""

#: of pymongo.collection.Collection.find:83
msgid ""
"`show_record_id` (optional): If True, adds a field ``$recordId`` in each "
"document with the storage engine's internal record identifier."
msgstr ""

#: of pymongo.collection.Collection.find:85
msgid ""
"`snapshot` (optional): **DEPRECATED** - If True, prevents the cursor from"
" returning a document more than once because of an intervening write "
"operation."
msgstr ""

#: of pymongo.collection.Collection.find:88
msgid ""
"`hint` (optional): An index, in the same format as passed to "
":meth:`~pymongo.collection.Collection.create_index` (e.g. ``[('field', "
"ASCENDING)]``). Pass this as an alternative to calling "
":meth:`~pymongo.cursor.Cursor.hint` on the cursor to tell Mongo the "
"proper index to use for the query."
msgstr ""

#: of pymongo.collection.Collection.find:93
msgid ""
"`max_time_ms` (optional): Specifies a time limit for a query operation. "
"If the specified time is exceeded, the operation will be aborted and "
":exc:`~pymongo.errors.ExecutionTimeout` is raised. Pass this as an "
"alternative to calling :meth:`~pymongo.cursor.Cursor.max_time_ms` on the "
"cursor."
msgstr ""

#: of pymongo.collection.Collection.find:98
msgid ""
"`max_scan` (optional): **DEPRECATED** - The maximum number of documents "
"to scan. Pass this as an alternative to calling "
":meth:`~pymongo.cursor.Cursor.max_scan` on the cursor."
msgstr ""

#: of pymongo.collection.Collection.find:101
msgid ""
"`min` (optional): A list of field, limit pairs specifying the inclusive "
"lower bound for all keys of a specific index in order. Pass this as an "
"alternative to calling :meth:`~pymongo.cursor.Cursor.min` on the cursor. "
"``hint`` must also be passed to ensure the query utilizes the correct "
"index."
msgstr ""

#: of pymongo.collection.Collection.find:106
msgid ""
"`max` (optional): A list of field, limit pairs specifying the exclusive "
"upper bound for all keys of a specific index in order. Pass this as an "
"alternative to calling :meth:`~pymongo.cursor.Cursor.max` on the cursor. "
"``hint`` must also be passed to ensure the query utilizes the correct "
"index."
msgstr ""

#: of pymongo.collection.Collection.find:111
msgid ""
"`comment` (optional): A string to attach to the query to help interpret "
"and trace the operation in the server logs and in profile data. Pass this"
" as an alternative to calling :meth:`~pymongo.cursor.Cursor.comment` on "
"the cursor."
msgstr ""

#: of pymongo.collection.Collection.find:115
msgid ""
"`modifiers` (optional): **DEPRECATED** - A dict specifying additional "
"MongoDB query modifiers. Use the keyword arguments listed above instead."
msgstr ""

#: of pymongo.collection.Collection.find:118
msgid ""
"`allow_disk_use` (optional): if True, MongoDB may use temporary disk "
"files to store data exceeding the system memory limit while processing a "
"blocking sort operation. The option has no effect if MongoDB can satisfy "
"the specified sort using an index, or if the blocking sort requires less "
"memory than the 100 MiB limit. This option is only supported on MongoDB "
"4.4 and above."
msgstr ""

#: of pymongo.collection.Collection.find:125
msgid ""
"There are a number of caveats to using "
":attr:`~pymongo.cursor.CursorType.EXHAUST` as cursor_type:"
msgstr ""

#: of pymongo.collection.Collection.find:128
msgid "The `limit` option can not be used with an exhaust cursor."
msgstr ""

#: of pymongo.collection.Collection.find:130
msgid ""
"Exhaust cursors are not supported by mongos and can not be used with a "
"sharded cluster."
msgstr ""

#: of pymongo.collection.Collection.find:133
msgid ""
"A :class:`~pymongo.cursor.Cursor` instance created with the "
":attr:`~pymongo.cursor.CursorType.EXHAUST` cursor_type requires an "
"exclusive :class:`~socket.socket` connection to MongoDB. If the "
":class:`~pymongo.cursor.Cursor` is discarded without being completely "
"iterated the underlying :class:`~socket.socket` connection will be closed"
" and discarded without being returned to the connection pool."
msgstr ""

#: of pymongo.collection.Collection.find:141
msgid ""
"Added the ``allow_disk_use`` option. Deprecated the ``oplog_replay`` "
"option. Support for this option is deprecated in MongoDB 4.4. The query "
"engine now automatically optimizes queries against the oplog without "
"requiring this option to be set."
msgstr ""

#: of pymongo.collection.Collection.find:148
msgid ""
"Deprecated the ``snapshot`` option, which is deprecated in MongoDB 3.6 "
"and removed in MongoDB 4.0. Deprecated the ``max_scan`` option. Support "
"for this option is deprecated in MongoDB 4.0. Use ``max_time_ms`` instead"
" to limit server-side execution time."
msgstr ""

#: of pymongo.collection.Collection.find:158
msgid ""
"Added the options ``return_key``, ``show_record_id``, ``snapshot``, "
"``hint``, ``max_time_ms``, ``max_scan``, ``min``, ``max``, and "
"``comment``. Deprecated the ``modifiers`` option."
msgstr ""

#: of pymongo.collection.Collection.find:164
msgid "Added support for the ``collation`` option."
msgstr ""

#: of pymongo.collection.Collection.find:167
msgid ""
"Changed the parameter names ``spec``, ``fields``, ``timeout``, and "
"``partial`` to ``filter``, ``projection``, ``no_cursor_timeout``, and "
"``allow_partial_results`` respectively. Added the ``cursor_type``, "
"``oplog_replay``, and ``modifiers`` options. Removed the "
"``network_timeout``, ``read_preference``, ``tag_sets``, "
"``secondary_acceptable_latency_ms``, ``max_scan``, ``snapshot``, "
"``tailable``, ``await_data``, ``exhaust``, ``as_class``, and slave_okay "
"parameters. Removed ``compile_re`` option: PyMongo now always represents "
"BSON regular expressions as :class:`~bson.regex.Regex` objects. Use "
":meth:`~bson.regex.Regex.try_compile` to attempt to convert from a BSON "
"regular expression to a Python regular expression object. Soft deprecated"
" the ``manipulate`` option."
msgstr ""

#: of pymongo.collection.Collection.find:184
msgid ""
"Added ``compile_re`` option. If set to False, PyMongo represented BSON "
"regular expressions as :class:`~bson.regex.Regex` objects instead of "
"attempting to compile BSON regular expressions as Python native regular "
"expressions, thus preventing errors for some incompatible patterns, see "
"`PYTHON-500`_."
msgstr ""

#: of pymongo.collection.Collection.find:191
msgid "Added the ``tag_sets`` and ``secondary_acceptable_latency_ms`` parameters."
msgstr ""

#: of pymongo.collection.Collection.find_raw_batches:1
msgid "Query the database and retrieve batches of raw BSON."
msgstr ""

#: of pymongo.collection.Collection.find_raw_batches:3
msgid ""
"Similar to the :meth:`find` method but returns a "
":class:`~pymongo.cursor.RawBatchCursor`."
msgstr ""

#: of pymongo.collection.Collection.find_raw_batches:16
msgid "find_raw_batches does not support sessions or auto encryption."
msgstr ""

#: of pymongo.collection.Collection.find_one:1
msgid "Get a single document from the database."
msgstr ""

#: of pymongo.collection.Collection.find_one:3
msgid ""
"All arguments to :meth:`find` are also valid arguments for "
":meth:`find_one`, although any `limit` argument will be ignored. Returns "
"a single document, or ``None`` if no matching document is found."
msgstr ""

#: of pymongo.collection.Collection.find_one:8
msgid ""
"The :meth:`find_one` method obeys the :attr:`read_preference` of this "
":class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.find_one:13
msgid ""
"`filter` (optional): a dictionary specifying the query to be performed OR"
" any other type to be used as the value for a query for ``\"_id\"``."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:1
msgid "Finds a single document and deletes it, returning the document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:10
#: pymongo.collection.Collection.find_one_and_update:48
msgid "If multiple documents match *filter*, a *sort* can be applied."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:22
msgid "The *projection* option can be used to limit the fields returned."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:29
msgid ""
"`projection` (optional): a list of field names that should be returned in"
" the result document or a mapping specifying the fields to include or "
"exclude. If `projection` is a list \"_id\" will always be returned. Use a"
" mapping to exclude fields from the result (e.g. projection={'_id': "
"False})."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:34
msgid ""
"`sort` (optional): a list of (key, direction) pairs specifying the sort "
"order for the query. If multiple documents match the query, they are "
"sorted and the first is deleted."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:44
#: pymongo.collection.Collection.find_one_and_replace:50
#: pymongo.collection.Collection.find_one_and_update:90
msgid ""
"`**kwargs` (optional): additional command arguments can be passed as "
"keyword arguments (for example maxTimeMS can be used with recent server "
"versions)."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:52
#: pymongo.collection.Collection.find_one_and_replace:60
#: pymongo.collection.Collection.find_one_and_update:102
msgid "Respects write concern."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_delete:55
#: pymongo.collection.Collection.find_one_and_replace:63
#: pymongo.collection.Collection.find_one_and_update:105
msgid ""
"Starting in PyMongo 3.2, this command uses the "
":class:`~pymongo.write_concern.WriteConcern` of this "
":class:`~pymongo.collection.Collection` when connected to MongoDB >= 3.2."
" Note that using an elevated write concern with this command may be "
"slower compared to using the default write concern."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:1
msgid ""
"Finds a single document and replaces it, returning either the original or"
" the replaced document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:4
msgid ""
"The :meth:`find_one_and_replace` method differs from "
":meth:`find_one_and_update` by replacing the document matched by "
"*filter*, rather than modifying the existing document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:25
msgid "`replacement`: The replacement document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:26
msgid ""
"`projection` (optional): A list of field names that should be returned in"
" the result document or a mapping specifying the fields to include or "
"exclude. If `projection` is a list \"_id\" will always be returned. Use a"
" mapping to exclude fields from the result (e.g. projection={'_id': "
"False})."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:31
msgid ""
"`sort` (optional): a list of (key, direction) pairs specifying the sort "
"order for the query. If multiple documents match the query, they are "
"sorted and the first is replaced."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:34
#: pymongo.collection.Collection.find_one_and_update:72
msgid ""
"`upsert` (optional): When ``True``, inserts a new document if no document"
" matches the query. Defaults to ``False``."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:36
msgid ""
"`return_document`: If :attr:`ReturnDocument.BEFORE` (the default), "
"returns the original document before it was replaced, or ``None`` if no "
"document matches. If :attr:`ReturnDocument.AFTER`, returns the replaced "
"or inserted document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_replace:54
#: pymongo.collection.Collection.find_one_and_update:94
#: pymongo.operations.DeleteMany:17 pymongo.operations.DeleteOne:17
#: pymongo.operations.ReplaceOne:20
msgid "Added the ``hint`` option."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:1
msgid ""
"Finds a single document and updates it, returning either the original or "
"the updated document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:8
msgid "Returns ``None`` if no document matches the filter."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:13
msgid ""
"When the filter matches, by default :meth:`find_one_and_update` returns "
"the original version of the document before the update was applied. To "
"return the updated (or inserted in the case of *upsert*) version of the "
"document instead, use the *return_document* option."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:26
msgid "You can limit the fields returned with the *projection* option."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:35
msgid ""
"The *upsert* option can be used to create the document if it doesn't "
"already exist."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:63
msgid "`update`: The update operations to apply."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:64
msgid ""
"`projection` (optional): A list of field names that should be returned in"
" the result document or a mapping specifying the fields to include or "
"exclude. If `projection` is a list \"_id\" will always be returned. Use a"
" dict to exclude fields from the result (e.g. projection={'_id': False})."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:69
msgid ""
"`sort` (optional): a list of (key, direction) pairs specifying the sort "
"order for the query. If multiple documents match the query, they are "
"sorted and the first is updated."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:74
msgid ""
"`return_document`: If :attr:`ReturnDocument.BEFORE` (the default), "
"returns the original document before it was updated. If "
":attr:`ReturnDocument.AFTER`, returns the updated or inserted document."
msgstr ""

#: of pymongo.collection.Collection.find_one_and_update:98
msgid "Added the ``array_filters`` and ``session`` options."
msgstr ""

#: of pymongo.collection.Collection.count_documents:1
msgid "Count the number of documents in this collection."
msgstr ""

#: of pymongo.collection.Collection.count_documents:3
msgid ""
"For a fast count of the total documents in a collection see "
":meth:`estimated_document_count`."
msgstr ""

#: of pymongo.collection.Collection.count_documents:6
msgid "The :meth:`count_documents` method is supported in a transaction."
msgstr ""

#: of pymongo.collection.Collection.count_documents:8
#: pymongo.collection.Collection.estimated_document_count:7
msgid ""
"All optional parameters should be passed as keyword arguments to this "
"method. Valid options include:"
msgstr ""

#: of pymongo.collection.Collection.count:10
#: pymongo.collection.Collection.count_documents:11
msgid ""
"`skip` (int): The number of matching documents to skip before returning "
"results."
msgstr ""

#: of pymongo.collection.Collection.count_documents:13
msgid ""
"`limit` (int): The maximum number of documents to count. Must be a "
"positive integer. If not provided, no limit is imposed."
msgstr ""

#: of pymongo.collection.Collection.count_documents:15
#: pymongo.collection.Collection.estimated_document_count:10
msgid ""
"`maxTimeMS` (int): The maximum amount of time to allow this operation to "
"run, in milliseconds."
msgstr ""

#: of pymongo.collection.Collection.count_documents:20
msgid ""
"`hint` (string or list of tuples): The index to use. Specify either the "
"index name as a string or the index specification as a list of tuples "
"(e.g. [('a', pymongo.ASCENDING), ('b', pymongo.ASCENDING)]). This option "
"is only supported on MongoDB 3.6 and above."
msgstr ""

#: of pymongo.collection.Collection.count_documents:25
msgid ""
"The :meth:`count_documents` method obeys the :attr:`read_preference` of "
"this :class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.count:26
#: pymongo.collection.Collection.count_documents:28
msgid ""
"When migrating from :meth:`count` to :meth:`count_documents` the "
"following query operators must be replaced:"
msgstr ""

#: of pymongo.collection.Collection.count:30
#: pymongo.collection.Collection.count_documents:32
msgid "Operator"
msgstr ""

#: of pymongo.collection.Collection.count:30
#: pymongo.collection.Collection.count_documents:32
msgid "Replacement"
msgstr ""

#: of pymongo.collection.Collection.count:32
#: pymongo.collection.Collection.count_documents:34
msgid "$where"
msgstr ""

#: of pymongo.collection.Collection.count:32
#: pymongo.collection.Collection.count_documents:34
msgid "`$expr`_"
msgstr ""

#: of pymongo.collection.Collection.count:34
#: pymongo.collection.Collection.count_documents:36
msgid "$near"
msgstr ""

#: of pymongo.collection.Collection.count:34
#: pymongo.collection.Collection.count_documents:36
msgid "`$geoWithin`_ with `$center`_"
msgstr ""

#: of pymongo.collection.Collection.count:36
#: pymongo.collection.Collection.count_documents:38
msgid "$nearSphere"
msgstr ""

#: of pymongo.collection.Collection.count:36
#: pymongo.collection.Collection.count_documents:38
msgid "`$geoWithin`_ with `$centerSphere`_"
msgstr ""

#: of pymongo.collection.Collection.count:39
#: pymongo.collection.Collection.count_documents:41
msgid "$expr requires MongoDB 3.6+"
msgstr ""

#: of pymongo.collection.Collection.count_documents:44
msgid ""
"`filter` (required): A query document that selects which documents to "
"count in the collection. Can be an empty document to count all documents."
msgstr ""

#: of pymongo.collection.Collection.estimated_document_count:1
msgid ""
"Get an estimate of the number of documents in this collection using "
"collection metadata."
msgstr ""

#: of pymongo.collection.Collection.estimated_document_count:4
msgid ""
"The :meth:`estimated_document_count` method is **not** supported in a "
"transaction."
msgstr ""

#: of pymongo.collection.Collection.distinct:1
msgid ""
"Get a list of distinct values for `key` among all documents in this "
"collection."
msgstr ""

#: of pymongo.collection.Collection.distinct:4 pymongo.cursor.Cursor.distinct:4
msgid ""
"Raises :class:`TypeError` if `key` is not an instance of "
":class:`basestring` (:class:`str` in python 3)."
msgstr ""

#: of pymongo.collection.Collection.distinct:7
msgid ""
"All optional distinct parameters should be passed as keyword arguments to"
" this method. Valid options include:"
msgstr ""

#: of pymongo.collection.Collection.count:14
#: pymongo.collection.Collection.distinct:10
msgid ""
"`maxTimeMS` (int): The maximum amount of time to allow the count command "
"to run, in milliseconds."
msgstr ""

#: of pymongo.collection.Collection.distinct:16
msgid ""
"The :meth:`distinct` method obeys the :attr:`read_preference` of this "
":class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.distinct:20
msgid "`key`: name of the field for which we want to get the distinct values"
msgstr ""

#: of pymongo.collection.Collection.distinct:22
msgid ""
"`filter` (optional): A query document that specifies the documents from "
"which to retrieve the distinct values."
msgstr ""

#: of pymongo.collection.Collection.create_index:1
msgid "Creates an index on this collection."
msgstr ""

#: of pymongo.collection.Collection.create_index:3
#: pymongo.operations.IndexModel:5
msgid ""
"Takes either a single key or a list of (key, direction) pairs. The key(s)"
" must be an instance of :class:`basestring` (:class:`str` in python 3), "
"and the direction(s) must be one of (:data:`~pymongo.ASCENDING`, "
":data:`~pymongo.DESCENDING`, :data:`~pymongo.GEO2D`, "
":data:`~pymongo.GEOHAYSTACK`, :data:`~pymongo.GEOSPHERE`, "
":data:`~pymongo.HASHED`, :data:`~pymongo.TEXT`)."
msgstr ""

#: of pymongo.collection.Collection.create_index:11
msgid ""
"To create a single key ascending index on the key ``'mike'`` we just use "
"a string argument::"
msgstr ""

#: of pymongo.collection.Collection.create_index:16
msgid ""
"For a compound index on ``'mike'`` descending and ``'eliot'`` ascending "
"we need to use a list of tuples::"
msgstr ""

#: of pymongo.collection.Collection.create_index:22
msgid ""
"All optional index creation parameters should be passed as keyword "
"arguments to this method. For example::"
msgstr ""

#: of pymongo.collection.Collection.create_index:28
#: pymongo.operations.IndexModel:13
msgid "Valid options include, but are not limited to:"
msgstr ""

#: of pymongo.collection.Collection.create_index:30
#: pymongo.operations.IndexModel:15
msgid ""
"`name`: custom name to use for this index - if none is given, a name will"
" be generated."
msgstr ""

#: of pymongo.collection.Collection.create_index:32
#: pymongo.operations.IndexModel:17
msgid "`unique`: if ``True``, creates a uniqueness constraint on the index."
msgstr ""

#: of pymongo.collection.Collection.create_index:34
#: pymongo.operations.IndexModel:18
msgid "`background`: if ``True``, this index should be created in the background."
msgstr ""

#: of pymongo.collection.Collection.create_index:36
#: pymongo.operations.IndexModel:20
msgid ""
"`sparse`: if ``True``, omit from the index any documents that lack the "
"indexed field."
msgstr ""

#: of pymongo.collection.Collection.create_index:38
#: pymongo.operations.IndexModel:22
msgid ""
"`bucketSize`: for use with geoHaystack indexes. Number of documents to "
"group together within a certain proximity to a given longitude and "
"latitude."
msgstr ""

#: of pymongo.collection.Collection.create_index:41
#: pymongo.operations.IndexModel:25
msgid "`min`: minimum value for keys in a :data:`~pymongo.GEO2D` index."
msgstr ""

#: of pymongo.collection.Collection.create_index:43
#: pymongo.operations.IndexModel:27
msgid "`max`: maximum value for keys in a :data:`~pymongo.GEO2D` index."
msgstr ""

#: of pymongo.collection.Collection.create_index:45
#: pymongo.operations.IndexModel:29
msgid ""
"`expireAfterSeconds`: <int> Used to create an expiring (TTL) collection. "
"MongoDB will automatically delete documents from this collection after "
"<int> seconds. The indexed field must be a UTC datetime or the data will "
"not expire."
msgstr ""

#: of pymongo.collection.Collection.create_index:49
msgid ""
"`partialFilterExpression`: A document that specifies a filter for a "
"partial index. Requires MongoDB >=3.2."
msgstr ""

#: of pymongo.collection.Collection.create_index:51
msgid ""
"`collation` (optional): An instance of "
":class:`~pymongo.collation.Collation`. Requires MongoDB >= 3.4."
msgstr ""

#: of pymongo.collection.Collection.create_index:53
msgid ""
"`wildcardProjection`: Allows users to include or exclude specific field "
"paths from a `wildcard index`_ using the {\"$**\" : 1} key pattern. "
"Requires MongoDB >= 4.2."
msgstr ""

#: of pymongo.collection.Collection.create_index:56
#: pymongo.operations.IndexModel:40
msgid ""
"`hidden`: if ``True``, this index will be hidden from the query planner "
"and will not be evaluated as part of query plan selection. Requires "
"MongoDB >= 4.4."
msgstr ""

#: of pymongo.collection.Collection.create_index:60
#: pymongo.database.Database.create_collection:18
#: pymongo.operations.IndexModel:44
msgid ""
"See the MongoDB documentation for a full list of supported options by "
"server version."
msgstr ""

#: of pymongo.collection.Collection.create_index:63
msgid ""
"`dropDups` is not supported by MongoDB 3.0 or newer. The option is "
"silently ignored by the server and unique index builds using the option "
"will fail if a duplicate value is detected."
msgstr ""

#: of pymongo.collection.Collection.create_index:72
#: pymongo.operations.IndexModel:48
msgid ""
"`keys`: a single key or a list of (key, direction) pairs specifying the "
"index to create"
msgstr ""

#: of pymongo.collection.Collection.create_index:76
#: pymongo.operations.IndexModel:50
msgid ""
"`**kwargs` (optional): any additional index creation options (see the "
"above list) should be passed as keyword arguments"
msgstr ""

#: of pymongo.collection.Collection.create_index:80
#: pymongo.operations.IndexModel:54
msgid "Added the ``hidden`` option."
msgstr ""

#: of pymongo.collection.Collection.create_index:82
msgid ""
"Added ``session`` parameter. Added support for passing maxTimeMS in "
"kwargs."
msgstr ""

#: of pymongo.collection.Collection.create_index:88
msgid "Added partialFilterExpression to support partial indexes."
msgstr ""

#: of pymongo.collection.Collection.create_index:90
msgid ""
"Renamed `key_or_list` to `keys`. Removed the `cache_for` option. "
":meth:`create_index` no longer caches index names. Removed support for "
"the drop_dups and bucket_size aliases."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:1
msgid "Create one or more indexes on this collection."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:11
msgid "`indexes`: A list of :class:`~pymongo.operations.IndexModel` instances."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:15
#: pymongo.collection.Collection.drop_index:21
#: pymongo.collection.Collection.drop_indexes:9
msgid ""
"`**kwargs` (optional): optional arguments to the createIndexes command "
"(like maxTimeMS) can be passed as keyword arguments."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:18
msgid ""
"`create_indexes` uses the `createIndexes`_ command introduced in MongoDB "
"**2.6** and cannot be used with earlier versions."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:26
#: pymongo.collection.Collection.drop_index:28
#: pymongo.collection.Collection.drop_indexes:16
#: pymongo.collection.Collection.reindex:25
msgid ""
"Added ``session`` parameter. Added support for arbitrary keyword "
"arguments."
msgstr ""

#: of pymongo.collection.Collection.create_indexes:30
#: pymongo.collection.Collection.drop_index:32
#: pymongo.collection.Collection.drop_indexes:20
#: pymongo.collection.Collection.map_reduce:38
#: pymongo.collection.Collection.reindex:34
#: pymongo.collection.Collection.rename:24
msgid ""
"Apply this collection's write concern automatically to this operation "
"when connected to MongoDB >= 3.4."
msgstr ""

#: of pymongo.collection.Collection.drop_index:1
msgid "Drops the specified index on this collection."
msgstr ""

#: of pymongo.collection.Collection.drop_index:3
msgid ""
"Can be used on non-existant collections or collections with no indexes.  "
"Raises OperationFailure on an error (e.g. trying to drop an index that "
"does not exist). `index_or_name` can be either an index name (as returned"
" by `create_index`), or an index specifier (as passed to `create_index`)."
" An index specifier should be a list of (key, direction) pairs. Raises "
"TypeError if index is not an instance of (str, unicode, list)."
msgstr ""

#: of pymongo.collection.Collection.drop_index:13
msgid ""
"if a custom name was used on index creation (by passing the `name` "
"parameter to :meth:`create_index` or :meth:`ensure_index`) the index "
"**must** be dropped by name."
msgstr ""

#: of pymongo.collection.Collection.drop_index:18
msgid "`index_or_name`: index (or name of index) to drop"
msgstr ""

#: of pymongo.collection.Collection.drop_indexes:1
msgid "Drops all indexes on this collection."
msgstr ""

#: of pymongo.collection.Collection.drop_indexes:3
msgid ""
"Can be used on non-existant collections or collections with no indexes. "
"Raises OperationFailure on an error."
msgstr ""

#: of pymongo.collection.Collection.reindex:1
msgid "Rebuilds all indexes on this collection."
msgstr ""

#: of pymongo.collection.Collection.reindex:3
msgid ""
"**DEPRECATED** - The :meth:`~reindex` method is deprecated and will be "
"removed in PyMongo 4.0. Use :meth:`~pymongo.database.Database.command` to"
" run the ``reIndex`` command directly instead::"
msgstr ""

#: of pymongo.collection.Collection.reindex:9
msgid ""
"Starting in MongoDB 4.6, the `reIndex` command can only be run when "
"connected to a standalone mongod."
msgstr ""

#: of pymongo.collection.Collection.reindex:15
msgid ""
"`**kwargs` (optional): optional arguments to the reIndex command (like "
"maxTimeMS) can be passed as keyword arguments."
msgstr ""

#: of pymongo.collection.Collection.reindex:18
msgid ""
"reindex blocks all other operations (indexes are built in the foreground)"
" and will be slow for large collections."
msgstr ""

#: of pymongo.collection.Collection.reindex:29
msgid ""
"We no longer apply this collection's write concern to this operation. "
"MongoDB 3.4 silently ignored the write concern. MongoDB 3.6+ returns an "
"error if we include the write concern."
msgstr ""

#: of pymongo.collection.Collection.list_indexes:1
msgid "Get a cursor over the index documents for this collection."
msgstr ""

#: of pymongo.collection.Collection.list_indexes:13
#: pymongo.database.Database.list_collections:15
#: pymongo.mongo_client.MongoClient.list_databases:13
msgid "An instance of :class:`~pymongo.command_cursor.CommandCursor`."
msgstr ""

#: of pymongo.collection.Collection.index_information:1
msgid "Get information on this collection's indexes."
msgstr ""

#: of pymongo.collection.Collection.index_information:3
msgid ""
"Returns a dictionary where the keys are index names (as returned by "
"create_index()) and the values are dictionaries containing information "
"about each index. The dictionary is guaranteed to contain at least a "
"single key, ``\"key\"`` which is a list of (key, direction) pairs "
"specifying the index (as passed to create_index()). It will also contain "
"any other metadata about the indexes, except for the ``\"ns\"`` and "
"``\"name\"`` keys, which are cleaned. Example output might look like "
"this:"
msgstr ""

#: of pymongo.collection.Collection.drop:1
msgid "Alias for :meth:`~pymongo.database.Database.drop_collection`."
msgstr ""

#: of pymongo.collection.Collection.drop:7
msgid "The following two calls are equivalent:"
msgstr ""

#: of pymongo.collection.Collection.drop:12
msgid ""
":meth:`drop` now respects this :class:`Collection`'s "
":attr:`write_concern`."
msgstr ""

#: of pymongo.collection.Collection.rename:1
msgid "Rename this collection."
msgstr ""

#: of pymongo.collection.Collection.rename:3
msgid ""
"If operating in auth mode, client must be authorized as an admin to "
"perform this operation. Raises :class:`TypeError` if `new_name` is not an"
" instance of :class:`basestring` (:class:`str` in python 3). Raises "
":class:`~pymongo.errors.InvalidName` if `new_name` is not a valid "
"collection name."
msgstr ""

#: of pymongo.collection.Collection.rename:10
msgid "`new_name`: new name for this collection"
msgstr ""

#: of pymongo.collection.Collection.rename:13
msgid ""
"`**kwargs` (optional): additional arguments to the rename command may be "
"passed as keyword arguments to this helper method (i.e. "
"``dropTarget=True``)"
msgstr ""

#: of pymongo.collection.Collection.options:1
msgid "Get the options set on this collection."
msgstr ""

#: of pymongo.collection.Collection.options:3
msgid ""
"Returns a dictionary of options and their values - see "
":meth:`~pymongo.database.Database.create_collection` for more information"
" on the possible options. Returns an empty dictionary if the collection "
"has not been created yet."
msgstr ""

#: of pymongo.collection.Collection.map_reduce:1
msgid "Perform a map/reduce operation on this collection."
msgstr ""

#: of pymongo.collection.Collection.map_reduce:3
msgid ""
"If `full_response` is ``False`` (default) returns a "
":class:`~pymongo.collection.Collection` instance containing the results "
"of the operation. Otherwise, returns the full response from the server to"
" the `map reduce command`_."
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:15
#: pymongo.collection.Collection.map_reduce:9
msgid "`map`: map function (as a JavaScript string)"
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:16
#: pymongo.collection.Collection.map_reduce:10
msgid "`reduce`: reduce function (as a JavaScript string)"
msgstr ""

#: of pymongo.collection.Collection.map_reduce:11
msgid ""
"`out`: output collection name or `out object` (dict). See the `map reduce"
" command`_ documentation for available options. Note: `out` options are "
"order sensitive. :class:`~bson.son.SON` can be used to specify multiple "
"options. e.g. SON([('replace', <collection name>), ('db', <database "
"name>)])"
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:17
#: pymongo.collection.Collection.map_reduce:16
msgid ""
"`full_response` (optional): if ``True``, return full response to this "
"command - otherwise just return the result collection"
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:21
#: pymongo.collection.Collection.map_reduce:20
msgid ""
"`**kwargs` (optional): additional arguments to the `map reduce command`_ "
"may be passed as keyword arguments to this helper method, e.g.::"
msgstr ""

#: of pymongo.collection.Collection.map_reduce:26
msgid ""
"The :meth:`map_reduce` method does **not** obey the "
":attr:`read_preference` of this :class:`Collection`. To run mapReduce on "
"a secondary use the :meth:`inline_map_reduce` method instead."
msgstr ""

#: of pymongo.collection.Collection.map_reduce:31
msgid ""
"The :attr:`~pymongo.collection.Collection.write_concern` of this "
"collection is automatically applied to this operation (if the output is "
"not inline) when using MongoDB >= 3.4."
msgstr ""

#: of pymongo.collection.Collection.map_reduce:46
msgid "Removed deprecated arguments: merge_output and reduce_output"
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:1
msgid "Perform an inline map/reduce operation on this collection."
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:3
msgid ""
"Perform the map/reduce operation on the server in RAM. A result "
"collection is not created. The result set is returned as a list of "
"documents."
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:7
msgid ""
"If `full_response` is ``False`` (default) returns the result documents in"
" a list. Otherwise, returns the full response from the server to the `map"
" reduce command`_."
msgstr ""

#: of pymongo.collection.Collection.inline_map_reduce:11
msgid ""
"The :meth:`inline_map_reduce` method obeys the :attr:`read_preference` of"
" this :class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:1
msgid "**DEPRECATED**: Scan this entire collection in parallel."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:3
msgid ""
"Returns a list of up to ``num_cursors`` cursors that can be iterated "
"concurrently. As long as the collection is not modified during scanning, "
"each document appears once in one of the cursors result sets."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:8
msgid ""
"For example, to process each document in a collection using some thread-"
"safe ``process_document()`` function:"
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:31
msgid ""
"The :meth:`parallel_scan` method obeys the :attr:`read_preference` of "
"this :class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:35
msgid "`num_cursors`: the number of cursors to return"
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:38
msgid ""
"`**kwargs`: additional options for the parallelCollectionScan command can"
" be passed as keyword arguments."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:41
msgid "Requires server version **>= 2.5.5**."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:49
msgid ""
"Added back support for arbitrary keyword arguments. MongoDB 3.4 adds "
"support for maxTimeMS as an option to the parallelCollectionScan command."
msgstr ""

#: of pymongo.collection.Collection.parallel_scan:54
msgid ""
"Removed support for arbitrary keyword arguments, since the "
"parallelCollectionScan command has no optional arguments."
msgstr ""

#: of pymongo.collection.Collection.initialize_unordered_bulk_op:1
msgid "**DEPRECATED** - Initialize an unordered batch of write operations."
msgstr ""

#: of pymongo.collection.Collection.initialize_unordered_bulk_op:3
msgid ""
"Operations will be performed on the server in arbitrary order, possibly "
"in parallel. All operations will be attempted."
msgstr ""

#: of pymongo.collection.Collection.initialize_ordered_bulk_op:12
#: pymongo.collection.Collection.initialize_unordered_bulk_op:11
msgid "Returns a :class:`~pymongo.bulk.BulkOperationBuilder` instance."
msgstr ""

#: of pymongo.collection.Collection.initialize_unordered_bulk_op:13
msgid "See :ref:`unordered_bulk` for examples."
msgstr ""

#: of pymongo.collection.Collection.initialize_ordered_bulk_op:1
msgid "**DEPRECATED** - Initialize an ordered batch of write operations."
msgstr ""

#: of pymongo.collection.Collection.initialize_ordered_bulk_op:3
msgid ""
"Operations will be performed on the server serially, in the order "
"provided. If an error occurs all remaining operations are aborted."
msgstr ""

#: of pymongo.collection.Collection.initialize_ordered_bulk_op:14
msgid "See :ref:`ordered_bulk` for examples."
msgstr ""

#: of pymongo.collection.Collection.group:1
msgid "Perform a query similar to an SQL *group by* operation."
msgstr ""

#: of pymongo.collection.Collection.group:3
msgid ""
"**DEPRECATED** - The group command was deprecated in MongoDB 3.4. The "
":meth:`~group` method is deprecated and will be removed in PyMongo 4.0. "
"Use :meth:`~aggregate` with the `$group` stage or :meth:`~map_reduce` "
"instead."
msgstr ""

#: of pymongo.collection.Collection.group:8
msgid "Deprecated the group method."
msgstr ""

#: of pymongo.collection.Collection.group:12
msgid "Removed deprecated argument: command"
msgstr ""

#: of pymongo.collection.Collection.count:1
msgid "**DEPRECATED** - Get the number of documents in this collection."
msgstr ""

#: of pymongo.collection.Collection.count:3
msgid ""
"The :meth:`count` method is deprecated and **not** supported in a "
"transaction. Please use :meth:`count_documents` or "
":meth:`estimated_document_count` instead."
msgstr ""

#: of pymongo.collection.Collection.count:7
msgid ""
"All optional count parameters should be passed as keyword arguments to "
"this method. Valid options include:"
msgstr ""

#: of pymongo.collection.Collection.count:12
msgid ""
"`limit` (int): The maximum number of documents to count. A limit of 0 "
"(the default) is equivalent to setting no limit."
msgstr ""

#: of pymongo.collection.Collection.count:19
msgid ""
"`hint` (string or list of tuples): The index to use. Specify either the "
"index name as a string or the index specification as a list of tuples "
"(e.g. [('a', pymongo.ASCENDING), ('b', pymongo.ASCENDING)])."
msgstr ""

#: of pymongo.collection.Collection.count:23
msgid ""
"The :meth:`count` method obeys the :attr:`read_preference` of this "
":class:`Collection`."
msgstr ""

#: of pymongo.collection.Collection.count:42
msgid ""
"`filter` (optional): A query document that selects which documents to "
"count in the collection."
msgstr ""

#: of pymongo.collection.Collection.insert:1
msgid "Insert a document(s) into this collection."
msgstr ""

#: of pymongo.collection.Collection.insert:3
msgid "**DEPRECATED** - Use :meth:`insert_one` or :meth:`insert_many` instead."
msgstr ""

#: of pymongo.collection.Collection.insert:5
#: pymongo.collection.Collection.remove:5 pymongo.collection.Collection.save:5
#: pymongo.collection.Collection.update:6
msgid ""
"Removed the `safe` parameter. Pass ``w=0`` for unacknowledged write "
"operations."
msgstr ""

#: of pymongo.collection.Collection.save:1
msgid "Save a document in this collection."
msgstr ""

#: of pymongo.collection.Collection.save:3
msgid "**DEPRECATED** - Use :meth:`insert_one` or :meth:`replace_one` instead."
msgstr ""

#: of pymongo.collection.Collection.update:1
msgid "Update a document(s) in this collection."
msgstr ""

#: of pymongo.collection.Collection.update:3
msgid ""
"**DEPRECATED** - Use :meth:`replace_one`, :meth:`update_one`, or "
":meth:`update_many` instead."
msgstr ""

#: of pymongo.collection.Collection.remove:1
msgid "Remove a document(s) from this collection."
msgstr ""

#: of pymongo.collection.Collection.remove:3
msgid "**DEPRECATED** - Use :meth:`delete_one` or :meth:`delete_many` instead."
msgstr ""

#: of pymongo.collection.Collection.find_and_modify:1
msgid "Update and return an object."
msgstr ""

#: of pymongo.collection.Collection.find_and_modify:3
msgid ""
"**DEPRECATED** - Use :meth:`find_one_and_delete`, "
":meth:`find_one_and_replace`, or :meth:`find_one_and_update` instead."
msgstr ""

#: of pymongo.collection.Collection.ensure_index:1
msgid "**DEPRECATED** - Ensures that an index exists on this collection."
msgstr ""

#: of pymongo.collection.Collection.ensure_index:3
msgid "**DEPRECATED**"
msgstr ""

#: ../../api/pymongo/command_cursor.rst:2
msgid ":mod:`command_cursor` -- Tools for iterating over MongoDB command results"
msgstr ""

#: of pymongo.command_cursor:1
msgid "CommandCursor class to iterate over command results."
msgstr ""

#: of pymongo.command_cursor.CommandCursor:1
msgid "Create a new command cursor."
msgstr ""

#: of pymongo.command_cursor.CommandCursor:3
msgid "The parameter 'retrieved' is unused."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.address:1
#: pymongo.cursor.Cursor.address:1
msgid "The (host, port) of the server used, or None."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.alive:3
msgid ""
"Even if :attr:`alive` is ``True``, :meth:`next` can raise "
":exc:`StopIteration`. Best to use a for loop::"
msgstr ""

#: of pymongo.command_cursor.CommandCursor.alive:9
msgid ""
":attr:`alive` can be True while iterating a cursor from a failed server. "
"In this case :attr:`alive` will return False after :meth:`next` fails to "
"retrieve the next batch of results from the server."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.batch_size:1
#: pymongo.cursor.Cursor.batch_size:1
msgid ""
"Limits the number of documents returned in one batch. Each batch requires"
" a round trip to the server. It can be adjusted to optimize performance "
"and limit data transfer."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.batch_size:5
#: pymongo.cursor.Cursor.batch_size:5
msgid ""
"batch_size can not override MongoDB's internal limits on the amount of "
"data it will return to the client in a single batch (i.e if you set batch"
" size to 1,000,000,000, MongoDB will currently only return 4-16MB of "
"results per batch)."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.batch_size:10
msgid ""
"Raises :exc:`TypeError` if `batch_size` is not an integer. Raises "
":exc:`ValueError` if `batch_size` is less than ``0``."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.batch_size:14
#: pymongo.cursor.Cursor.batch_size:17
msgid "`batch_size`: The size of each batch of results requested."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.close:1
#: pymongo.cursor.Cursor.close:1
msgid "Explicitly close / kill this cursor."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.cursor_id:1
msgid "Returns the id of the cursor."
msgstr ""

#: of pymongo.command_cursor.CommandCursor.session:1
#: pymongo.cursor.Cursor.session:1
msgid "The cursor's :class:`~pymongo.client_session.ClientSession`, or None."
msgstr ""

#: of pymongo.command_cursor.RawBatchCommandCursor:1
#: pymongo.cursor.RawBatchCursor:1
msgid "Create a new cursor / iterator over raw batches of BSON data."
msgstr ""

#: of pymongo.command_cursor.RawBatchCommandCursor:3
msgid ""
"Should not be called directly by application developers - see "
":meth:`~pymongo.collection.Collection.aggregate_raw_batches` instead."
msgstr ""

#: ../../api/pymongo/cursor.rst:2
msgid ":mod:`cursor` -- Tools for iterating over MongoDB query results"
msgstr ""

#: of pymongo.cursor:1
msgid "Cursor class to iterate over Mongo query results."
msgstr ""

#: of pymongo.cursor.CursorType.NON_TAILABLE:1
msgid "The standard cursor type."
msgstr ""

#: of pymongo.cursor.CursorType.TAILABLE:1
msgid "The tailable cursor type."
msgstr ""

#: of pymongo.cursor.CursorType.TAILABLE:3
msgid ""
"Tailable cursors are only for use with capped collections. They are not "
"closed when the last data is retrieved but are kept open and the cursor "
"location marks the final document position. If more data is received "
"iteration of the cursor will continue from the last document received."
msgstr ""

#: of pymongo.cursor.CursorType.TAILABLE_AWAIT:1
msgid "A tailable cursor with the await option set."
msgstr ""

#: of pymongo.cursor.CursorType.TAILABLE_AWAIT:3
msgid ""
"Creates a tailable cursor that will wait for a few seconds after "
"returning the full result set so that it can capture and return "
"additional data added during the query."
msgstr ""

#: of pymongo.cursor.CursorType.EXHAUST:1
msgid "An exhaust cursor."
msgstr ""

#: of pymongo.cursor.CursorType.EXHAUST:3
msgid ""
"MongoDB will stream batched results to the client without waiting for the"
" client to request each batch, reducing latency."
msgstr ""

#: of pymongo.cursor.Cursor:1
msgid "Create a new cursor."
msgstr ""

#: of pymongo.cursor.Cursor:3
msgid ""
"Should not be called directly by application developers - see "
":meth:`~pymongo.collection.Collection.find` instead."
msgstr ""

#: ../../api/pymongo/cursor.rst:23
msgid "See :meth:`__getitem__`."
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:1
msgid "Get a single document or a slice of documents from this cursor."
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:3
msgid ""
"Raises :class:`~pymongo.errors.InvalidOperation` if this cursor has "
"already been used."
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:6
msgid "To get a single document use an integral index, e.g.::"
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:10
msgid ""
"An :class:`IndexError` will be raised if the index is negative or greater"
" than the amount of documents in this cursor. Any limit previously "
"applied to this cursor will be ignored."
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:14
msgid "To get a slice of documents use a slice index, e.g.::"
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:18
msgid ""
"This will return this cursor with a limit of ``5`` and skip of ``20`` "
"applied.  Using a slice index will override any prior limits or skips "
"applied to this cursor (including those applied through previous calls to"
" this method). Raises :class:`IndexError` when the slice has a step, a "
"negative start value, or a stop value less than or equal to the start "
"value."
msgstr ""

#: of pymongo.cursor.Cursor.__getitem__:27
msgid "`index`: An integer or slice index to be applied to this cursor"
msgstr ""

#: of pymongo.cursor.Cursor.address:3
msgid "Renamed from \"conn_id\"."
msgstr ""

#: of pymongo.cursor.Cursor.alive:3
msgid ""
"This is mostly useful with `tailable cursors "
"<http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_ since they will "
"stop iterating even though they *may* return more results in the future."
msgstr ""

#: of pymongo.cursor.Cursor.alive:8
msgid "With regular cursors, simply use a for loop instead of :attr:`alive`::"
msgstr ""

#: of pymongo.cursor.Cursor.alive:13
msgid ""
"Even if :attr:`alive` is True, :meth:`next` can raise "
":exc:`StopIteration`. :attr:`alive` can also be True while iterating a "
"cursor from a failed server. In this case :attr:`alive` will return False"
" after :meth:`next` fails to retrieve the next batch of results from the "
"server."
msgstr ""

#: of pymongo.cursor.Cursor.allow_disk_use:1
msgid ""
"Specifies whether MongoDB can use temporary disk files while processing a"
" blocking sort operation."
msgstr ""

#: of pymongo.cursor.Cursor.allow_disk_use:4
msgid "Raises :exc:`TypeError` if `allow_disk_use` is not a boolean."
msgstr ""

#: of pymongo.cursor.Cursor.allow_disk_use:6
msgid "`allow_disk_use` requires server version **>= 4.4**"
msgstr ""

#: of pymongo.cursor.Cursor.allow_disk_use:9
msgid ""
"`allow_disk_use`: if True, MongoDB may use temporary disk files to store "
"data exceeding the system memory limit while processing a blocking sort "
"operation."
msgstr ""

#: of pymongo.cursor.Cursor.batch_size:10
msgid ""
"Raises :exc:`TypeError` if `batch_size` is not an integer. Raises "
":exc:`ValueError` if `batch_size` is less than ``0``. Raises "
":exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has "
"already been used. The last `batch_size` applied to this cursor takes "
"precedence."
msgstr ""

#: of pymongo.cursor.Cursor.clone:1
msgid "Get a clone of this cursor."
msgstr ""

#: of pymongo.cursor.Cursor.clone:3
msgid ""
"Returns a new Cursor instance with options matching those that have been "
"set on the current instance. The clone will be completely unevaluated, "
"even if the current instance has been partially or completely evaluated."
msgstr ""

#: of pymongo.cursor.Cursor.collation:1
msgid "Adds a :class:`~pymongo.collation.Collation` to this query."
msgstr ""

#: of pymongo.cursor.Cursor.collation:3
msgid "This option is only supported on MongoDB 3.4 and above."
msgstr ""

#: of pymongo.cursor.Cursor.collation:5
msgid ""
"Raises :exc:`TypeError` if `collation` is not an instance of "
":class:`~pymongo.collation.Collation` or a ``dict``. Raises "
":exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has "
"already been used. Only the last collation applied to this cursor has any"
" effect."
msgstr ""

#: of pymongo.cursor.Cursor.collation:12
msgid "`collation`: An instance of :class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.cursor.Cursor.collection:1
msgid ""
"The :class:`~pymongo.collection.Collection` that this :class:`Cursor` is "
"iterating."
msgstr ""

#: of pymongo.cursor.Cursor.comment:1
msgid "Adds a 'comment' to the cursor."
msgstr ""

#: of pymongo.cursor.Cursor.comment:3
msgid "http://docs.mongodb.org/manual/reference/operator/comment/"
msgstr ""

#: of pymongo.cursor.Cursor.comment:6
msgid ""
"`comment`: A string to attach to the query to help interpret and trace "
"the operation in the server logs and in profile data."
msgstr ""

#: of pymongo.cursor.Cursor.count:1
msgid "**DEPRECATED** - Get the size of the results set for this query."
msgstr ""

#: of pymongo.cursor.Cursor.count:3
msgid ""
"The :meth:`count` method is deprecated and **not** supported in a "
"transaction. Please use "
":meth:`~pymongo.collection.Collection.count_documents` instead."
msgstr ""

#: of pymongo.cursor.Cursor.count:7
msgid ""
"Returns the number of documents in the results set for this query. Does "
"not take :meth:`limit` and :meth:`skip` into account by default - set "
"`with_limit_and_skip` to ``True`` if that is the desired behavior. Raises"
" :class:`~pymongo.errors.OperationFailure` on a database error."
msgstr ""

#: of pymongo.cursor.Cursor.count:12
msgid ""
"When used with MongoDB >= 2.6, :meth:`~count` uses any :meth:`~hint` "
"applied to the query. In the following example the hint is passed to the "
"count command:"
msgstr ""

#: of pymongo.cursor.Cursor.count:16
msgid "collection.find({'field': 'value'}).hint('field_1').count()"
msgstr ""

#: of pymongo.cursor.Cursor.count:18
msgid ""
"The :meth:`count` method obeys the "
":attr:`~pymongo.collection.Collection.read_preference` of the "
":class:`~pymongo.collection.Collection` instance on which "
":meth:`~pymongo.collection.Collection.find` was called."
msgstr ""

#: of pymongo.cursor.Cursor.count:24
msgid ""
"`with_limit_and_skip` (optional): take any :meth:`limit` or :meth:`skip` "
"that has been applied to this cursor into account when getting the count"
msgstr ""

#: of pymongo.cursor.Cursor.count:28
msgid "The `with_limit_and_skip` parameter requires server version **>= 1.1.4-**"
msgstr ""

#: of pymongo.cursor.Cursor.count:34
msgid "The :meth:`~count` method now supports :meth:`~hint`."
msgstr ""

#: of pymongo.cursor.Cursor.cursor_id:1
msgid "Returns the id of the cursor"
msgstr ""

#: of pymongo.cursor.Cursor.cursor_id:3
msgid ""
"Useful if you need to manage cursor ids and want to handle killing "
"cursors manually using "
":meth:`~pymongo.mongo_client.MongoClient.kill_cursors`"
msgstr ""

#: of pymongo.cursor.Cursor.distinct:1
msgid ""
"Get a list of distinct values for `key` among all documents in the result"
" set of this query."
msgstr ""

#: of pymongo.cursor.Cursor.distinct:7
msgid ""
"The :meth:`distinct` method obeys the "
":attr:`~pymongo.collection.Collection.read_preference` of the "
":class:`~pymongo.collection.Collection` instance on which "
":meth:`~pymongo.collection.Collection.find` was called."
msgstr ""

#: of pymongo.cursor.Cursor.distinct:13
msgid "`key`: name of key for which we want to get the distinct values"
msgstr ""

#: of pymongo.cursor.Cursor.distinct:15
msgid ":meth:`pymongo.collection.Collection.distinct`"
msgstr ""

#: of pymongo.cursor.Cursor.explain:1
msgid "Returns an explain plan record for this cursor."
msgstr ""

#: of pymongo.cursor.Cursor.explain:3
msgid ""
"Starting with MongoDB 3.2 :meth:`explain` uses the default verbosity mode"
" of the `explain command "
"<https://docs.mongodb.com/manual/reference/command/explain/>`_, "
"``allPlansExecution``. To use a different verbosity use "
":meth:`~pymongo.database.Database.command` to run the explain command "
"directly."
msgstr ""

#: of pymongo.cursor.Cursor.hint:1
msgid "Adds a 'hint', telling Mongo the proper index to use for the query."
msgstr ""

#: of pymongo.cursor.Cursor.hint:3
msgid ""
"Judicious use of hints can greatly improve query performance. When doing "
"a query on multiple fields (at least one of which is indexed) pass the "
"indexed field as a hint to the query. Raises "
":class:`~pymongo.errors.OperationFailure` if the provided hint requires "
"an index that does not exist on this collection, and raises "
":class:`~pymongo.errors.InvalidOperation` if this cursor has already been"
" used."
msgstr ""

#: of pymongo.cursor.Cursor.hint:11
msgid ""
"`index` should be an index as passed to "
":meth:`~pymongo.collection.Collection.create_index` (e.g. ``[('field', "
"ASCENDING)]``) or the name of the index. If `index` is ``None`` any "
"existing hint for this query is cleared. The last hint applied to this "
"cursor takes precedence over all others."
msgstr ""

#: of pymongo.cursor.Cursor.hint:19
msgid "`index`: index to hint on (as an index specifier)"
msgstr ""

#: of pymongo.cursor.Cursor.hint:21
msgid "The :meth:`~hint` method accepts the name of the index."
msgstr ""

#: of pymongo.cursor.Cursor.limit:1
msgid "Limits the number of results to be returned by this cursor."
msgstr ""

#: of pymongo.cursor.Cursor.limit:3
msgid ""
"Raises :exc:`TypeError` if `limit` is not an integer. Raises "
":exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has "
"already been used. The last `limit` applied to this cursor takes "
"precedence. A limit of ``0`` is equivalent to no limit."
msgstr ""

#: of pymongo.cursor.Cursor.limit:9
msgid "`limit`: the number of results to return"
msgstr ""

#: of pymongo.cursor.Cursor.max:1
msgid "Adds ``max`` operator that specifies upper bound for specific index."
msgstr ""

#: of pymongo.cursor.Cursor.max:3
msgid ""
"When using ``max``, :meth:`~hint` should also be configured to ensure the"
" query uses the expected index and starting in MongoDB 4.2 :meth:`~hint` "
"will be required."
msgstr ""

#: of pymongo.cursor.Cursor.max:8
msgid ""
"`spec`: a list of field, limit pairs specifying the exclusive upper bound"
" for all keys of a specific index in order."
msgstr ""

#: of pymongo.cursor.Cursor.max:11
msgid "Deprecated cursors that use ``max`` without a :meth:`~hint`."
msgstr ""

#: of pymongo.cursor.Cursor.max_await_time_ms:1
msgid ""
"Specifies a time limit for a getMore operation on a "
":attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` cursor. For all other "
"types of cursor max_await_time_ms is ignored."
msgstr ""

#: of pymongo.cursor.Cursor.max_await_time_ms:5
msgid ""
"Raises :exc:`TypeError` if `max_await_time_ms` is not an integer or "
"``None``. Raises :exc:`~pymongo.errors.InvalidOperation` if this "
":class:`Cursor` has already been used."
msgstr ""

#: of pymongo.cursor.Cursor.max_await_time_ms:9
msgid "`max_await_time_ms` requires server version **>= 3.2**"
msgstr ""

#: of pymongo.cursor.Cursor.max_await_time_ms:12
msgid "`max_await_time_ms`: the time limit after which the operation is aborted"
msgstr ""

#: of pymongo.cursor.Cursor.max_scan:1
msgid ""
"**DEPRECATED** - Limit the number of documents to scan when performing "
"the query."
msgstr ""

#: of pymongo.cursor.Cursor.max_scan:4
msgid ""
"Raises :class:`~pymongo.errors.InvalidOperation` if this cursor has "
"already been used. Only the last :meth:`max_scan` applied to this cursor "
"has any effect."
msgstr ""

#: of pymongo.cursor.Cursor.max_scan:9
msgid "`max_scan`: the maximum number of documents to scan"
msgstr ""

#: of pymongo.cursor.Cursor.max_scan:11
msgid ""
"Deprecated :meth:`max_scan`. Support for this option is deprecated in "
"MongoDB 4.0. Use :meth:`max_time_ms` instead to limit server side "
"execution time."
msgstr ""

#: of pymongo.cursor.Cursor.max_time_ms:1
msgid ""
"Specifies a time limit for a query operation. If the specified time is "
"exceeded, the operation will be aborted and "
":exc:`~pymongo.errors.ExecutionTimeout` is raised. If `max_time_ms` is "
"``None`` no limit is applied."
msgstr ""

#: of pymongo.cursor.Cursor.max_time_ms:6
msgid ""
"Raises :exc:`TypeError` if `max_time_ms` is not an integer or ``None``. "
"Raises :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` "
"has already been used."
msgstr ""

#: of pymongo.cursor.Cursor.max_time_ms:11
msgid "`max_time_ms`: the time limit after which the operation is aborted"
msgstr ""

#: of pymongo.cursor.Cursor.min:1
msgid "Adds ``min`` operator that specifies lower bound for specific index."
msgstr ""

#: of pymongo.cursor.Cursor.min:3
msgid ""
"When using ``min``, :meth:`~hint` should also be configured to ensure the"
" query uses the expected index and starting in MongoDB 4.2 :meth:`~hint` "
"will be required."
msgstr ""

#: of pymongo.cursor.Cursor.min:8
msgid ""
"`spec`: a list of field, limit pairs specifying the inclusive lower bound"
" for all keys of a specific index in order."
msgstr ""

#: of pymongo.cursor.Cursor.min:11
msgid "Deprecated cursors that use ``min`` without a :meth:`~hint`."
msgstr ""

#: of pymongo.cursor.Cursor.retrieved:1
msgid "The number of documents retrieved so far."
msgstr ""

#: of pymongo.cursor.Cursor.rewind:1
msgid "Rewind this cursor to its unevaluated state."
msgstr ""

#: of pymongo.cursor.Cursor.rewind:3
msgid ""
"Reset this cursor if it has been partially or completely evaluated. Any "
"options that are present on the cursor will remain in effect. Future "
"iterating performed on this cursor will cause new queries to be sent to "
"the server, even if the resultant data has already been retrieved by this"
" cursor."
msgstr ""

#: of pymongo.cursor.Cursor.skip:1
msgid "Skips the first `skip` results of this cursor."
msgstr ""

#: of pymongo.cursor.Cursor.skip:3
msgid ""
"Raises :exc:`TypeError` if `skip` is not an integer. Raises "
":exc:`ValueError` if `skip` is less than ``0``. Raises "
":exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has "
"already been used. The last `skip` applied to this cursor takes "
"precedence."
msgstr ""

#: of pymongo.cursor.Cursor.skip:10
msgid "`skip`: the number of results to skip"
msgstr ""

#: of pymongo.cursor.Cursor.sort:1
msgid "Sorts this cursor's results."
msgstr ""

#: of pymongo.cursor.Cursor.sort:3
msgid ""
"Pass a field name and a direction, either :data:`~pymongo.ASCENDING` or "
":data:`~pymongo.DESCENDING`::"
msgstr ""

#: of pymongo.cursor.Cursor.sort:9
msgid "To sort by multiple fields, pass a list of (key, direction) pairs::"
msgstr ""

#: of pymongo.cursor.Cursor.sort:16
msgid ""
"Beginning with MongoDB version 2.6, text search results can be sorted by "
"relevance::"
msgstr ""

#: of pymongo.cursor.Cursor.sort:29
msgid ""
"For more advanced text search functionality, see MongoDB's `Atlas Search "
"<https://docs.atlas.mongodb.com/atlas-search/>`_."
msgstr ""

#: of pymongo.cursor.Cursor.sort:32
msgid ""
"Raises :class:`~pymongo.errors.InvalidOperation` if this cursor has "
"already been used. Only the last :meth:`sort` applied to this cursor has "
"any effect."
msgstr ""

#: of pymongo.cursor.Cursor.sort:37
msgid ""
"`key_or_list`: a single key or a list of (key, direction) pairs "
"specifying the keys to sort on"
msgstr ""

#: of pymongo.cursor.Cursor.sort:39
msgid ""
"`direction` (optional): only used if `key_or_list` is a single key, if "
"not given :data:`~pymongo.ASCENDING` is assumed"
msgstr ""

#: of pymongo.cursor.Cursor.where:1
msgid "Adds a `$where`_ clause to this query."
msgstr ""

#: of pymongo.cursor.Cursor.where:3
msgid ""
"The `code` argument must be an instance of :class:`basestring` "
"(:class:`str` in python 3) or :class:`~bson.code.Code` containing a "
"JavaScript expression. This expression will be evaluated for each "
"document scanned. Only those documents for which the expression evaluates"
" to *true* will be returned as results. The keyword *this* refers to the "
"object currently being scanned. For example::"
msgstr ""

#: of pymongo.cursor.Cursor.where:15
msgid ""
"Raises :class:`TypeError` if `code` is not an instance of "
":class:`basestring` (:class:`str` in python 3). Raises "
":class:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has "
"already been used. Only the last call to :meth:`where` applied to a "
":class:`Cursor` has any effect."
msgstr ""

#: of pymongo.cursor.Cursor.where:21
msgid ""
"MongoDB 4.4 drops support for :class:`~bson.code.Code` with scope "
"variables. Consider using `$expr`_ instead."
msgstr ""

#: of pymongo.cursor.Cursor.where:25
msgid "`code`: JavaScript expression to use as a filter"
msgstr ""

#: of pymongo.cursor.RawBatchCursor:3
msgid ""
"Should not be called directly by application developers - see "
":meth:`~pymongo.collection.Collection.find_raw_batches` instead."
msgstr ""

#: ../../api/pymongo/cursor_manager.rst:2
msgid ""
":mod:`cursor_manager` -- Managers to handle when cursors are killed after"
" being closed"
msgstr ""

#: of pymongo.cursor_manager:1
msgid ""
"DEPRECATED - A manager to handle when cursors are killed after they are "
"closed."
msgstr ""

#: of pymongo.cursor_manager:4
msgid ""
"New cursor managers should be defined as subclasses of CursorManager and "
"can be installed on a client by calling "
":meth:`~pymongo.mongo_client.MongoClient.set_cursor_manager`."
msgstr ""

#: of pymongo.cursor_manager:8
#: pymongo.mongo_client.MongoClient.set_cursor_manager:12
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager:12
msgid "Deprecated, for real this time."
msgstr ""

#: of pymongo.cursor_manager:11
msgid ""
"Undeprecated. :meth:`~pymongo.cursor_manager.CursorManager.close` now "
"requires an `address` argument. The ``BatchCursorManager`` class is "
"removed."
msgstr ""

#: of pymongo.cursor_manager.CursorManager:1
msgid "Instantiate the manager."
msgstr ""

#: of pymongo.cursor_manager.CursorManager:4
msgid "`client`: a MongoClient"
msgstr ""

#: of pymongo.cursor_manager.CursorManager.close:1
msgid "Kill a cursor."
msgstr ""

#: of pymongo.cursor_manager.CursorManager.close:3
msgid "Raises TypeError if cursor_id is not an instance of (int, long)."
msgstr ""

#: of pymongo.cursor_manager.CursorManager.close:6
msgid "`cursor_id`: cursor id to close"
msgstr ""

#: of pymongo.cursor_manager.CursorManager.close:7
msgid "`address`: the cursor's server's (host, port) pair"
msgstr ""

#: of pymongo.cursor_manager.CursorManager.close:9
msgid "Now requires an `address` argument."
msgstr ""

#: ../../api/pymongo/database.rst:2
msgid ":mod:`database` -- Database level operations"
msgstr ""

#: of pymongo.database:1
msgid "Database level operations."
msgstr ""

#: of pymongo.auth.MECHANISMS:1
msgid "The authentication mechanisms supported by PyMongo."
msgstr ""

#: of pymongo.OFF:1
msgid "No database profiling."
msgstr ""

#: of pymongo.SLOW_ONLY:1
msgid "Only profile slow operations."
msgstr ""

#: of pymongo.ALL:1
msgid "Profile all operations."
msgstr ""

#: of pymongo.database.Database:1
msgid "Get a database by client and name."
msgstr ""

#: of pymongo.database.Database:3
msgid ""
"Raises :class:`TypeError` if `name` is not an instance of "
":class:`basestring` (:class:`str` in python 3). Raises "
":class:`~pymongo.errors.InvalidName` if `name` is not a valid database "
"name."
msgstr ""

#: of pymongo.database.Database:9
msgid "`client`: A :class:`~pymongo.mongo_client.MongoClient` instance."
msgstr ""

#: of pymongo.database.Database:10
msgid "`name`: The database name."
msgstr ""

#: of pymongo.database.Database:11
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`. If ``None`` (the default) "
"client.codec_options is used."
msgstr ""

#: of pymongo.database.Database:14
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) client.read_preference is used."
msgstr ""

#: of pymongo.database.Database:16
msgid ""
"`write_concern` (optional): An instance of "
":class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the default) "
"client.write_concern is used."
msgstr ""

#: of pymongo.database.Database:19
msgid ""
"`read_concern` (optional): An instance of "
":class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the default) "
"client.read_concern is used."
msgstr ""

#: of pymongo.database.Database:28
msgid ""
"Added the codec_options, read_preference, and write_concern options. "
":class:`~pymongo.database.Database` no longer returns an instance of "
":class:`~pymongo.collection.Collection` for attribute names with leading "
"underscores. You must use dict-style lookups instead::"
msgstr ""

#: of pymongo.database.Database:34
msgid "db['__my_collection__']"
msgstr ""

#: of pymongo.database.Database:38
msgid "db.__my_collection__"
msgstr ""

#: ../../api/pymongo/database.rst:17
msgid ""
"Get the `collection_name` :class:`~pymongo.collection.Collection` of "
":class:`Database` `db`."
msgstr ""

#: ../../api/pymongo/database.rst:23
msgid ""
"Use dictionary style access if `collection_name` is an attribute of the "
":class:`Database` class eg: db[`collection_name`]."
msgstr ""

#: of pymongo.database.Database.add_son_manipulator:1
msgid "Add a new son manipulator to this database."
msgstr ""

#: of pymongo.database.Database.add_son_manipulator:3
msgid "**DEPRECATED** - `add_son_manipulator` is deprecated."
msgstr ""

#: of pymongo.database.Database.add_son_manipulator:5
msgid "Deprecated add_son_manipulator."
msgstr ""

#: of pymongo.database.Database.add_user:1
msgid "**DEPRECATED**: Create user `name` with password `password`."
msgstr ""

#: of pymongo.database.Database.add_user:3
msgid "Add a new user with permissions for this :class:`Database`."
msgstr ""

#: of pymongo.database.Database.add_user:5
msgid "Will change the password if user `name` already exists."
msgstr ""

#: of pymongo.database.Database.add_user:7
msgid ""
"add_user is deprecated and will be removed in PyMongo 4.0. Starting with "
"MongoDB 2.6 user management is handled with four database commands, "
"createUser_, usersInfo_, updateUser_, and dropUser_."
msgstr ""

#: of pymongo.database.Database.add_user:12
msgid "To create a user::"
msgstr ""

#: of pymongo.database.Database.add_user:16
msgid "To create a read-only user::"
msgstr ""

#: of pymongo.database.Database.add_user:20
msgid "To change a password::"
msgstr ""

#: of pymongo.database.Database.add_user:24
msgid "Or change roles::"
msgstr ""

#: of pymongo.database.Database.add_user:33
msgid ""
"Never create or modify users over an insecure network without the use of "
"TLS. See :doc:`/examples/tls` for more information."
msgstr ""

#: of pymongo.database.Database.add_user:37
msgid "`name`: the name of the user to create"
msgstr ""

#: of pymongo.database.Database.add_user:38
msgid ""
"`password` (optional): the password of the user to create. Can not be "
"used with the ``userSource`` argument."
msgstr ""

#: of pymongo.database.Database.add_user:40
msgid "`read_only` (optional): if ``True`` the user will be read only"
msgstr ""

#: of pymongo.database.Database.add_user:41
msgid ""
"`**kwargs` (optional): optional fields for the user document (e.g. "
"``userSource``, ``otherDBRoles``, or ``roles``). See "
"`<http://docs.mongodb.org/manual/reference/privilege-documents>`_ for "
"more information."
msgstr ""

#: of pymongo.database.Database.add_user:48
msgid "Added support for SCRAM-SHA-256 users with MongoDB 4.0 and later."
msgstr ""

#: of pymongo.database.Database.add_user:51
msgid "Added ``session`` parameter. Deprecated add_user."
msgstr ""

#: of pymongo.database.Database.add_user:54
msgid "Added kwargs support for optional fields introduced in MongoDB 2.4"
msgstr ""

#: of pymongo.database.Database.add_user:57
msgid "Added support for read only users"
msgstr ""

#: of pymongo.database.Database.aggregate:1
msgid "Perform a database-level aggregation."
msgstr ""

#: of pymongo.database.Database.aggregate:3
msgid ""
"See the `aggregation pipeline`_ documentation for a list of stages that "
"are supported."
msgstr ""

#: of pymongo.database.Database.aggregate:24
msgid ""
"`batchSize` (int): The maximum number of documents to return per batch. "
"Ignored if the connected mongod or mongos does not support returning "
"aggregate results using a cursor."
msgstr ""

#: of pymongo.database.Database.aggregate:27
#: pymongo.database.Database.create_collection:38
msgid ""
"`collation` (optional): An instance of "
":class:`~pymongo.collation.Collation`."
msgstr ""

#: of pymongo.database.Database.aggregate:30
msgid ""
"The :meth:`aggregate` method obeys the :attr:`read_preference` of this "
":class:`Database`, except when ``$out`` or ``$merge`` are used, in which "
"case  :attr:`~pymongo.read_preferences.ReadPreference.PRIMARY` is used."
msgstr ""

#: of pymongo.database.Database.aggregate:35
msgid ""
"This method does not support the 'explain' option. Please use "
":meth:`~pymongo.database.Database.command` instead."
msgstr ""

#: of pymongo.database.Database.aggregate:38
msgid ""
"The :attr:`~pymongo.database.Database.write_concern` of this collection "
"is automatically applied to this operation."
msgstr ""

#: of pymongo.database.Database.authenticate:1
msgid "**DEPRECATED**: Authenticate to use this database."
msgstr ""

#: of pymongo.database.Database.authenticate:3
msgid ""
"Starting in MongoDB 3.6, calling :meth:`authenticate` invalidates all "
"existing cursors. It may also leave logical sessions open on the server "
"for up to 30 minutes until they time out."
msgstr ""

#: of pymongo.database.Database.authenticate:7
msgid ""
"Authentication lasts for the life of the underlying client instance, or "
"until :meth:`logout` is called."
msgstr ""

#: of pymongo.database.Database.authenticate:10
msgid ""
"Raises :class:`TypeError` if (required) `name`, (optional) `password`, or"
" (optional) `source` is not an instance of :class:`basestring` "
"(:class:`str` in python 3)."
msgstr ""

#: of pymongo.database.Database.authenticate:15
msgid ""
"This method authenticates the current connection, and will also cause all"
" new :class:`~socket.socket` connections in the underlying client "
"instance to be authenticated automatically."
msgstr ""

#: of pymongo.database.Database.authenticate:19
msgid ""
"Authenticating more than once on the same database with different "
"credentials is not supported. You must call :meth:`logout` before "
"authenticating with new credentials."
msgstr ""

#: of pymongo.database.Database.authenticate:23
msgid ""
"When sharing a client instance between multiple threads, all threads will"
" share the authentication. If you need different authentication profiles "
"for different purposes you must use distinct client instances."
msgstr ""

#: of pymongo.database.Database.authenticate:29
msgid ""
"`name`: the name of the user to authenticate. Optional when `mechanism` "
"is MONGODB-X509 and the MongoDB server version is >= 3.4."
msgstr ""

#: of pymongo.database.Database.authenticate:32
msgid ""
"`password` (optional): the password of the user to authenticate. Not used"
" with GSSAPI or MONGODB-X509 authentication."
msgstr ""

#: of pymongo.database.Database.authenticate:34
msgid ""
"`source` (optional): the database to authenticate on. If not specified "
"the current database is used."
msgstr ""

#: of pymongo.database.Database.authenticate:36
msgid ""
"`mechanism` (optional): See :data:`~pymongo.auth.MECHANISMS` for options."
" If no mechanism is specified, PyMongo automatically uses MONGODB-CR when"
" connected to a pre-3.0 version of MongoDB, SCRAM-SHA-1 when connected to"
" MongoDB 3.0 through 3.6, and negotiates the mechanism to use (SCRAM-"
"SHA-1 or SCRAM-SHA-256) when connected to MongoDB 4.0+."
msgstr ""

#: of pymongo.database.Database.authenticate:42
msgid ""
"`authMechanismProperties` (optional): Used to specify authentication "
"mechanism specific options. To specify the service name for GSSAPI "
"authentication pass ``authMechanismProperties='SERVICE_NAME:<service "
"name>'``. To specify the session token for MONGODB-AWS authentication "
"pass ``authMechanismProperties='AWS_SESSION_TOKEN:<session token>'``."
msgstr ""

#: of pymongo.database.Database.authenticate:49
msgid "Added support for SCRAM-SHA-256 with MongoDB 4.0 and later."
msgstr ""

#: of pymongo.database.Database.authenticate:52
msgid ""
"Deprecated. Authenticating multiple users conflicts with support for "
"logical sessions in MongoDB 3.6. To authenticate as multiple users, "
"create multiple instances of MongoClient."
msgstr ""

#: of pymongo.database.Database.authenticate:57
msgid "Use SCRAM-SHA-1 with MongoDB 3.0 and later."
msgstr ""

#: of pymongo.database.Database.authenticate:60
msgid ""
"Added the `source` and `mechanism` parameters. :meth:`authenticate` now "
"raises a subclass of :class:`~pymongo.errors.PyMongoError` if "
"authentication fails due to invalid credentials or configuration issues."
msgstr ""

#: of pymongo.database.Database.client:1
msgid "The client instance for this :class:`Database`."
msgstr ""

#: of pymongo.database.Database.collection_names:1
msgid "**DEPRECATED**: Get a list of all the collection names in this database."
msgstr ""

#: of pymongo.database.Database.collection_names:5
msgid ""
"`include_system_collections` (optional): if ``False`` list will not "
"include system collections (e.g ``system.indexes``)"
msgstr ""

#: of pymongo.database.Database.collection_names:10
msgid "Deprecated. Use :meth:`list_collection_names` instead."
msgstr ""

#: of pymongo.database.Database.command:1
msgid "Issue a MongoDB command."
msgstr ""

#: of pymongo.database.Database.command:3
msgid ""
"Send command `command` to the database and return the response. If "
"`command` is an instance of :class:`basestring` (:class:`str` in python "
"3) then the command {`command`: `value`} will be sent. Otherwise, "
"`command` must be an instance of :class:`dict` and will be sent as is."
msgstr ""

#: of pymongo.database.Database.command:9
msgid ""
"Any additional keyword arguments will be added to the final command "
"document before it is sent."
msgstr ""

#: of pymongo.database.Database.command:12
msgid "For example, a command like ``{buildinfo: 1}`` can be sent using:"
msgstr ""

#: of pymongo.database.Database.command:17
msgid ""
"For a command where the value matters, like ``{collstats: "
"collection_name}`` we can do:"
msgstr ""

#: of pymongo.database.Database.command:22
msgid ""
"For commands that take additional arguments we can use kwargs. So "
"``{filemd5: object_id, root: file_root}`` becomes:"
msgstr ""

#: of pymongo.database.Database.command:28
msgid ""
"`command`: document representing the command to be issued, or the name of"
" the command (for simple commands only)."
msgstr ""

#: of pymongo.database.Database.command:31
msgid ""
"the order of keys in the `command` document is significant (the \"verb\" "
"must come first), so commands which require multiple keys (e.g. "
"`findandmodify`) should use an instance of :class:`~bson.son.SON` or a "
"string and kwargs instead of a Python `dict`."
msgstr ""

#: of pymongo.database.Database.command:37
msgid ""
"`value` (optional): value to use for the command verb when `command` is "
"passed as a string"
msgstr ""

#: of pymongo.database.Database.command:39
msgid ""
"`check` (optional): check the response for errors, raising "
":class:`~pymongo.errors.OperationFailure` if there are any"
msgstr ""

#: of pymongo.database.Database.command:41
msgid ""
"`allowable_errors`: if `check` is ``True``, error messages in this list "
"will be ignored by error-checking"
msgstr ""

#: of pymongo.database.Database.command:43
msgid ""
"`read_preference` (optional): The read preference for this operation. See"
" :mod:`~pymongo.read_preferences` for options. If the provided `session` "
"is in a transaction, defaults to the read preference configured for the "
"transaction. Otherwise, defaults to "
":attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`."
msgstr ""

#: of pymongo.database.Database.command:49
msgid "`codec_options`: A :class:`~bson.codec_options.CodecOptions` instance."
msgstr ""

#: of pymongo.database.Database.command:51
msgid "`session` (optional): A :class:`~pymongo.client_session.ClientSession`."
msgstr ""

#: of pymongo.database.Database.command:53
msgid ""
"`**kwargs` (optional): additional keyword arguments will be added to the "
"command document before it is sent"
msgstr ""

#: of pymongo.database.Database.command:56
msgid ""
":meth:`command` does **not** obey this Database's :attr:`read_preference`"
" or :attr:`codec_options`. You must use the `read_preference` and "
"`codec_options` parameters instead."
msgstr ""

#: of pymongo.database.Database.command:60
msgid ""
":meth:`command` does **not** apply any custom TypeDecoders when decoding "
"the command response."
msgstr ""

#: of pymongo.database.Database.command:66
msgid ""
"Removed the `as_class`, `fields`, `uuid_subtype`, `tag_sets`, and "
"`secondary_acceptable_latency_ms` option. Removed `compile_re` option: "
"PyMongo now always represents BSON regular expressions as "
":class:`~bson.regex.Regex` objects. Use "
":meth:`~bson.regex.Regex.try_compile` to attempt to convert from a BSON "
"regular expression to a Python regular expression object. Added the "
"`codec_options` parameter."
msgstr ""

#: of pymongo.database.Database.command:82
msgid "Added `tag_sets` and `secondary_acceptable_latency_ms` options."
msgstr ""

#: of pymongo.database.Database.command:84
msgid ""
"Added support for `as_class` - the class you want to use for the "
"resulting documents"
msgstr ""

#: of pymongo.database.Database.create_collection:1
msgid "Create a new :class:`~pymongo.collection.Collection` in this database."
msgstr ""

#: of pymongo.database.Database.create_collection:4
msgid ""
"Normally collection creation is automatic. This method should only be "
"used to specify options on creation. "
":class:`~pymongo.errors.CollectionInvalid` will be raised if the "
"collection already exists."
msgstr ""

#: of pymongo.database.Database.create_collection:9
msgid ""
"Options should be passed as keyword arguments to this method. Supported "
"options vary with MongoDB release. Some examples include:"
msgstr ""

#: of pymongo.database.Database.create_collection:12
msgid ""
"\"size\": desired initial size for the collection (in bytes). For capped "
"collections this size is the max size of the collection."
msgstr ""

#: of pymongo.database.Database.create_collection:15
msgid "\"capped\": if True, this is a capped collection"
msgstr ""

#: of pymongo.database.Database.create_collection:16
msgid "\"max\": maximum number of objects if capped (optional)"
msgstr ""

#: of pymongo.database.Database.create_collection:22
msgid "`name`: the name of the collection to create"
msgstr ""

#: of pymongo.database.Database.create_collection:23
#: pymongo.database.Database.get_collection:21
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`. If ``None`` (the default) the "
":attr:`codec_options` of this :class:`Database` is used."
msgstr ""

#: of pymongo.database.Database.create_collection:27
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) the :attr:`read_preference` of this :class:`Database` is "
"used."
msgstr ""

#: of pymongo.database.Database.create_collection:30
#: pymongo.database.Database.get_collection:29
msgid ""
"`write_concern` (optional): An instance of "
":class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the default) "
"the :attr:`write_concern` of this :class:`Database` is used."
msgstr ""

#: of pymongo.database.Database.create_collection:34
#: pymongo.database.Database.get_collection:33
msgid ""
"`read_concern` (optional): An instance of "
":class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the default) the"
" :attr:`read_concern` of this :class:`Database` is used."
msgstr ""

#: of pymongo.database.Database.create_collection:45
msgid ""
"This method is now supported inside multi-document transactions with "
"MongoDB 4.4+."
msgstr ""

#: of pymongo.database.Database.create_collection:52
msgid "Added the collation option."
msgstr ""

#: of pymongo.database.Database.create_collection:55
msgid "Added the codec_options, read_preference, and write_concern options."
msgstr ""

#: of pymongo.database.Database.current_op:1
msgid "**DEPRECATED**: Get information on operations currently running."
msgstr ""

#: of pymongo.database.Database.current_op:3
msgid ""
"Starting with MongoDB 3.6 this helper is obsolete. The functionality "
"provided by this helper is available in MongoDB 3.6+ using the "
"`$currentOp aggregation pipeline stage`_, which can be used with "
":meth:`aggregate`. Note that, while this helper can only return a single "
"document limited to a 16MB result, :meth:`aggregate` returns a cursor "
"avoiding that limitation."
msgstr ""

#: of pymongo.database.Database.current_op:10
msgid ""
"Users of MongoDB versions older than 3.6 can use the `currentOp command`_"
" directly::"
msgstr ""

#: of pymongo.database.Database.current_op:16
msgid "Or query the \"inprog\" virtual collection::"
msgstr ""

#: of pymongo.database.Database.current_op:22
msgid ""
"`include_all` (optional): if ``True`` also list currently idle operations"
" in the result"
msgstr ""

#: of pymongo.database.Database.dereference:1
msgid ""
"Dereference a :class:`~bson.dbref.DBRef`, getting the document it points "
"to."
msgstr ""

#: of pymongo.database.Database.dereference:4
msgid ""
"Raises :class:`TypeError` if `dbref` is not an instance of "
":class:`~bson.dbref.DBRef`. Returns a document, or ``None`` if the "
"reference does not point to a valid document.  Raises :class:`ValueError`"
" if `dbref` has a database specified that is different from the current "
"database."
msgstr ""

#: of pymongo.database.Database.dereference:11
msgid "`dbref`: the reference"
msgstr ""

#: of pymongo.database.Database.dereference:14
msgid ""
"`**kwargs` (optional): any additional keyword arguments are the same as "
"the arguments to :meth:`~pymongo.collection.Collection.find`."
msgstr ""

#: of pymongo.database.Database.drop_collection:1
msgid "Drop a collection."
msgstr ""

#: of pymongo.database.Database.drop_collection:4
msgid ""
"`name_or_collection`: the name of a collection to drop or the collection "
"object itself"
msgstr ""

#: of pymongo.database.Database.drop_collection:9
msgid ""
"The :attr:`~pymongo.database.Database.write_concern` of this database is "
"automatically applied to this operation when using MongoDB >= 3.4."
msgstr ""

#: of pymongo.database.Database.drop_collection:16
msgid ""
"Apply this database's write concern automatically to this operation when "
"connected to MongoDB >= 3.4."
msgstr ""

#: of pymongo.database.Database.error:1
msgid "**DEPRECATED**: Get the error if one occurred on the last operation."
msgstr ""

#: of pymongo.database.Database.error:3 pymongo.database.Database.last_status:3
#: pymongo.database.Database.previous_error:3
#: pymongo.database.Database.reset_error_history:3
msgid ""
"This method is obsolete: all MongoDB write operations (insert, update, "
"remove, and so on) use the write concern ``w=1`` and report their errors "
"by default."
msgstr ""

#: of pymongo.database.Database.eval:1
msgid "**DEPRECATED**: Evaluate a JavaScript expression in MongoDB."
msgstr ""

#: of pymongo.database.Database.eval:4
msgid "`code`: string representation of JavaScript code to be evaluated"
msgstr ""

#: of pymongo.database.Database.eval:6
msgid ""
"`args` (optional): additional positional arguments are passed to the "
"`code` being evaluated"
msgstr ""

#: of pymongo.database.Database.eval:9
msgid ""
"the eval command is deprecated in MongoDB 3.0 and will be removed in a "
"future server version."
msgstr ""

#: of pymongo.database.Database.get_collection:1
msgid ""
"Get a :class:`~pymongo.collection.Collection` with the given name and "
"options."
msgstr ""

#: of pymongo.database.Database.get_collection:4
msgid ""
"Useful for creating a :class:`~pymongo.collection.Collection` with "
"different codec options, read preference, and/or write concern from this "
":class:`Database`."
msgstr ""

#: of pymongo.database.Database.get_collection:20
msgid "`name`: The name of the collection - a string."
msgstr ""

#: of pymongo.database.Database.get_collection:25
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) the :attr:`read_preference` of this :class:`Database` is "
"used. See :mod:`~pymongo.read_preferences` for options."
msgstr ""

#: of pymongo.database.Database.incoming_copying_manipulators:1
msgid "**DEPRECATED**: All incoming SON copying manipulators."
msgstr ""

#: of pymongo.database.Database.incoming_manipulators:1
msgid "**DEPRECATED**: All incoming SON manipulators."
msgstr ""

#: of pymongo.database.Database.last_status:1
msgid "**DEPRECATED**: Get status information from the last operation."
msgstr ""

#: of pymongo.database.Database.last_status:7
msgid "Returns a SON object with status information."
msgstr ""

#: of pymongo.database.Database.list_collection_names:1
msgid "Get a list of all the collection names in this database."
msgstr ""

#: of pymongo.database.Database.list_collection_names:3
msgid "For example, to list all non-system collections::"
msgstr ""

#: of pymongo.database.Database.list_collection_names:11
#: pymongo.database.Database.list_collections:6
msgid ""
"`filter` (optional):  A query document to filter the list of collections "
"returned from the listCollections command."
msgstr ""

#: of pymongo.database.Database.list_collection_names:13
#: pymongo.database.Database.list_collections:8
msgid ""
"`**kwargs` (optional): Optional parameters of the `listCollections "
"command "
"<https://docs.mongodb.com/manual/reference/command/listCollections/>`_ "
"can be passed as keyword arguments to this method. The supported options "
"differ by server version."
msgstr ""

#: of pymongo.database.Database.list_collection_names:19
msgid "Added the ``filter`` and ``**kwargs`` parameters."
msgstr ""

#: of pymongo.database.Database.list_collections:1
msgid "Get a cursor over the collectons of this database."
msgstr ""

#: of pymongo.database.Database.logout:1
msgid "**DEPRECATED**: Deauthorize use of this database."
msgstr ""

#: of pymongo.database.Database.logout:3
msgid ""
"Starting in MongoDB 3.6, calling :meth:`logout` invalidates all existing "
"cursors. It may also leave logical sessions open on the server for up to "
"30 minutes until they time out."
msgstr ""

#: of pymongo.database.Database.name:1
msgid "The name of this :class:`Database`."
msgstr ""

#: of pymongo.database.Database.outgoing_copying_manipulators:1
msgid "**DEPRECATED**: All outgoing SON copying manipulators."
msgstr ""

#: of pymongo.database.Database.outgoing_manipulators:1
msgid "**DEPRECATED**: All outgoing SON manipulators."
msgstr ""

#: of pymongo.database.Database.previous_error:1
msgid "**DEPRECATED**: Get the most recent error on this database."
msgstr ""

#: of pymongo.database.Database.previous_error:7
msgid ""
"Only returns errors that have occurred since the last call to "
":meth:`reset_error_history`. Returns None if no such errors have "
"occurred."
msgstr ""

#: of pymongo.database.Database.profiling_info:1
msgid "Returns a list containing current profiling information."
msgstr ""

#: of pymongo.database.Database.profiling_level:1
msgid "Get the database's current profiling level."
msgstr ""

#: of pymongo.database.Database.profiling_level:3
msgid ""
"Returns one of (:data:`~pymongo.OFF`, :data:`~pymongo.SLOW_ONLY`, "
":data:`~pymongo.ALL`)."
msgstr ""

#: of pymongo.database.Database.remove_user:1
msgid "**DEPRECATED**: Remove user `name` from this :class:`Database`."
msgstr ""

#: of pymongo.database.Database.remove_user:3
msgid ""
"User `name` will no longer have permissions to access this "
":class:`Database`."
msgstr ""

#: of pymongo.database.Database.remove_user:6
msgid ""
"remove_user is deprecated and will be removed in PyMongo 4.0. Use the "
"dropUser command instead::"
msgstr ""

#: of pymongo.database.Database.remove_user:12
msgid "`name`: the name of the user to remove"
msgstr ""

#: of pymongo.database.Database.remove_user:16
msgid "Added ``session`` parameter. Deprecated remove_user."
msgstr ""

#: of pymongo.database.Database.reset_error_history:1
msgid "**DEPRECATED**: Reset the error history of this database."
msgstr ""

#: of pymongo.database.Database.reset_error_history:7
msgid ""
"Calls to :meth:`previous_error` will only return errors that have "
"occurred since the most recent call to this method."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:1
msgid "Set the database's profiling level."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:4
msgid "`level`: Specifies a profiling level, see list of possible values below."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:6
msgid ""
"`slow_ms`: Optionally modify the threshold for the profile to consider a "
"query or operation.  Even if the profiler is off queries slower than the "
"`slow_ms` level will get written to the logs."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:12
msgid "Possible `level` values:"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:15
msgid "Level"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:15
msgid "Setting"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:17
msgid ":data:`~pymongo.OFF`"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:17
msgid "Off. No profiling."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:19
msgid ":data:`~pymongo.SLOW_ONLY`"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:19
msgid "On. Only includes slow operations."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:21
msgid ":data:`~pymongo.ALL`"
msgstr ""

#: of pymongo.database.Database.set_profiling_level:21
msgid "On. Includes all operations."
msgstr ""

#: of pymongo.database.Database.set_profiling_level:24
msgid ""
"Raises :class:`ValueError` if level is not one of (:data:`~pymongo.OFF`, "
":data:`~pymongo.SLOW_ONLY`, :data:`~pymongo.ALL`)."
msgstr ""

#: of pymongo.database.Database.system_js:1
msgid "**DEPRECATED**: :class:`SystemJS` helper for this :class:`Database`."
msgstr ""

#: of pymongo.database.Database.system_js:3
msgid "See the documentation for :class:`SystemJS` for more details."
msgstr ""

#: of pymongo.database.Database.validate_collection:1
msgid "Validate a collection."
msgstr ""

#: of pymongo.database.Database.validate_collection:3
msgid ""
"Returns a dict of validation info. Raises CollectionInvalid if validation"
" fails."
msgstr ""

#: of pymongo.database.Database.validate_collection:6
msgid "See also the MongoDB documentation on the `validate command`_."
msgstr ""

#: of pymongo.database.Database.validate_collection:9
msgid ""
"`name_or_collection`: A Collection object or the name of a collection to "
"validate."
msgstr ""

#: of pymongo.database.Database.validate_collection:11
msgid ""
"`scandata`: Do extra checks beyond checking the overall structure of the "
"collection."
msgstr ""

#: of pymongo.database.Database.validate_collection:13
msgid ""
"`full`: Have the server do a more thorough scan of the collection. Use "
"with `scandata` for a thorough scan of the structure of the collection "
"and the individual documents."
msgstr ""

#: of pymongo.database.Database.validate_collection:19
msgid ""
"`background` (optional): A boolean flag that determines whether the "
"command runs in the background. Requires MongoDB 4.4+."
msgstr ""

#: of pymongo.database.Database.validate_collection:22
msgid "Added ``background`` parameter."
msgstr ""

#: of pymongo.database.Database.watch:1
msgid "Watch changes on this database."
msgstr ""

#: of pymongo.database.Database.watch:3
msgid ""
"Performs an aggregation with an implicit initial ``$changeStream`` stage "
"and returns a :class:`~pymongo.change_stream.DatabaseChangeStream` cursor"
" which iterates over changes on all collections in this database."
msgstr ""

#: of pymongo.database.Database.watch:8
#: pymongo.mongo_client.MongoClient.watch:8
msgid "Introduced in MongoDB 4.0."
msgstr ""

#: of pymongo.database.Database.watch:16
msgid ""
"The :class:`~pymongo.change_stream.DatabaseChangeStream` iterable blocks "
"until the next change document is returned or an error is raised. If the "
":meth:`~pymongo.change_stream.DatabaseChangeStream.next` method "
"encounters a network error when retrieving a batch from the server, it "
"will automatically attempt to recreate the cursor such that no change "
"events are missed. Any error encountered during the resume attempt "
"indicates there may be an outage and will be raised."
msgstr ""

#: of pymongo.database.Database.watch:73
msgid "A :class:`~pymongo.change_stream.DatabaseChangeStream` cursor."
msgstr ""

#: of pymongo.database.Database.with_options:1
msgid "Get a clone of this database changing the specified settings."
msgstr ""

#: of pymongo.database.SystemJS:1
msgid "**DEPRECATED**: Get a system js helper for the database `database`."
msgstr ""

#: of pymongo.database.SystemJS:3
msgid "SystemJS will be removed in PyMongo 4.0."
msgstr ""

#: of pymongo.database.SystemJS.list:1
msgid "Get a list of the names of the functions stored in this database."
msgstr ""

#: ../../api/pymongo/driver_info.rst:2
msgid ":mod:`driver_info`"
msgstr ""

#: of pymongo.driver_info:1
msgid "Advanced options for MongoDB drivers implemented on top of PyMongo."
msgstr ""

#: of pymongo.driver_info.DriverInfo:1
msgid "Create new instance of DriverInfo(name, version, platform)"
msgstr ""

#: ../../api/pymongo/encryption.rst:2
msgid ":mod:`encryption` -- Client-Side Field Level Encryption"
msgstr ""

#: of pymongo.encryption:1
msgid "Support for explicit client-side field level encryption."
msgstr ""

#: of pymongo.encryption.Algorithm:1
msgid "An enum that defines the supported encryption algorithms."
msgstr ""

#: of pymongo.encryption.ClientEncryption:1
msgid "Explicit client-side field level encryption."
msgstr ""

#: of pymongo.encryption.ClientEncryption:3
msgid ""
"The ClientEncryption class encapsulates explicit operations on a key "
"vault collection that cannot be done directly on a MongoClient. Similar "
"to configuring auto encryption on a MongoClient, it is constructed with a"
" MongoClient (to a MongoDB cluster containing the key vault collection), "
"KMS provider configuration, and keyVaultNamespace. It provides an API for"
" explicitly encrypting and decrypting values, and creating data keys. It "
"does not provide an API to query keys from the key vault collection, as "
"this can be done directly on the MongoClient."
msgstr ""

#: of pymongo.encryption.ClientEncryption:12
msgid "See :ref:`explicit-client-side-encryption` for an example."
msgstr ""

#: of pymongo.encryption.ClientEncryption:15
#: pymongo.encryption_options.AutoEncryptionOpts:18
msgid ""
"`kms_providers`: Map of KMS provider options. Two KMS providers are "
"supported: \"aws\" and \"local\". The kmsProviders map values differ by "
"provider:"
msgstr ""

#: of pymongo.encryption.ClientEncryption:19
#: pymongo.encryption_options.AutoEncryptionOpts:22
msgid ""
"`aws`: Map with \"accessKeyId\" and \"secretAccessKey\" as strings. These"
" are the AWS access key ID and AWS secret access key used to generate KMS"
" messages."
msgstr ""

#: of pymongo.encryption.ClientEncryption:22
#: pymongo.encryption_options.AutoEncryptionOpts:25
msgid ""
"`local`: Map with \"key\" as a 96-byte array or string. \"key\" is the "
"master key used to encrypt/decrypt data keys. This key should be "
"generated and stored as securely as possible."
msgstr ""

#: of pymongo.encryption.ClientEncryption:26
#: pymongo.encryption_options.AutoEncryptionOpts:29
msgid ""
"`key_vault_namespace`: The namespace for the key vault collection. The "
"key vault collection contains all data keys used for encryption and "
"decryption. Data keys are stored as documents in this MongoDB collection."
" Data keys are protected with encryption by a KMS provider."
msgstr ""

#: of pymongo.encryption.ClientEncryption:31
msgid ""
"`key_vault_client`: A MongoClient connected to a MongoDB cluster "
"containing the `key_vault_namespace` collection."
msgstr ""

#: of pymongo.encryption.ClientEncryption:33
msgid ""
"`codec_options`: An instance of :class:`~bson.codec_options.CodecOptions`"
" to use when encoding a value for encryption and decoding the decrypted "
"BSON value. This should be the same CodecOptions instance configured on "
"the MongoClient, Database, or Collection used to access application data."
msgstr ""

#: of pymongo.encryption.ClientEncryption.close:1
msgid "Release resources."
msgstr ""

#: of pymongo.encryption.ClientEncryption.close:3
msgid ""
"Note that using this class in a with-statement will automatically call "
":meth:`close`::"
msgstr ""

#: of pymongo.encryption.ClientEncryption.create_data_key:1
msgid "Create and insert a new data key into the key vault collection."
msgstr ""

#: of pymongo.encryption.ClientEncryption.create_data_key:4
msgid ""
"`kms_provider`: The KMS provider to use. Supported values are \"aws\" and"
" \"local\"."
msgstr ""

#: of pymongo.encryption.ClientEncryption.create_data_key:6
msgid ""
"`master_key`: Identifies a KMS-specific key used to encrypt the new data "
"key. If the kmsProvider is \"local\" the `master_key` is not applicable "
"and may be omitted. If the `kms_provider` is \"aws\" it is required and "
"has the following fields::"
msgstr ""

#: of pymongo.encryption.ClientEncryption.create_data_key:18
msgid ""
"`key_alt_names` (optional): An optional list of string alternate names "
"used to reference a key. If a key is created with alternate names, then "
"encryption may refer to the key by the unique alternate name instead of "
"by ``key_id``. The following example shows creating and referring to a "
"data key by alternate name::"
msgstr ""

#: of pymongo.encryption.ClientEncryption.create_data_key:30
msgid ""
"The ``_id`` of the created data key document as a "
":class:`~bson.binary.Binary` with subtype "
":data:`~bson.binary.UUID_SUBTYPE`."
msgstr ""

#: of pymongo.encryption.ClientEncryption.decrypt:1
msgid "Decrypt an encrypted value."
msgstr ""

#: of pymongo.encryption.ClientEncryption.decrypt:4
msgid ""
"`value` (Binary): The encrypted value, a :class:`~bson.binary.Binary` "
"with subtype 6."
msgstr ""

#: of pymongo.encryption.ClientEncryption.decrypt:8
msgid "The decrypted BSON value."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:1
msgid "Encrypt a BSON value with a given key and algorithm."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:3
msgid "Note that exactly one of ``key_id`` or  ``key_alt_name`` must be provided."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:7
msgid "`value`: The BSON value to encrypt."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:8
msgid ""
"`algorithm` (string): The encryption algorithm to use. See "
":class:`Algorithm` for some valid options."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:10
msgid ""
"`key_id`: Identifies a data key by ``_id`` which must be a "
":class:`~bson.binary.Binary` with subtype 4 ( "
":attr:`~bson.binary.UUID_SUBTYPE`)."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:13
msgid "`key_alt_name`: Identifies a key vault document by 'keyAltName'."
msgstr ""

#: of pymongo.encryption.ClientEncryption.encrypt:16
msgid "The encrypted value, a :class:`~bson.binary.Binary` with subtype 6."
msgstr ""

#: ../../api/pymongo/encryption_options.rst:2
msgid ":mod:`encryption_options` -- Automatic Client-Side Field Level Encryption"
msgstr ""

#: of pymongo.encryption_options:1
msgid "Support for automatic client-side field level encryption."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:1
msgid "Options to configure automatic client-side field level encryption."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:3
msgid ""
"Automatic client-side field level encryption requires MongoDB 4.2 "
"enterprise or a MongoDB 4.2 Atlas cluster. Automatic encryption is not "
"supported for operations on a database or view and will result in error."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:8
msgid ""
"Although automatic encryption requires MongoDB 4.2 enterprise or a "
"MongoDB 4.2 Atlas cluster, automatic *decryption* is supported for all "
"users. To configure automatic *decryption* without automatic *encryption*"
" set ``bypass_auto_encryption=True``. Explicit encryption and explicit "
"decryption is also supported for all users with the "
":class:`~pymongo.encryption.ClientEncryption` class."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:15
msgid "See :ref:`automatic-client-side-encryption` for an example."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:34
msgid ""
"`key_vault_client` (optional): By default the key vault collection is "
"assumed to reside in the same MongoDB cluster as the encrypted "
"MongoClient. Use this option to route data key queries to a separate "
"MongoDB cluster."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:38
msgid ""
"`schema_map` (optional): Map of collection namespace (\"db.coll\") to "
"JSON Schema.  By default, a collection's JSONSchema is periodically "
"polled with the listCollections command. But a JSONSchema may be "
"specified locally with the schemaMap option."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:43
msgid ""
"**Supplying a `schema_map` provides more security than relying on JSON "
"Schemas obtained from the server. It protects against a malicious server "
"advertising a false JSON Schema, which could trick the client into "
"sending unencrypted data that should be encrypted.**"
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:49
msgid ""
"Schemas supplied in the schemaMap only apply to configuring automatic "
"encryption for client side encryption. Other validation rules in the JSON"
" schema will not be enforced by the driver and will result in an error."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:53
msgid ""
"`bypass_auto_encryption` (optional): If ``True``, automatic encryption "
"will be disabled but automatic decryption will still be enabled. Defaults"
" to ``False``."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:56
msgid ""
"`mongocryptd_uri` (optional): The MongoDB URI used to connect to the "
"*local* mongocryptd process. Defaults to ``'mongodb://localhost:27020'``."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:59
msgid ""
"`mongocryptd_bypass_spawn` (optional): If ``True``, the encrypted "
"MongoClient will not attempt to spawn the mongocryptd process. Defaults "
"to ``False``."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:62
msgid ""
"`mongocryptd_spawn_path` (optional): Used for spawning the mongocryptd "
"process. Defaults to ``'mongocryptd'`` and spawns mongocryptd from the "
"system path."
msgstr ""

#: of pymongo.encryption_options.AutoEncryptionOpts:65
msgid ""
"`mongocryptd_spawn_args` (optional): A list of string arguments to use "
"when spawning the mongocryptd process. Defaults to ``['--"
"idleShutdownTimeoutSecs=60']``. If the list does not include the "
"``idleShutdownTimeoutSecs`` option then ``'--"
"idleShutdownTimeoutSecs=60'`` will be added."
msgstr ""

#: ../../api/pymongo/errors.rst:2
msgid ":mod:`errors` -- Exceptions raised by the :mod:`pymongo` package"
msgstr ""

#: of pymongo.errors:1
msgid "Exceptions raised by PyMongo."
msgstr ""

#: of pymongo.errors.AutoReconnect:1
msgid ""
"Raised when a connection to the database is lost and an attempt to auto-"
"reconnect will be made."
msgstr ""

#: of pymongo.errors.AutoReconnect:4
msgid ""
"In order to auto-reconnect you must handle this exception, recognizing "
"that the operation which caused it has not necessarily succeeded. Future "
"operations will attempt to open a new connection to the database (and "
"will continue to raise this exception until the first successful "
"connection is made)."
msgstr ""

#: of pymongo.errors.AutoReconnect:10
msgid "Subclass of :exc:`~pymongo.errors.ConnectionFailure`."
msgstr ""

#: of pymongo.errors.BulkWriteError:1
msgid "Exception class for bulk write errors."
msgstr ""

#: of pymongo.errors.CollectionInvalid:1
msgid "Raised when collection validation fails."
msgstr ""

#: of pymongo.errors.ConfigurationError:1
msgid "Raised when something is incorrectly configured."
msgstr ""

#: of pymongo.errors.ConnectionFailure:1
msgid "Raised when a connection to the database cannot be made or is lost."
msgstr ""

#: of pymongo.errors.CursorNotFound:1
msgid ""
"Raised while iterating query results if the cursor is invalidated on the "
"server."
msgstr ""

#: of pymongo.errors.DocumentTooLarge:1
msgid "Raised when an encoded document is too large for the connected server."
msgstr ""

#: of pymongo.errors.DuplicateKeyError:1
msgid "Raised when an insert or update fails due to a duplicate key error."
msgstr ""

#: of pymongo.errors.EncryptionError:1
msgid "Raised when encryption or decryption fails."
msgstr ""

#: of pymongo.errors.EncryptionError:3
msgid ""
"This error always wraps another exception which can be retrieved via the "
":attr:`cause` property."
msgstr ""

#: of pymongo.errors.EncryptionError.cause:1
msgid "The exception that caused this encryption or decryption error."
msgstr ""

#: of pymongo.errors.ExceededMaxWaiters:1
msgid ""
"Raised when a thread tries to get a connection from a pool and "
"``maxPoolSize * waitQueueMultiple`` threads are already waiting."
msgstr ""

#: of pymongo.errors.ExecutionTimeout:1
msgid ""
"Raised when a database operation times out, exceeding the $maxTimeMS set "
"in the query or command option."
msgstr ""

#: of pymongo.errors.ExecutionTimeout:4
msgid "Requires server version **>= 2.6.0**"
msgstr ""

#: of pymongo.errors.InvalidName:1
msgid "Raised when an invalid name is used."
msgstr ""

#: of pymongo.errors.InvalidOperation:1
msgid "Raised when a client attempts to perform an invalid operation."
msgstr ""

#: of pymongo.errors.InvalidURI:1
msgid "Raised when trying to parse an invalid mongodb URI."
msgstr ""

#: of pymongo.errors.NetworkTimeout:1
msgid "An operation on an open connection exceeded socketTimeoutMS."
msgstr ""

#: of pymongo.errors.NetworkTimeout:3
msgid ""
"The remaining connections in the pool stay open. In the case of a write "
"operation, you cannot know whether it succeeded or failed."
msgstr ""

#: of pymongo.errors.NetworkTimeout:6 pymongo.errors.NotMasterError:11
msgid "Subclass of :exc:`~pymongo.errors.AutoReconnect`."
msgstr ""

#: of pymongo.errors.NotMasterError:1
msgid "The server responded \"not master\" or \"node is recovering\"."
msgstr ""

#: of pymongo.errors.NotMasterError:3
msgid ""
"These errors result from a query, write, or command. The operation failed"
" because the client thought it was using the primary but the primary has "
"stepped down, or the client thought it was using a healthy secondary but "
"the secondary is stale and trying to recover."
msgstr ""

#: of pymongo.errors.NotMasterError:8
msgid ""
"The client launches a refresh operation on a background thread, to update"
" its view of the server as soon as possible after throwing this "
"exception."
msgstr ""

#: of pymongo.errors.OperationFailure:1
msgid "Raised when a database operation fails."
msgstr ""

#: of pymongo.errors.OperationFailure:3
msgid "The :attr:`details` attribute."
msgstr ""

#: of pymongo.errors.OperationFailure.code:1
msgid "The error code returned by the server, if any."
msgstr ""

#: of pymongo.errors.OperationFailure.details:1
msgid "The complete error document returned by the server."
msgstr ""

#: of pymongo.errors.OperationFailure.details:3
msgid ""
"Depending on the error that occurred, the error document may include "
"useful information beyond just the error message. When connected to a "
"mongos the error document may contain one or more subdocuments if errors "
"occurred on multiple shards."
msgstr ""

#: of pymongo.errors.ProtocolError:1
msgid "Raised for failures related to the wire protocol."
msgstr ""

#: of pymongo.errors.PyMongoError:1
msgid "Base class for all PyMongo exceptions."
msgstr ""

#: of pymongo.errors.PyMongoError.has_error_label:1
msgid "Return True if this error contains the given label."
msgstr ""

#: of pymongo.errors.ServerSelectionTimeoutError:1
msgid "Thrown when no MongoDB server is available for an operation"
msgstr ""

#: of pymongo.errors.ServerSelectionTimeoutError:3
msgid ""
"If there is no suitable server for an operation PyMongo tries for "
"``serverSelectionTimeoutMS`` (default 30 seconds) to find one, then "
"throws this exception. For example, it is thrown after attempting an "
"operation when PyMongo cannot connect to any server, or if you attempt an"
" insert into a replica set that has no primary and does not elect one "
"within the timeout window, or if you attempt to query with a Read "
"Preference that the replica set cannot satisfy."
msgstr ""

#: of pymongo.errors.WTimeoutError:1
msgid ""
"Raised when a database operation times out (i.e. wtimeout expires) before"
" replication completes."
msgstr ""

#: of pymongo.errors.WTimeoutError:4
msgid ""
"With newer versions of MongoDB the `details` attribute may include write "
"concern fields like 'n', 'updatedExisting', or 'writtenTo'."
msgstr ""

#: of pymongo.errors.WriteConcernError:1
msgid "Base exception type for errors raised due to write concern."
msgstr ""

#: of pymongo.errors.WriteError:1
msgid "Base exception type for errors raised during write operations."
msgstr ""

#: ../../api/pymongo/event_loggers.rst:2
msgid ":mod:`event_loggers` -- Example loggers"
msgstr ""

#: of pymongo.event_loggers:1
msgid "Example event logger classes."
msgstr ""

#: of pymongo.event_loggers:5
msgid ""
"These loggers can be registered using :func:`register` or "
":class:`~pymongo.mongo_client.MongoClient`."
msgstr ""

#: of pymongo.event_loggers:8
msgid "``monitoring.register(CommandLogger())``"
msgstr ""

#: of pymongo.event_loggers:10
msgid "or"
msgstr ""

#: of pymongo.event_loggers:12
msgid "``MongoClient(event_listeners=[CommandLogger()])``"
msgstr ""

#: of pymongo.event_loggers.CommandLogger:1
msgid "A simple listener that logs command events."
msgstr ""

#: of pymongo.event_loggers.CommandLogger:3
msgid ""
"Listens for :class:`~pymongo.monitoring.CommandStartedEvent`, "
":class:`~pymongo.monitoring.CommandSucceededEvent` and "
":class:`~pymongo.monitoring.CommandFailedEvent` events and logs them at "
"the `INFO` severity level using :mod:`logging`. .. versionadded:: 3.11"
msgstr ""

#: of pymongo.event_loggers.CommandLogger.failed:1
#: pymongo.monitoring.CommandListener.failed:1
msgid "Abstract method to handle a `CommandFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.CommandLogger.failed:4
#: pymongo.monitoring.CommandListener.failed:4
msgid "`event`: An instance of :class:`CommandFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.CommandLogger.started:1
#: pymongo.monitoring.CommandListener.started:1
msgid "Abstract method to handle a `CommandStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.CommandLogger.started:4
#: pymongo.monitoring.CommandListener.started:4
msgid "`event`: An instance of :class:`CommandStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.CommandLogger.succeeded:1
#: pymongo.monitoring.CommandListener.succeeded:1
msgid "Abstract method to handle a `CommandSucceededEvent`."
msgstr ""

#: of pymongo.event_loggers.CommandLogger.succeeded:4
#: pymongo.monitoring.CommandListener.succeeded:4
msgid "`event`: An instance of :class:`CommandSucceededEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger:1
msgid "A simple listener that logs server connection pool events."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger:3
msgid ""
"Listens for :class:`~pymongo.monitoring.PoolCreatedEvent`, "
":class:`~pymongo.monitoring.PoolClearedEvent`, "
":class:`~pymongo.monitoring.PoolClosedEvent`, "
":~pymongo.monitoring.class:`ConnectionCreatedEvent`, "
":class:`~pymongo.monitoring.ConnectionReadyEvent`, "
":class:`~pymongo.monitoring.ConnectionClosedEvent`, "
":class:`~pymongo.monitoring.ConnectionCheckOutStartedEvent`, "
":class:`~pymongo.monitoring.ConnectionCheckOutFailedEvent`, "
":class:`~pymongo.monitoring.ConnectionCheckedOutEvent`, and "
":class:`~pymongo.monitoring.ConnectionCheckedInEvent` events and logs "
"them at the `INFO` severity level using :mod:`logging`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_failed:1
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_failed:1
msgid "Abstract method to handle a :class:`ConnectionCheckOutFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_failed:3
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_failed:3
msgid "Emitted when the driver's attempt to check out a connection fails."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_failed:6
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_failed:6
msgid "`event`: An instance of :class:`ConnectionCheckOutFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_started:1
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_started:1
msgid "Abstract method to handle a :class:`ConnectionCheckOutStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_started:3
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_started:3
msgid "Emitted when the driver starts attempting to check out a connection."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_check_out_started:6
#: pymongo.monitoring.ConnectionPoolListener.connection_check_out_started:6
msgid "`event`: An instance of :class:`ConnectionCheckOutStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_in:1
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_in:1
msgid "Abstract method to handle a :class:`ConnectionCheckedInEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_in:3
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_in:3
msgid ""
"Emitted when the driver checks in a Connection back to the Connection "
"Pool."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_in:7
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_in:7
msgid "`event`: An instance of :class:`ConnectionCheckedInEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_out:1
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_out:1
msgid "Abstract method to handle a :class:`ConnectionCheckedOutEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_out:3
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_out:3
msgid "Emitted when the driver successfully checks out a Connection."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_checked_out:6
#: pymongo.monitoring.ConnectionPoolListener.connection_checked_out:6
msgid "`event`: An instance of :class:`ConnectionCheckedOutEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_closed:1
#: pymongo.monitoring.ConnectionPoolListener.connection_closed:1
msgid "Abstract method to handle a :class:`ConnectionClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_closed:3
#: pymongo.monitoring.ConnectionPoolListener.connection_closed:3
msgid "Emitted when a Connection Pool closes a Connection."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_closed:6
#: pymongo.monitoring.ConnectionPoolListener.connection_closed:6
msgid "`event`: An instance of :class:`ConnectionClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_created:1
#: pymongo.monitoring.ConnectionPoolListener.connection_created:1
msgid "Abstract method to handle a :class:`ConnectionCreatedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_created:3
#: pymongo.monitoring.ConnectionPoolListener.connection_created:3
msgid "Emitted when a Connection Pool creates a Connection object."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_created:6
#: pymongo.monitoring.ConnectionPoolListener.connection_created:6
msgid "`event`: An instance of :class:`ConnectionCreatedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_ready:1
#: pymongo.monitoring.ConnectionPoolListener.connection_ready:1
msgid "Abstract method to handle a :class:`ConnectionReadyEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_ready:3
#: pymongo.monitoring.ConnectionPoolListener.connection_ready:3
msgid "Emitted when a Connection has finished its setup, and is now ready to use."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.connection_ready:7
#: pymongo.monitoring.ConnectionPoolListener.connection_ready:7
msgid "`event`: An instance of :class:`ConnectionReadyEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_cleared:1
#: pymongo.monitoring.ConnectionPoolListener.pool_cleared:1
msgid "Abstract method to handle a `PoolClearedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_cleared:3
#: pymongo.monitoring.ConnectionPoolListener.pool_cleared:3
msgid "Emitted when a Connection Pool is cleared."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_cleared:6
#: pymongo.monitoring.ConnectionPoolListener.pool_cleared:6
msgid "`event`: An instance of :class:`PoolClearedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_closed:1
#: pymongo.monitoring.ConnectionPoolListener.pool_closed:1
msgid "Abstract method to handle a `PoolClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_closed:3
#: pymongo.monitoring.ConnectionPoolListener.pool_closed:3
msgid "Emitted when a Connection Pool is closed."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_closed:6
#: pymongo.monitoring.ConnectionPoolListener.pool_closed:6
msgid "`event`: An instance of :class:`PoolClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_created:1
#: pymongo.monitoring.ConnectionPoolListener.pool_created:1
msgid "Abstract method to handle a :class:`PoolCreatedEvent`."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_created:3
#: pymongo.monitoring.ConnectionPoolListener.pool_created:3
msgid "Emitted when a Connection Pool is created."
msgstr ""

#: of pymongo.event_loggers.ConnectionPoolLogger.pool_created:6
#: pymongo.monitoring.ConnectionPoolListener.pool_created:6
msgid "`event`: An instance of :class:`PoolCreatedEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger:1
msgid "A simple listener that logs server heartbeat events."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger:3
msgid ""
"Listens for :class:`~pymongo.monitoring.ServerHeartbeatStartedEvent`, "
":class:`~pymongo.monitoring.ServerHeartbeatSucceededEvent`, and "
":class:`~pymongo.monitoring.ServerHeartbeatFailedEvent` events and logs "
"them at the `INFO` severity level using :mod:`logging`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.failed:1
#: pymongo.monitoring.ServerHeartbeatListener.failed:1
msgid "Abstract method to handle a `ServerHeartbeatFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.failed:4
#: pymongo.monitoring.ServerHeartbeatListener.failed:4
msgid "`event`: An instance of :class:`ServerHeartbeatFailedEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.started:1
#: pymongo.monitoring.ServerHeartbeatListener.started:1
msgid "Abstract method to handle a `ServerHeartbeatStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.started:4
#: pymongo.monitoring.ServerHeartbeatListener.started:4
msgid "`event`: An instance of :class:`ServerHeartbeatStartedEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.succeeded:1
#: pymongo.monitoring.ServerHeartbeatListener.succeeded:1
msgid "Abstract method to handle a `ServerHeartbeatSucceededEvent`."
msgstr ""

#: of pymongo.event_loggers.HeartbeatLogger.succeeded:4
#: pymongo.monitoring.ServerHeartbeatListener.succeeded:4
msgid "`event`: An instance of :class:`ServerHeartbeatSucceededEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger:1
msgid "A simple listener that logs server discovery events."
msgstr ""

#: of pymongo.event_loggers.ServerLogger:3
msgid ""
"Listens for :class:`~pymongo.monitoring.ServerOpeningEvent`, "
":class:`~pymongo.monitoring.ServerDescriptionChangedEvent`, and "
":class:`~pymongo.monitoring.ServerClosedEvent` events and logs them at "
"the `INFO` severity level using :mod:`logging`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.closed:1
#: pymongo.monitoring.ServerListener.closed:1
msgid "Abstract method to handle a `ServerClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.closed:4
#: pymongo.monitoring.ServerListener.closed:4
msgid "`event`: An instance of :class:`ServerClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.description_changed:1
#: pymongo.monitoring.ServerListener.description_changed:1
msgid "Abstract method to handle a `ServerDescriptionChangedEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.description_changed:4
#: pymongo.monitoring.ServerListener.description_changed:4
msgid "`event`: An instance of :class:`ServerDescriptionChangedEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.opened:1
#: pymongo.monitoring.ServerListener.opened:1
msgid "Abstract method to handle a `ServerOpeningEvent`."
msgstr ""

#: of pymongo.event_loggers.ServerLogger.opened:4
#: pymongo.monitoring.ServerListener.opened:4
msgid "`event`: An instance of :class:`ServerOpeningEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger:1
msgid "A simple listener that logs server topology events."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger:3
msgid ""
"Listens for :class:`~pymongo.monitoring.TopologyOpenedEvent`, "
":class:`~pymongo.monitoring.TopologyDescriptionChangedEvent`, and "
":class:`~pymongo.monitoring.TopologyClosedEvent` events and logs them at "
"the `INFO` severity level using :mod:`logging`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.closed:1
#: pymongo.monitoring.TopologyListener.closed:1
msgid "Abstract method to handle a `TopologyClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.closed:4
#: pymongo.monitoring.TopologyListener.closed:4
msgid "`event`: An instance of :class:`TopologyClosedEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.description_changed:1
#: pymongo.monitoring.TopologyListener.description_changed:1
msgid "Abstract method to handle a `TopologyDescriptionChangedEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.description_changed:4
#: pymongo.monitoring.TopologyListener.description_changed:4
msgid "`event`: An instance of :class:`TopologyDescriptionChangedEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.opened:1
#: pymongo.monitoring.TopologyListener.opened:1
msgid "Abstract method to handle a `TopologyOpenedEvent`."
msgstr ""

#: of pymongo.event_loggers.TopologyLogger.opened:4
#: pymongo.monitoring.TopologyListener.opened:4
msgid "`event`: An instance of :class:`TopologyOpenedEvent`."
msgstr ""

#: ../../api/pymongo/index.rst:2
msgid ":mod:`pymongo` -- Python driver for MongoDB"
msgstr ""

#: of pymongo:1
msgid "Python driver for MongoDB."
msgstr ""

#: of pymongo.version:1
msgid "str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"
msgstr ""

#: of pymongo.version:4
msgid ""
"Create a new string object from the given object. If encoding or errors "
"is specified, then the object must expose a data buffer that will be "
"decoded using the given encoding and error handler. Otherwise, returns "
"the result of object.__str__() (if defined) or repr(object). encoding "
"defaults to sys.getdefaultencoding(). errors defaults to 'strict'."
msgstr ""

#: ../../api/pymongo/index.rst:10
msgid "Alias for :class:`pymongo.mongo_client.MongoClient`."
msgstr ""

#: ../../api/pymongo/index.rst:14
msgid "Alias for :class:`pymongo.mongo_replica_set_client.MongoReplicaSetClient`."
msgstr ""

#: ../../api/pymongo/index.rst:18
msgid "Alias for :class:`pymongo.read_preferences.ReadPreference`."
msgstr ""

#: ../../api/pymongo/index.rst:23
msgid "The minimum wire protocol version PyMongo supports."
msgstr ""

#: ../../api/pymongo/index.rst:27
msgid "The maximum wire protocol version PyMongo supports."
msgstr ""

#: ../../api/pymongo/ismaster.rst:4
msgid ":mod:`ismaster` -- A wrapper for ismaster command responses."
msgstr ""

#: of pymongo.ismaster:1
msgid "Parse a response to the 'ismaster' command."
msgstr ""

#: of pymongo.ismaster.IsMaster:1
msgid "Parse an ismaster response from the server."
msgstr ""

#: of pymongo.ismaster.IsMaster.document:1
msgid "The complete ismaster command response document."
msgstr ""

#: ../../api/pymongo/message.rst:2
msgid ":mod:`message` -- Tools for creating messages to be sent to MongoDB"
msgstr ""

#: of pymongo.message:1
msgid ""
"Tools for creating `messages "
"<http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol>`_ to be sent to"
" MongoDB."
msgstr ""

#: of pymongo.message:5
msgid ""
"This module is for internal use and is generally not needed by "
"application developers."
msgstr ""

#: of pymongo.message.delete:1
msgid "Get a **delete** message."
msgstr ""

#: of pymongo.message.delete:3
msgid ""
"`opts` is a CodecOptions. `flags` is a bit vector that may contain the "
"SingleRemove flag or not:"
msgstr ""

#: of pymongo.message.delete:6
msgid ""
"http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol"
"/#op-delete"
msgstr ""

#: of pymongo.message.get_more:1
msgid "Get a **getMore** message."
msgstr ""

#: of pymongo.message.insert:1
msgid "Get an **insert** message."
msgstr ""

#: of pymongo.message.kill_cursors:1
msgid "Get a **killCursors** message."
msgstr ""

#: of pymongo.message.query:1
msgid "Get a **query** message."
msgstr ""

#: of pymongo.message.update:1
msgid "Get an **update** message."
msgstr ""

#: ../../api/pymongo/mongo_client.rst:2
msgid ":mod:`mongo_client` -- Tools for connecting to MongoDB"
msgstr ""

#: of pymongo.mongo_client:1
msgid "Tools for connecting to MongoDB."
msgstr ""

#: of pymongo.mongo_client:3
msgid ""
":doc:`/examples/high_availability` for examples of connecting to replica "
"sets or sets of mongos servers."
msgstr ""

#: of pymongo.mongo_client:6
msgid ""
"To get a :class:`~pymongo.database.Database` instance from a "
":class:`MongoClient` use either dictionary-style or attribute-style "
"access:"
msgstr ""

#: of pymongo.mongo_client.MongoClient:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:1
msgid "Client for a MongoDB instance, a replica set, or a set of mongoses."
msgstr ""

#: of pymongo.mongo_client.MongoClient:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:3
msgid ""
"The client object is thread-safe and has connection-pooling built in. If "
"an operation fails because of a network error, "
":class:`~pymongo.errors.ConnectionFailure` is raised and the client "
"reconnects in the background. Application code should handle this "
"exception (recognizing that the operation failed) and then continue to "
"execute."
msgstr ""

#: of pymongo.mongo_client.MongoClient:10
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:10
msgid ""
"The `host` parameter can be a full `mongodb URI "
"<http://dochub.mongodb.org/core/connections>`_, in addition to a simple "
"hostname. It can also be a list of hostnames or URIs. Any port specified "
"in the host string(s) will override the `port` parameter. If multiple "
"mongodb URIs containing database or auth information are passed, the last"
" database, username, and password present will be used.  For username and"
" passwords reserved characters like ':', '/', '+' and '@' must be percent"
" encoded following RFC 2396::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:31
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:31
msgid ""
"Unix domain sockets are also supported. The socket path must be percent "
"encoded in the URI::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:38
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:38
msgid "But not when passed as a simple hostname::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:42
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:42
msgid ""
"Starting with version 3.6, PyMongo supports mongodb+srv:// URIs. The URI "
"must include one, and only one, hostname. The hostname will be resolved "
"to one or more DNS `SRV records "
"<https://en.wikipedia.org/wiki/SRV_record>`_ which will be used as the "
"seed list for connecting to the MongoDB deployment. When using SRV URIs, "
"the `authSource` and `replicaSet` configuration options can be specified "
"using `TXT records <https://en.wikipedia.org/wiki/TXT_record>`_. See the "
"`Initial DNS Seedlist Discovery spec "
"<https://github.com/mongodb/specifications/blob/master/source/ initial-"
"dns-seedlist-discovery/initial-dns-seedlist-discovery.rst>`_ for more "
"details. Note that the use of SRV URIs implicitly enables TLS support. "
"Pass tls=false in the URI to override."
msgstr ""

#: of pymongo.mongo_client.MongoClient:56
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:56
msgid ""
"MongoClient creation will block waiting for answers from DNS when "
"mongodb+srv:// URIs are used."
msgstr ""

#: of pymongo.mongo_client.MongoClient:59
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:59
msgid ""
"Starting with version 3.0 the :class:`MongoClient` constructor no longer "
"blocks while connecting to the server or servers, and it no longer raises"
" :class:`~pymongo.errors.ConnectionFailure` if they are unavailable, nor "
":class:`~pymongo.errors.ConfigurationError` if the user's credentials are"
" wrong. Instead, the constructor returns immediately and launches the "
"connection process on background threads. You can check if the server is "
"available like this::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:77
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:77
msgid ""
"When using PyMongo in a multiprocessing context, please read "
":ref:`multiprocessing` first."
msgstr ""

#: of pymongo.mongo_client.MongoClient:80
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:80
msgid ""
"Many of the following options can be passed using a MongoDB URI or "
"keyword parameters. If the same option is passed in a URI and as a "
"keyword parameter the keyword parameter takes precedence."
msgstr ""

#: of pymongo.mongo_client.MongoClient:85
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:85
msgid ""
"`host` (optional): hostname or IP address or Unix domain socket path of a"
" single mongod or mongos instance to connect to, or a mongodb URI, or a "
"list of hostnames / mongodb URIs. If `host` is an IPv6 literal it must be"
" enclosed in '[' and ']' characters following the RFC2732 URL syntax "
"(e.g. '[::1]' for localhost). Multihomed and round robin DNS addresses "
"are **not** supported."
msgstr ""

#: of pymongo.mongo_client.MongoClient:91
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:91
msgid "`port` (optional): port number on which to connect"
msgstr ""

#: of pymongo.mongo_client.MongoClient:92
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:92
msgid ""
"`document_class` (optional): default class to use for documents returned "
"from queries on this client"
msgstr ""

#: of pymongo.mongo_client.MongoClient:94
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:94
msgid ""
"`type_registry` (optional): instance of "
":class:`~bson.codec_options.TypeRegistry` to enable encoding and decoding"
" of custom types."
msgstr ""

#: of pymongo.mongo_client.MongoClient:97
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:97
msgid ""
"`tz_aware` (optional): if ``True``, :class:`~datetime.datetime` instances"
" returned as values in a document by this :class:`MongoClient` will be "
"timezone aware (otherwise they will be naive)"
msgstr ""

#: of pymongo.mongo_client.MongoClient:101
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:101
msgid ""
"`connect` (optional): if ``True`` (the default), immediately begin "
"connecting to MongoDB in the background. Otherwise connect on the first "
"operation."
msgstr ""

#: of pymongo.mongo_client.MongoClient:109
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:109
msgid "`directConnection` (optional): if ``True``, forces this client to"
msgstr ""

#: of pymongo.mongo_client.MongoClient:105
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:105
msgid ""
"connect directly to the specified MongoDB host as a standalone. If "
"``false``, the client connects to the entire replica set of which the "
"given MongoDB host(s) is a part. If this is ``True`` and a mongodb+srv://"
" URI or a URI containing multiple seeds is provided, an exception will be"
" raised."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Other optional parameters can be passed as keyword arguments:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient:113
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:113
msgid ""
"`maxPoolSize` (optional): The maximum allowable number of concurrent "
"connections to each connected server. Requests to a server will block if "
"there are `maxPoolSize` outstanding connections to the requested server. "
"Defaults to 100. Cannot be 0."
msgstr ""

#: of pymongo.mongo_client.MongoClient:117
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:117
msgid ""
"`minPoolSize` (optional): The minimum required number of concurrent "
"connections that the pool will maintain to each connected server. Default"
" is 0."
msgstr ""

#: of pymongo.mongo_client.MongoClient:120
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:120
msgid ""
"`maxIdleTimeMS` (optional): The maximum number of milliseconds that a "
"connection can remain idle in the pool before being removed and replaced."
" Defaults to `None` (no limit)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:123
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:123
msgid ""
"`socketTimeoutMS`: (integer or None) Controls how long (in milliseconds) "
"the driver will wait for a response after sending an ordinary (non-"
"monitoring) database operation before concluding that a network error has"
" occurred. ``0`` or ``None`` means no timeout. Defaults to ``None`` (no "
"timeout)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:128
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:128
msgid ""
"`connectTimeoutMS`: (integer or None) Controls how long (in milliseconds)"
" the driver will wait during server monitoring when connecting a new "
"socket to a server before concluding the server is unavailable. ``0`` or "
"``None`` means no timeout. Defaults to ``20000`` (20 seconds)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:133
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:133
msgid ""
"`server_selector`: (callable or None) Optional, user-provided function "
"that augments server selection rules. The function should accept as an "
"argument a list of :class:`~pymongo.server_description.ServerDescription`"
" objects and return a list of server descriptions that should be "
"considered suitable for the desired operation."
msgstr ""

#: of pymongo.mongo_client.MongoClient:139
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:139
msgid ""
"`serverSelectionTimeoutMS`: (integer) Controls how long (in milliseconds)"
" the driver will wait to find an available, appropriate server to carry "
"out a database operation; while it is waiting, multiple server monitoring"
" operations may be carried out, each controlled by `connectTimeoutMS`. "
"Defaults to ``30000`` (30 seconds)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:145
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:145
msgid ""
"`waitQueueTimeoutMS`: (integer or None) How long (in milliseconds) a "
"thread will wait for a socket from the pool if the pool has no free "
"sockets. Defaults to ``None`` (no timeout)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:148
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:148
msgid ""
"`waitQueueMultiple`: (integer or None) Multiplied by maxPoolSize to give "
"the number of threads allowed to wait for a socket at one time. Defaults "
"to ``None`` (no limit)."
msgstr ""

#: of pymongo.mongo_client.MongoClient:151
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:151
msgid ""
"`heartbeatFrequencyMS`: (optional) The number of milliseconds between "
"periodic server checks, or None to accept the default frequency of 10 "
"seconds."
msgstr ""

#: of pymongo.mongo_client.MongoClient:154
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:154
msgid ""
"`appname`: (string or None) The name of the application that created this"
" MongoClient instance. MongoDB 3.4 and newer will print this value in the"
" server log upon establishing each connection. It is also recorded in the"
" slow query log and profile collections."
msgstr ""

#: of pymongo.mongo_client.MongoClient:159
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:159
msgid ""
"`driver`: (pair or None) A driver implemented on top of PyMongo can pass "
"a :class:`~pymongo.driver_info.DriverInfo` to add its name, version, and "
"platform to the message printed in the server log when establishing a "
"connection."
msgstr ""

#: of pymongo.mongo_client.MongoClient:163
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:163
msgid ""
"`event_listeners`: a list or tuple of event listeners. See "
":mod:`~pymongo.monitoring` for details."
msgstr ""

#: of pymongo.mongo_client.MongoClient:165
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:165
msgid ""
"`retryWrites`: (boolean) Whether supported write operations executed "
"within this MongoClient will be retried once after a network error on "
"MongoDB 3.6+. Defaults to ``True``. The supported write operations are:"
msgstr ""

#: of pymongo.mongo_client.MongoClient:170
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:170
msgid ""
":meth:`~pymongo.collection.Collection.bulk_write`, as long as "
":class:`~pymongo.operations.UpdateMany` or "
":class:`~pymongo.operations.DeleteMany` are not included."
msgstr ""

#: of pymongo.mongo_client.MongoClient:173
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:173
msgid ":meth:`~pymongo.collection.Collection.delete_one`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:174
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:174
msgid ":meth:`~pymongo.collection.Collection.insert_one`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:175
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:175
msgid ":meth:`~pymongo.collection.Collection.insert_many`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:176
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:176
msgid ":meth:`~pymongo.collection.Collection.replace_one`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:177
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:177
msgid ":meth:`~pymongo.collection.Collection.update_one`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:178
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:178
msgid ":meth:`~pymongo.collection.Collection.find_one_and_delete`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:179
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:179
msgid ":meth:`~pymongo.collection.Collection.find_one_and_replace`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:180
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:180
msgid ":meth:`~pymongo.collection.Collection.find_one_and_update`"
msgstr ""

#: of pymongo.mongo_client.MongoClient:182
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:182
msgid ""
"Unsupported write operations include, but are not limited to, "
":meth:`~pymongo.collection.Collection.aggregate` using the ``$out`` "
"pipeline operator and any operation with an unacknowledged write concern "
"(e.g. {w: 0})). See "
"https://github.com/mongodb/specifications/blob/master/source/retryable-"
"writes/retryable-writes.rst"
msgstr ""

#: of pymongo.mongo_client.MongoClient:187
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:187
msgid ""
"`retryReads`: (boolean) Whether supported read operations executed within"
" this MongoClient will be retried once after a network error on MongoDB "
"3.6+. Defaults to ``True``. The supported read operations are: "
":meth:`~pymongo.collection.Collection.find`, "
":meth:`~pymongo.collection.Collection.find_one`, "
":meth:`~pymongo.collection.Collection.aggregate` without ``$out``, "
":meth:`~pymongo.collection.Collection.distinct`, "
":meth:`~pymongo.collection.Collection.count`, "
":meth:`~pymongo.collection.Collection.estimated_document_count`, "
":meth:`~pymongo.collection.Collection.count_documents`, "
":meth:`pymongo.collection.Collection.watch`, "
":meth:`~pymongo.collection.Collection.list_indexes`, "
":meth:`pymongo.database.Database.watch`, "
":meth:`~pymongo.database.Database.list_collections`, "
":meth:`pymongo.mongo_client.MongoClient.watch`, and "
":meth:`~pymongo.mongo_client.MongoClient.list_databases`."
msgstr ""

#: of pymongo.mongo_client.MongoClient:205
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:205
msgid ""
"Unsupported read operations include, but are not limited to: "
":meth:`~pymongo.collection.Collection.map_reduce`, "
":meth:`~pymongo.collection.Collection.inline_map_reduce`, "
":meth:`~pymongo.database.Database.command`, and any getMore operation on "
"a cursor."
msgstr ""

#: of pymongo.mongo_client.MongoClient:211
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:211
msgid ""
"Enabling retryable reads makes applications more resilient to transient "
"errors such as network failures, database upgrades, and replica set "
"failovers. For an exact definition of which errors trigger a retry, see "
"the `retryable reads specification "
"<https://github.com/mongodb/specifications/blob/master/source/retryable-"
"reads/retryable-reads.rst>`_."
msgstr ""

#: of pymongo.mongo_client.MongoClient:217
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:217
msgid ""
"`socketKeepAlive`: (boolean) **DEPRECATED** Whether to send periodic "
"keep-alive packets on connected sockets. Defaults to ``True``. Disabling "
"it is not recommended, see "
"https://docs.mongodb.com/manual/faq/diagnostics/#does-tcp-keepalive-time-"
"affect-mongodb-deployments\","
msgstr ""

#: of pymongo.mongo_client.MongoClient:221
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:221
msgid ""
"`compressors`: Comma separated list of compressors for wire protocol "
"compression. The list is used to negotiate a compressor with the server. "
"Currently supported options are \"snappy\", \"zlib\" and \"zstd\". "
"Support for snappy requires the `python-snappy <https://pypi.org/project"
"/python-snappy/>`_ package. zlib support requires the Python standard "
"library zlib module. zstd requires the `zstandard "
"<https://pypi.org/project/zstandard/>`_ package. By default no "
"compression is used. Compression support must also be enabled on the "
"server. MongoDB 3.4+ supports snappy compression. MongoDB 3.6 adds "
"support for zlib. MongoDB 4.2 adds support for zstd."
msgstr ""

#: of pymongo.mongo_client.MongoClient:232
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:232
msgid ""
"`zlibCompressionLevel`: (int) The zlib compression level to use when zlib"
" is used as the wire protocol compressor. Supported values are -1 through"
" 9. -1 tells the zlib library to use its default compression level "
"(usually 6). 0 means no compression. 1 is best speed. 9 is best "
"compression. Defaults to -1."
msgstr ""

#: of pymongo.mongo_client.MongoClient:237
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:237
msgid ""
"`uuidRepresentation`: The BSON representation to use when encoding from "
"and decoding to instances of :class:`~uuid.UUID`. Valid values are "
"`pythonLegacy` (the default), `javaLegacy`, `csharpLegacy`, `standard` "
"and `unspecified`. New applications should consider setting this to "
"`standard` for cross language compatibility. See :ref:`handling-uuid-"
"data-example` for details."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Write Concern options:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "(Only set if passed. No default values.)"
msgstr ""

#: of pymongo.mongo_client.MongoClient:247
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:247
msgid ""
"`w`: (integer or string) If this is a replica set, write operations will "
"block until they have been replicated to the specified number or tagged "
"set of servers. `w=<int>` always includes the replica set primary (e.g. "
"w=3 means write to the primary and wait until replicated to **two** "
"secondaries). Passing w=0 **disables write acknowledgement** and all "
"other write concern options."
msgstr ""

#: of pymongo.mongo_client.MongoClient:253
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:253
msgid ""
"`wTimeoutMS`: (integer) Used in conjunction with `w`. Specify a value in "
"milliseconds to control how long to wait for write propagation to "
"complete. If replication does not complete in the given timeframe, a "
"timeout exception is raised. Passing wTimeoutMS=0 will cause **write "
"operations to wait indefinitely**."
msgstr ""

#: of pymongo.mongo_client.MongoClient:258
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:258
msgid ""
"`journal`: If ``True`` block until write operations have been committed "
"to the journal. Cannot be used in combination with `fsync`. Prior to "
"MongoDB 2.6 this option was ignored if the server was running without "
"journaling. Starting with MongoDB 2.6 write operations will fail with an "
"exception if this option is used when the server is running without "
"journaling."
msgstr ""

#: of pymongo.mongo_client.MongoClient:264
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:264
#: pymongo.write_concern.WriteConcern:19
msgid ""
"`fsync`: If ``True`` and the server is running without journaling, blocks"
" until the server has synced all data files to disk. If the server is "
"running with journaling, this acts the same as the `j` option, blocking "
"until write operations have been committed to the journal. Cannot be used"
" in combination with `j`."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid ""
"**Replica set keyword arguments for connecting with a replica set - "
"either directly or via a mongos:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient:273
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:273
msgid ""
"`replicaSet`: (string or None) The name of the replica set to connect to."
" The driver will verify that all servers it connects to match this name. "
"Implies that the hosts specified are a seed list and the driver should "
"attempt to find all members of the set. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Read Preference:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient:281
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:281
msgid ""
"`readPreference`: The replica set read preference for this client. One of"
" ``primary``, ``primaryPreferred``, ``secondary``, "
"``secondaryPreferred``, or ``nearest``. Defaults to ``primary``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:284
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:284
msgid ""
"`readPreferenceTags`: Specifies a tag set as a comma-separated list of "
"colon-separated key-value pairs. For example ``dc:ny,rack:1``. Defaults "
"to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:287
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:287
msgid ""
"`maxStalenessSeconds`: (integer) The maximum estimated length of time a "
"replica set secondary can fall behind the primary in replication before "
"it will no longer be selected for operations. Defaults to ``-1``, meaning"
" no maximum. If maxStalenessSeconds is set, it must be a positive integer"
" greater than or equal to 90 seconds."
msgstr ""

#: of pymongo.mongo_client.MongoClient:294
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:294
msgid ":doc:`/examples/server_selection`"
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Authentication:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient:298
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:298
msgid "`username`: A string."
msgstr ""

#: of pymongo.mongo_client.MongoClient:299
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:299
msgid "`password`: A string."
msgstr ""

#: of pymongo.mongo_client.MongoClient:301
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:301
msgid ""
"Although username and password must be percent-escaped in a MongoDB URI, "
"they must not be percent-escaped when passed as parameters. In this "
"example, both the space and slash special characters are passed as-is::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:308
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:308
msgid ""
"`authSource`: The database to authenticate on. Defaults to the database "
"specified in the URI, if provided, or to \"admin\"."
msgstr ""

#: of pymongo.mongo_client.MongoClient:310
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:310
msgid ""
"`authMechanism`: See :data:`~pymongo.auth.MECHANISMS` for options. If no "
"mechanism is specified, PyMongo automatically uses MONGODB-CR when "
"connected to a pre-3.0 version of MongoDB, SCRAM-SHA-1 when connected to "
"MongoDB 3.0 through 3.6, and negotiates the mechanism to use (SCRAM-SHA-1"
" or SCRAM-SHA-256) when connected to MongoDB 4.0+."
msgstr ""

#: of pymongo.mongo_client.MongoClient:316
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:316
msgid ""
"`authMechanismProperties`: Used to specify authentication mechanism "
"specific options. To specify the service name for GSSAPI authentication "
"pass authMechanismProperties='SERVICE_NAME:<service name>'. To specify "
"the session token for MONGODB-AWS authentication pass "
"``authMechanismProperties='AWS_SESSION_TOKEN:<session token>'``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:323
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:323
msgid ":doc:`/examples/authentication`"
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**TLS/SSL configuration:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient:327
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:327
msgid ""
"`tls`: (boolean) If ``True``, create the connection to the server using "
"transport layer security. Defaults to ``False``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:329
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:329
msgid ""
"`tlsInsecure`: (boolean) Specify whether TLS constraints should be "
"relaxed as much as possible. Setting ``tlsInsecure=True`` implies "
"``tlsAllowInvalidCertificates=True`` and "
"``tlsAllowInvalidHostnames=True``. Defaults to ``False``. Think very "
"carefully before setting this to ``True`` as it dramatically reduces the "
"security of TLS."
msgstr ""

#: of pymongo.mongo_client.MongoClient:335
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:335
msgid ""
"`tlsAllowInvalidCertificates`: (boolean) If ``True``, continues the TLS "
"handshake regardless of the outcome of the certificate verification "
"process. If this is ``False``, and a value is not provided for "
"``tlsCAFile``, PyMongo will attempt to load system provided CA "
"certificates. If the python version in use does not support loading "
"system CA certificates then the ``tlsCAFile`` parameter must point to a "
"file of CA certificates. ``tlsAllowInvalidCertificates=False`` implies "
"``tls=True``. Defaults to ``False``. Think very carefully before setting "
"this to ``True`` as that could make your application vulnerable to man-"
"in-the-middle attacks."
msgstr ""

#: of pymongo.mongo_client.MongoClient:346
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:346
msgid ""
"`tlsAllowInvalidHostnames`: (boolean) If ``True``, disables TLS hostname "
"verification. ``tlsAllowInvalidHostnames=False`` implies ``tls=True``. "
"Defaults to ``False``. Think very carefully before setting this to "
"``True`` as that could make your application vulnerable to man-in-the-"
"middle attacks."
msgstr ""

#: of pymongo.mongo_client.MongoClient:351
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:351
msgid ""
"`tlsCAFile`: A file containing a single or a bundle of \"certification "
"authority\" certificates, which are used to validate certificates passed "
"from the other end of the connection. Implies ``tls=True``. Defaults to "
"``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:355
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:355
msgid ""
"`tlsCertificateKeyFile`: A file containing the client certificate and "
"private key. If you want to pass the certificate and private key as "
"separate files, use the ``ssl_certfile`` and ``ssl_keyfile`` options "
"instead. Implies ``tls=True``. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:359
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:359
msgid ""
"`tlsCRLFile`: A file containing a PEM or DER formatted certificate "
"revocation list. Only supported by python 2.7.9+ (pypy 2.5.1+). Implies "
"``tls=True``. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:362
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:362
msgid ""
"`tlsCertificateKeyFilePassword`: The password or passphrase for "
"decrypting the private key in ``tlsCertificateKeyFile`` or "
"``ssl_keyfile``. Only necessary if the private key is encrypted. Only "
"supported by python 2.7.9+ (pypy 2.5.1+) and 3.3+. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:367
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:367
msgid ""
"`tlsDisableOCSPEndpointCheck`: (boolean) If ``True``, disables "
"certificate revocation status checking via the OCSP responder specified "
"on the server certificate. Defaults to ``False``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:370
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:370
msgid "`ssl`: (boolean) Alias for ``tls``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:371
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:371
msgid ""
"`ssl_certfile`: The certificate file used to identify the local "
"connection against mongod. Implies ``tls=True``. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:374
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:374
msgid ""
"`ssl_keyfile`: The private keyfile used to identify the local connection "
"against mongod. Can be omitted if the keyfile is included with the "
"``tlsCertificateKeyFile``. Implies ``tls=True``. Defaults to ``None``."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Read Concern options:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "(If not set explicitly, this will use the server default)"
msgstr ""

#: of pymongo.mongo_client.MongoClient:382
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:382
msgid ""
"`readConcernLevel`: (string) The read concern level specifies the level "
"of isolation for read operations.  For example, a read operation using a "
"read concern level of ``majority`` will only return data that has been "
"written to a majority of nodes. If the level is left unspecified, the "
"server default will be used."
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "**Client side encryption options:**"
msgstr ""

#: of pymongo.mongo_client.MongoClient
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient
msgid "(If not set explicitly, client side encryption will not be enabled.)"
msgstr ""

#: of pymongo.mongo_client.MongoClient:391
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:391
msgid ""
"`auto_encryption_opts`: A "
":class:`~pymongo.encryption_options.AutoEncryptionOpts` which configures "
"this client to automatically encrypt collection commands and "
"automatically decrypt results. See :ref:`automatic-client-side-"
"encryption` for an example."
msgstr ""

#: of pymongo.mongo_client.MongoClient:399
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:399
msgid "Added the following keyword arguments and URI options:"
msgstr ""

#: of pymongo.mongo_client.MongoClient:402
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:402
msgid "``tlsDisableOCSPEndpointCheck``"
msgstr ""

#: of pymongo.mongo_client.MongoClient:403
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:403
msgid "``directConnection``"
msgstr ""

#: of pymongo.mongo_client.MongoClient:405
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:405
msgid ""
"Added the ``retryReads`` keyword argument and URI option. Added the "
"``tlsInsecure`` keyword argument and URI option. The following keyword "
"arguments and URI options were deprecated:"
msgstr ""

#: of pymongo.mongo_client.MongoClient:410
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:410
msgid "``wTimeout`` was deprecated in favor of ``wTimeoutMS``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:411
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:411
msgid "``j`` was deprecated in favor of ``journal``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:412
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:412
msgid ""
"``ssl_cert_reqs`` was deprecated in favor of "
"``tlsAllowInvalidCertificates``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:414
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:414
msgid ""
"``ssl_match_hostname`` was deprecated in favor of "
"``tlsAllowInvalidHostnames``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:416
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:416
msgid "``ssl_ca_certs`` was deprecated in favor of ``tlsCAFile``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:417
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:417
msgid "``ssl_certfile`` was deprecated in favor of ``tlsCertificateKeyFile``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:419
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:419
msgid "``ssl_crlfile`` was deprecated in favor of ``tlsCRLFile``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:420
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:420
msgid ""
"``ssl_pem_passphrase`` was deprecated in favor of "
"``tlsCertificateKeyFilePassword``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:423
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:423
msgid "``retryWrites`` now defaults to ``True``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:426
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:426
msgid ""
"Added the ``server_selector`` keyword argument. Added the "
"``type_registry`` keyword argument."
msgstr ""

#: of pymongo.mongo_client.MongoClient:430
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:430
msgid "Added the ``driver`` keyword argument."
msgstr ""

#: of pymongo.mongo_client.MongoClient:433
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:433
msgid ""
"Added support for mongodb+srv:// URIs. Added the ``retryWrites`` keyword "
"argument and URI option."
msgstr ""

#: of pymongo.mongo_client.MongoClient:437
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:437
msgid ""
"Add ``username`` and ``password`` options. Document the ``authSource``, "
"``authMechanism``, and ``authMechanismProperties`` options. Deprecated "
"the ``socketKeepAlive`` keyword argument and URI option. "
"``socketKeepAlive`` now defaults to ``True``."
msgstr ""

#: of pymongo.mongo_client.MongoClient:444
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:444
msgid ""
":class:`~pymongo.mongo_client.MongoClient` is now the one and only client"
" class for a standalone server, mongos, or replica set. It includes the "
"functionality that had been split into "
":class:`~pymongo.mongo_client.MongoReplicaSetClient`: it can connect to a"
" replica set, discover all its members, and monitor the set for "
"stepdowns, elections, and reconfigs."
msgstr ""

#: of pymongo.mongo_client.MongoClient:452
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:452
msgid ""
"The :class:`~pymongo.mongo_client.MongoClient` constructor no longer "
"blocks while connecting to the server or servers, and it no longer raises"
" :class:`~pymongo.errors.ConnectionFailure` if they are unavailable, nor "
":class:`~pymongo.errors.ConfigurationError` if the user's credentials are"
" wrong. Instead, the constructor returns immediately and launches the "
"connection process on background threads."
msgstr ""

#: of pymongo.mongo_client.MongoClient:460
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:460
msgid ""
"Therefore the ``alive`` method is removed since it no longer provides "
"meaningful information; even if the client is disconnected, it may "
"discover a server in time to fulfill the next operation."
msgstr ""

#: of pymongo.mongo_client.MongoClient:464
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:464
msgid ""
"In PyMongo 2.x, :class:`~pymongo.MongoClient` accepted a list of "
"standalone MongoDB servers and used the first it could connect to::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:469
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:469
msgid ""
"A list of multiple standalones is no longer supported; if multiple "
"servers are listed they must be members of the same replica set, or "
"mongoses in the same sharded cluster."
msgstr ""

#: of pymongo.mongo_client.MongoClient:473
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:473
msgid ""
"The behavior for a list of mongoses is changed from \"high availability\""
" to \"load balancing\". Before, the client connected to the lowest-"
"latency mongos in the list, and used it until a network error prompted it"
" to re-evaluate all mongoses' latencies and reconnect to one of them. In "
"PyMongo 3, the client monitors its network latency to all the mongoses "
"continuously, and distributes operations evenly among those with the "
"lowest latency. See :ref:`mongos-load-balancing` for more information."
msgstr ""

#: of pymongo.mongo_client.MongoClient:482
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:482
msgid "The ``connect`` option is added."
msgstr ""

#: of pymongo.mongo_client.MongoClient:484
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:484
msgid ""
"The ``start_request``, ``in_request``, and ``end_request`` methods are "
"removed, as well as the ``auto_start_request`` option."
msgstr ""

#: of pymongo.mongo_client.MongoClient:487
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:487
msgid ""
"The ``copy_database`` method is removed, see the :doc:`copy_database "
"examples </examples/copydb>` for alternatives."
msgstr ""

#: of pymongo.mongo_client.MongoClient:490
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:490
msgid ""
"The :meth:`MongoClient.disconnect` method is removed; it was a synonym "
"for :meth:`~pymongo.MongoClient.close`."
msgstr ""

#: of pymongo.mongo_client.MongoClient:493
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:493
msgid ""
":class:`~pymongo.mongo_client.MongoClient` no longer returns an instance "
"of :class:`~pymongo.database.Database` for attribute names with leading "
"underscores. You must use dict-style lookups instead::"
msgstr ""

#: of pymongo.mongo_client.MongoClient:499
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient:499
msgid "Not::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.close:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close:1
msgid "Cleanup client resources and disconnect from MongoDB."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close:3
msgid ""
"On MongoDB >= 3.6, end all server sessions created by this client by "
"sending one or more endSessions commands."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close:6
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close:6
msgid ""
"Close all sockets in the connection pools and stop the monitor threads. "
"If this instance is used again it will be automatically re-opened and the"
" threads restarted unless auto encryption is enabled. A client enabled "
"with auto encryption cannot be used again after being closed; any attempt"
" will raise :exc:`~.errors.InvalidOperation`."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close:12
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close:12
msgid "End all server sessions created by this client."
msgstr ""

#: ../../api/pymongo/mongo_client.rst:13
msgid ""
"Get the `db_name` :class:`~pymongo.database.Database` on "
":class:`MongoClient` `c`."
msgstr ""

#: ../../api/pymongo/mongo_client.rst:15
#: ../../api/pymongo/mongo_replica_set_client.rst:15
msgid ""
"Raises :class:`~pymongo.errors.InvalidName` if an invalid database name "
"is used."
msgstr ""

#: of pymongo.mongo_client.MongoClient.event_listeners:1
msgid "The event listeners registered for this client."
msgstr ""

#: of pymongo.mongo_client.MongoClient.event_listeners:3
msgid "See :mod:`~pymongo.monitoring` for details."
msgstr ""

#: of pymongo.mongo_client.MongoClient.address:1
msgid "(host, port) of the current standalone, primary, or mongos, or None."
msgstr ""

#: of pymongo.mongo_client.MongoClient.address:3
msgid ""
"Accessing :attr:`address` raises :exc:`~.errors.InvalidOperation` if the "
"client is load-balancing among mongoses, since there is no single "
"address. Use :attr:`nodes` instead."
msgstr ""

#: of pymongo.mongo_client.MongoClient.address:7
#: pymongo.mongo_client.MongoClient.max_bson_size:3
#: pymongo.mongo_client.MongoClient.max_message_size:3
#: pymongo.mongo_client.MongoClient.max_write_batch_size:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_bson_size:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_message_size:3
msgid ""
"If the client is not connected, this will block until a connection is "
"established or raise ServerSelectionTimeoutError if no server is "
"available."
msgstr ""

#: of pymongo.mongo_client.MongoClient.primary:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.primary:1
msgid "The (host, port) of the current primary of the replica set."
msgstr ""

#: of pymongo.mongo_client.MongoClient.primary:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.primary:3
msgid ""
"Returns ``None`` if this client is not connected to a replica set, there "
"is no primary, or this client was created without the `replicaSet` "
"option."
msgstr ""

#: of pymongo.mongo_client.MongoClient.primary:7
#: pymongo.mongo_client.MongoClient.secondaries:7
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.primary:7
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.secondaries:7
msgid ""
"MongoClient gained this property in version 3.0 when "
"MongoReplicaSetClient's functionality was merged in."
msgstr ""

#: of pymongo.mongo_client.MongoClient.secondaries:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.secondaries:1
msgid "The secondary members known to this client."
msgstr ""

#: of pymongo.mongo_client.MongoClient.secondaries:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.secondaries:3
msgid ""
"A sequence of (host, port) pairs. Empty if this client is not connected "
"to a replica set, there are no visible secondaries, or this client was "
"created without the `replicaSet` option."
msgstr ""

#: of pymongo.mongo_client.MongoClient.arbiters:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.arbiters:1
msgid "Arbiters in the replica set."
msgstr ""

#: of pymongo.mongo_client.MongoClient.arbiters:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.arbiters:3
msgid ""
"A sequence of (host, port) pairs. Empty if this client is not connected "
"to a replica set, there are no arbiters, or this client was created "
"without the `replicaSet` option."
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_primary:1
msgid "If this client is connected to a server that can accept writes."
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_primary:3
msgid ""
"True if the current server is a standalone, mongos, or the primary of a "
"replica set. If the client is not connected, this will block until a "
"connection is established or raise ServerSelectionTimeoutError if no "
"server is available."
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_mongos:1
msgid ""
"If this client is connected to mongos. If the client is not connected, "
"this will block until a connection is established or raise "
"ServerSelectionTimeoutError if no server is available.."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_pool_size:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_pool_size:1
msgid ""
"The maximum allowable number of concurrent connections to each connected "
"server. Requests to a server will block if there are `maxPoolSize` "
"outstanding connections to the requested server. Defaults to 100. Cannot "
"be 0."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_pool_size:6
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_pool_size:6
msgid ""
"When a server's pool has reached `max_pool_size`, operations for that "
"server block waiting for a socket to be returned to the pool. If "
"``waitQueueTimeoutMS`` is set, a blocked operation will raise "
":exc:`~pymongo.errors.ConnectionFailure` after a timeout. By default "
"``waitQueueTimeoutMS`` is not set."
msgstr ""

#: of pymongo.mongo_client.MongoClient.min_pool_size:1
msgid ""
"The minimum required number of concurrent connections that the pool will "
"maintain to each connected server. Default is 0."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_idle_time_ms:1
msgid ""
"The maximum number of milliseconds that a connection can remain idle in "
"the pool before being removed and replaced. Defaults to `None` (no "
"limit)."
msgstr ""

#: of pymongo.mongo_client.MongoClient.nodes:1
msgid "Set of all currently connected servers."
msgstr ""

#: of pymongo.mongo_client.MongoClient.nodes:3
msgid ""
"When connected to a replica set the value of :attr:`nodes` can change "
"over time as :class:`MongoClient`'s view of the replica set changes. "
":attr:`nodes` can also be an empty set when :class:`MongoClient` is first"
" instantiated and hasn't yet connected to any servers, or a network "
"partition causes it to lose connection to all servers."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_bson_size:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_bson_size:1
msgid "The largest BSON object the connected server accepts in bytes."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_message_size:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_message_size:1
msgid "The largest message the connected server accepts in bytes."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_write_batch_size:1
msgid "The maxWriteBatchSize reported by the server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.max_write_batch_size:7
msgid ""
"Returns a default value when connected to server versions prior to "
"MongoDB 2.6."
msgstr ""

#: of pymongo.mongo_client.MongoClient.local_threshold_ms:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.local_threshold_ms:1
msgid "The local threshold for this instance."
msgstr ""

#: of pymongo.mongo_client.MongoClient.server_selection_timeout:1
msgid "The server selection timeout for this instance in seconds."
msgstr ""

#: of pymongo.mongo_client.MongoClient.start_session:1
msgid "Start a logical session."
msgstr ""

#: of pymongo.mongo_client.MongoClient.start_session:3
msgid ""
"This method takes the same parameters as "
":class:`~pymongo.client_session.SessionOptions`. See the "
":mod:`~pymongo.client_session` module for details and examples."
msgstr ""

#: of pymongo.mongo_client.MongoClient.start_session:7
msgid ""
"Requires MongoDB 3.6. It is an error to call :meth:`start_session` if "
"this client has been authenticated to multiple databases using the "
"deprecated method :meth:`~pymongo.database.Database.authenticate`."
msgstr ""

#: of pymongo.mongo_client.MongoClient.start_session:11
msgid ""
"A :class:`~pymongo.client_session.ClientSession` may only be used with "
"the MongoClient that started it. :class:`ClientSession` instances are "
"**not thread-safe or fork-safe**. They can only be used by one thread or "
"process at a time. A single :class:`ClientSession` cannot be used to run "
"multiple operations concurrently."
msgstr ""

#: of pymongo.mongo_client.MongoClient.start_session:18
msgid "An instance of :class:`~pymongo.client_session.ClientSession`."
msgstr ""

#: of pymongo.mongo_client.MongoClient.list_databases:1
msgid "Get a cursor over the databases of the connected server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.list_databases:6
msgid ""
"`**kwargs` (optional): Optional parameters of the `listDatabases command "
"<https://docs.mongodb.com/manual/reference/command/listDatabases/>`_ can "
"be passed as keyword arguments to this method. The supported options "
"differ by server version."
msgstr ""

#: of pymongo.mongo_client.MongoClient.list_database_names:1
msgid "Get a list of the names of all databases on the connected server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.database_names:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names:1
msgid ""
"**DEPRECATED**: Get a list of the names of all databases on the connected"
" server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.database_names:8
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names:8
msgid "Deprecated. Use :meth:`list_database_names` instead."
msgstr ""

#: of pymongo.mongo_client.MongoClient.drop_database:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:1
msgid "Drop a database."
msgstr ""

#: of pymongo.mongo_client.MongoClient.drop_database:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:3
msgid ""
"Raises :class:`TypeError` if `name_or_database` is not an instance of "
":class:`basestring` (:class:`str` in python 3) or "
":class:`~pymongo.database.Database`."
msgstr ""

#: of pymongo.mongo_client.MongoClient.drop_database:8
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:8
msgid ""
"`name_or_database`: the name of a database to drop, or a "
":class:`~pymongo.database.Database` instance representing the database to"
" drop"
msgstr ""

#: of pymongo.mongo_client.MongoClient.drop_database:17
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:17
msgid ""
"The :attr:`~pymongo.mongo_client.MongoClient.write_concern` of this "
"client is automatically applied to this operation when using MongoDB >= "
"3.4."
msgstr ""

#: of pymongo.mongo_client.MongoClient.drop_database:21
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database:21
msgid ""
"Apply this client's write concern automatically to this operation when "
"connected to MongoDB >= 3.4."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_default_database:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:1
msgid "Get the database named in the MongoDB connection URI."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_default_database:10
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:10
msgid ""
"Useful in scripts where you want to choose which database to use based "
"only on the URI in a configuration file."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_default_database:14
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:14
msgid ""
"`default` (optional): the database name to use if no database name was "
"provided in the URI."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:23
#: pymongo.mongo_client.MongoClient.get_default_database:16
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:23
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:16
msgid ""
"`codec_options` (optional): An instance of "
":class:`~bson.codec_options.CodecOptions`. If ``None`` (the default) the "
":attr:`codec_options` of this :class:`MongoClient` is used."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:27
#: pymongo.mongo_client.MongoClient.get_default_database:20
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:27
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:20
msgid ""
"`read_preference` (optional): The read preference to use. If ``None`` "
"(the default) the :attr:`read_preference` of this :class:`MongoClient` is"
" used. See :mod:`~pymongo.read_preferences` for options."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:31
#: pymongo.mongo_client.MongoClient.get_default_database:24
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:31
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:24
msgid ""
"`write_concern` (optional): An instance of "
":class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the default) "
"the :attr:`write_concern` of this :class:`MongoClient` is used."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:35
#: pymongo.mongo_client.MongoClient.get_default_database:28
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:35
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:28
msgid ""
"`read_concern` (optional): An instance of "
":class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the default) the"
" :attr:`read_concern` of this :class:`MongoClient` is used."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_default_database:33
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:33
msgid ""
"Undeprecated. Added the ``default``, ``codec_options``, "
"``read_preference``, ``write_concern`` and ``read_concern`` parameters."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_default_database:38
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database:38
msgid "Deprecated, use :meth:`get_database` instead."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:1
msgid "Get a :class:`~pymongo.database.Database` with the given name and options."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:4
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:4
msgid ""
"Useful for creating a :class:`~pymongo.database.Database` with different "
"codec options, read preference, and/or write concern from this "
":class:`MongoClient`."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:20
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:20
msgid ""
"`name` (optional): The name of the database - a string. If ``None`` (the "
"default) the database named in the MongoDB connection URI is returned."
msgstr ""

#: of pymongo.mongo_client.MongoClient.get_database:40
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database:40
msgid ""
"The `name` parameter is now optional, defaulting to the database named in"
" the MongoDB connection URI."
msgstr ""

#: of pymongo.mongo_client.MongoClient.server_info:1
msgid "Get information about the MongoDB server we're connected to."
msgstr ""

#: of pymongo.mongo_client.MongoClient.watch:1
msgid "Watch changes on this cluster."
msgstr ""

#: of pymongo.mongo_client.MongoClient.watch:3
msgid ""
"Performs an aggregation with an implicit initial ``$changeStream`` stage "
"and returns a :class:`~pymongo.change_stream.ClusterChangeStream` cursor "
"which iterates over changes on all databases on this cluster."
msgstr ""

#: of pymongo.mongo_client.MongoClient.watch:16
msgid ""
"The :class:`~pymongo.change_stream.ClusterChangeStream` iterable blocks "
"until the next change document is returned or an error is raised. If the "
":meth:`~pymongo.change_stream.ClusterChangeStream.next` method encounters"
" a network error when retrieving a batch from the server, it will "
"automatically attempt to recreate the cursor such that no change events "
"are missed. Any error encountered during the resume attempt indicates "
"there may be an outage and will be raised."
msgstr ""

#: of pymongo.mongo_client.MongoClient.watch:73
msgid "A :class:`~pymongo.change_stream.ClusterChangeStream` cursor."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:1
msgid "DEPRECATED - Send a kill cursors message soon with the given id."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:3
msgid ""
"Raises :class:`TypeError` if `cursor_id` is not an instance of ``(int, "
"long)``. What closing the cursor actually means depends on this client's "
"cursor manager."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:7
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:7
msgid ""
"This method may be called from a :class:`~pymongo.cursor.Cursor` "
"destructor during garbage collection, so it isn't safe to take a lock or "
"do network I/O. Instead, we schedule the cursor to be closed soon on a "
"background thread."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:13
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:13
msgid "`cursor_id`: id of cursor to close"
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:14
#: pymongo.mongo_client.MongoClient.kill_cursors:8
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:14
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:8
msgid ""
"`address` (optional): (host, port) pair of the cursor's server. If it is "
"not provided, the client attempts to close the cursor on the primary or "
"standalone, or a mongos server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.close_cursor:21
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor:21
msgid "Added ``address`` parameter."
msgstr ""

#: of pymongo.mongo_client.MongoClient.kill_cursors:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:1
msgid "DEPRECATED - Send a kill cursors message soon with the given ids."
msgstr ""

#: of pymongo.mongo_client.MongoClient.kill_cursors:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:3
msgid "Raises :class:`TypeError` if `cursor_ids` is not an instance of ``list``."
msgstr ""

#: of pymongo.mongo_client.MongoClient.kill_cursors:7
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:7
msgid "`cursor_ids`: list of cursor ids to kill"
msgstr ""

#: of pymongo.mongo_client.MongoClient.kill_cursors:15
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors:15
msgid ""
"Now accepts an `address` argument. Schedules the cursors to be closed on "
"a background thread instead of sending the message immediately."
msgstr ""

#: of pymongo.mongo_client.MongoClient.set_cursor_manager:1
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager:1
msgid "DEPRECATED - Set this client's cursor manager."
msgstr ""

#: of pymongo.mongo_client.MongoClient.set_cursor_manager:3
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager:3
msgid ""
"Raises :class:`TypeError` if `manager_class` is not a subclass of "
":class:`~pymongo.cursor_manager.CursorManager`. A cursor manager handles "
"closing cursors. Different managers can implement different policies in "
"terms of when to actually kill a cursor that has been closed."
msgstr ""

#: of pymongo.mongo_client.MongoClient.set_cursor_manager:10
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager:10
msgid "`manager_class`: cursor manager to use"
msgstr ""

#: of pymongo.mongo_client.MongoClient.set_cursor_manager:15
#: pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager:15
msgid "Undeprecated."
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_locked:1
msgid ""
"**DEPRECATED**: Is this server locked? While locked, all write operations"
" are blocked, although read operations may still be allowed. Use "
":meth:`unlock` to unlock."
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_locked:5
msgid ""
"Deprecated. Users of MongoDB version 3.2 or newer can run the `currentOp "
"command`_ directly with :meth:`~pymongo.database.Database.command`::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.is_locked:11
msgid ""
"Users of MongoDB version 2.6 and 3.0 can query the \"inprog\" virtual "
"collection::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:1
msgid "**DEPRECATED**: Flush all pending writes to datafiles."
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:7
msgid "Optional parameters can be passed as keyword arguments:"
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:4
msgid "`lock`: If True lock the server to disallow writes."
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:5
msgid "`async`: If True don't block while synchronizing."
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:9
msgid ""
"Starting with Python 3.7 `async` is a reserved keyword. The async option "
"to the fsync command can be passed using a dictionary instead::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:16
msgid ""
"Deprecated. Run the `fsync command`_ directly with "
":meth:`~pymongo.database.Database.command` instead. For example::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:27
msgid "`async` and `lock` can not be used together."
msgstr ""

#: of pymongo.mongo_client.MongoClient.fsync:29
msgid ""
"MongoDB does not support the `async` option on Windows and will raise an "
"exception on that platform."
msgstr ""

#: of pymongo.mongo_client.MongoClient.unlock:1
msgid "**DEPRECATED**: Unlock a previously locked server."
msgstr ""

#: of pymongo.mongo_client.MongoClient.unlock:7
msgid ""
"Deprecated. Users of MongoDB version 3.2 or newer can run the "
"`fsyncUnlock command`_ directly with "
":meth:`~pymongo.database.Database.command`::"
msgstr ""

#: of pymongo.mongo_client.MongoClient.unlock:13
msgid ""
"Users of MongoDB version 2.6 and 3.0 can query the \"unlock\" virtual "
"collection::"
msgstr ""

#: ../../api/pymongo/mongo_replica_set_client.rst:2
msgid ""
":mod:`mongo_replica_set_client` -- Tools for connecting to a MongoDB "
"replica set"
msgstr ""

#: of pymongo.mongo_replica_set_client:1
msgid "Deprecated. See :doc:`/examples/high_availability`."
msgstr ""

#: ../../api/pymongo/mongo_replica_set_client.rst:13
msgid ""
"Get the `db_name` :class:`~pymongo.database.Database` on "
":class:`MongoReplicaSetClient` `c`."
msgstr ""

#: ../../api/pymongo/monitoring.rst:2
msgid ":mod:`monitoring` -- Tools for monitoring driver events."
msgstr ""

#: of pymongo.monitoring:1
msgid "Tools to monitor driver events."
msgstr ""

#: of pymongo.monitoring:5
msgid ""
"Starting in PyMongo 3.11, the monitoring classes outlined below are "
"included in the PyMongo distribution under the "
":mod:`~pymongo.event_loggers` submodule."
msgstr ""

#: of pymongo.monitoring:9
msgid ""
"Use :func:`register` to register global listeners for specific events. "
"Listeners must inherit from one of the abstract classes below and "
"implement the correct functions for that class."
msgstr ""

#: of pymongo.monitoring:13
msgid "For example, a simple command logger might be implemented like this::"
msgstr ""

#: of pymongo.monitoring:40
msgid "Server discovery and monitoring events are also available. For example::"
msgstr ""

#: of pymongo.monitoring:107
msgid "Connection monitoring and pooling events are also available. For example::"
msgstr ""

#: of pymongo.monitoring:150
msgid ""
"Event listeners can also be registered per instance of "
":class:`~pymongo.mongo_client.MongoClient`::"
msgstr ""

#: of pymongo.monitoring:155
msgid ""
"Note that previously registered global listeners are automatically "
"included when configuring per client event listeners. Registering a new "
"global listener will not add that listener to existing client instances."
msgstr ""

#: of pymongo.monitoring:159
msgid ""
"Events are delivered **synchronously**. Application threads block waiting"
" for event handlers (e.g. :meth:`~CommandListener.started`) to return. "
"Care must be taken to ensure that your event handlers are efficient "
"enough to not adversely affect overall application performance."
msgstr ""

#: of pymongo.monitoring:164
msgid ""
"The command documents published through this API are *not* copies. If you"
" intend to modify them in any way you must copy them in your event "
"handler first."
msgstr ""

#: of pymongo.monitoring.register:1
msgid "Register a global event listener."
msgstr ""

#: of pymongo.monitoring.register:4
msgid ""
"`listener`: A subclasses of :class:`CommandListener`, "
":class:`ServerHeartbeatListener`, :class:`ServerListener`, "
":class:`TopologyListener`, or :class:`ConnectionPoolListener`."
msgstr ""

#: of pymongo.monitoring.CommandListener:1
msgid "Abstract base class for command listeners."
msgstr ""

#: of pymongo.monitoring.CommandListener:3
msgid ""
"Handles `CommandStartedEvent`, `CommandSucceededEvent`, and "
"`CommandFailedEvent`."
msgstr ""

#: of pymongo.monitoring.ServerListener:1
msgid ""
"Abstract base class for server listeners. Handles `ServerOpeningEvent`, "
"`ServerDescriptionChangedEvent`, and `ServerClosedEvent`."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatListener:1
msgid "Abstract base class for server heartbeat listeners."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatListener:3
msgid ""
"Handles `ServerHeartbeatStartedEvent`, `ServerHeartbeatSucceededEvent`, "
"and `ServerHeartbeatFailedEvent`."
msgstr ""

#: of pymongo.monitoring.TopologyListener:1
msgid ""
"Abstract base class for topology monitoring listeners. Handles "
"`TopologyOpenedEvent`, `TopologyDescriptionChangedEvent`, and "
"`TopologyClosedEvent`."
msgstr ""

#: of pymongo.monitoring.ConnectionPoolListener:1
msgid "Abstract base class for connection pool listeners."
msgstr ""

#: of pymongo.monitoring.ConnectionPoolListener:3
msgid ""
"Handles all of the connection pool events defined in the Connection "
"Monitoring and Pooling Specification: :class:`PoolCreatedEvent`, "
":class:`PoolClearedEvent`, :class:`PoolClosedEvent`, "
":class:`ConnectionCreatedEvent`, :class:`ConnectionReadyEvent`, "
":class:`ConnectionClosedEvent`, :class:`ConnectionCheckOutStartedEvent`, "
":class:`ConnectionCheckOutFailedEvent`, "
":class:`ConnectionCheckedOutEvent`, and "
":class:`ConnectionCheckedInEvent`."
msgstr ""

#: of pymongo.monitoring.CommandStartedEvent:1
msgid "Event published when a command starts."
msgstr ""

#: of pymongo.monitoring.CommandStartedEvent:4
msgid "`command`: The command document."
msgstr ""

#: of pymongo.monitoring.CommandStartedEvent:5
msgid "`database_name`: The name of the database this command was run against."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:7
#: pymongo.monitoring.CommandStartedEvent:6
#: pymongo.monitoring.CommandSucceededEvent:7
msgid "`request_id`: The request id for this operation."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:8
#: pymongo.monitoring.CommandStartedEvent:7
#: pymongo.monitoring.CommandSucceededEvent:8
msgid ""
"`connection_id`: The address (host, port) of the server this command was "
"sent to."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:10
#: pymongo.monitoring.CommandStartedEvent:9
#: pymongo.monitoring.CommandSucceededEvent:10
msgid "`operation_id`: An optional identifier for a series of related events."
msgstr ""

#: of pymongo.monitoring.CommandStartedEvent.command:1
msgid "The command document."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.command_name:1
#: pymongo.monitoring.CommandStartedEvent.command_name:1
#: pymongo.monitoring.CommandSucceededEvent.command_name:1
msgid "The command name."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.connection_id:1
#: pymongo.monitoring.CommandStartedEvent.connection_id:1
#: pymongo.monitoring.CommandSucceededEvent.connection_id:1
msgid "The address (host, port) of the server this command was sent to."
msgstr ""

#: of pymongo.monitoring.CommandStartedEvent.database_name:1
msgid "The name of the database this command was run against."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.operation_id:1
#: pymongo.monitoring.CommandStartedEvent.operation_id:1
#: pymongo.monitoring.CommandSucceededEvent.operation_id:1
msgid "An id for this series of events or None."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.request_id:1
#: pymongo.monitoring.CommandStartedEvent.request_id:1
#: pymongo.monitoring.CommandSucceededEvent.request_id:1
msgid "The request id for this operation."
msgstr ""

#: of pymongo.monitoring.CommandSucceededEvent:1
msgid "Event published when a command succeeds."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:4
#: pymongo.monitoring.CommandSucceededEvent:4
msgid "`duration`: The command duration as a datetime.timedelta."
msgstr ""

#: of pymongo.monitoring.CommandSucceededEvent:5
msgid "`reply`: The server reply document."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:6
#: pymongo.monitoring.CommandSucceededEvent:6
msgid "`command_name`: The command name."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.duration_micros:1
#: pymongo.monitoring.CommandSucceededEvent.duration_micros:1
msgid "The duration of this operation in microseconds."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent.failure:1
#: pymongo.monitoring.CommandSucceededEvent.reply:1
msgid "The server failure document for this operation."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:1
msgid "Event published when a command fails."
msgstr ""

#: of pymongo.monitoring.CommandFailedEvent:5
msgid "`failure`: The server reply document."
msgstr ""

#: of pymongo.monitoring.ServerDescriptionChangedEvent:1
msgid "Published when server description changes."
msgstr ""

#: of pymongo.monitoring.ServerDescriptionChangedEvent.new_description:1
msgid "The new :class:`~pymongo.server_description.ServerDescription`."
msgstr ""

#: of pymongo.monitoring.ServerDescriptionChangedEvent.previous_description:1
msgid "The previous :class:`~pymongo.server_description.ServerDescription`."
msgstr ""

#: of pymongo.monitoring.ServerClosedEvent.server_address:1
#: pymongo.monitoring.ServerDescriptionChangedEvent.server_address:1
#: pymongo.monitoring.ServerOpeningEvent.server_address:1
msgid "The address (host, port) pair of the server"
msgstr ""

#: of pymongo.monitoring.ServerClosedEvent.topology_id:1
#: pymongo.monitoring.ServerDescriptionChangedEvent.topology_id:1
#: pymongo.monitoring.ServerOpeningEvent.topology_id:1
#: pymongo.monitoring.TopologyClosedEvent.topology_id:1
#: pymongo.monitoring.TopologyDescriptionChangedEvent.topology_id:1
#: pymongo.monitoring.TopologyOpenedEvent.topology_id:1
msgid "A unique identifier for the topology this server is a part of."
msgstr ""

#: of pymongo.monitoring.ServerOpeningEvent:1
msgid "Published when server is initialized."
msgstr ""

#: of pymongo.monitoring.ServerClosedEvent:1
msgid "Published when server is closed."
msgstr ""

#: of pymongo.monitoring.TopologyDescriptionChangedEvent:1
msgid "Published when the topology description changes."
msgstr ""

#: of pymongo.monitoring.TopologyDescriptionChangedEvent.new_description:1
msgid "The new :class:`~pymongo.topology_description.TopologyDescription`."
msgstr ""

#: of pymongo.monitoring.TopologyDescriptionChangedEvent.previous_description:1
msgid "The previous :class:`~pymongo.topology_description.TopologyDescription`."
msgstr ""

#: of pymongo.monitoring.TopologyOpenedEvent:1
msgid "Published when the topology is initialized."
msgstr ""

#: of pymongo.monitoring.TopologyClosedEvent:1
msgid "Published when the topology is closed."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatStartedEvent:1
msgid "Published when a heartbeat is started."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent.connection_id:1
#: pymongo.monitoring.ServerHeartbeatStartedEvent.connection_id:1
#: pymongo.monitoring.ServerHeartbeatSucceededEvent.connection_id:1
msgid "The address (host, port) of the server this heartbeat was sent to."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatSucceededEvent:1
msgid "Fired when the server heartbeat succeeds."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent.awaited:1
#: pymongo.monitoring.ServerHeartbeatSucceededEvent.awaited:1
msgid "Whether the heartbeat was awaited."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent.awaited:3
#: pymongo.monitoring.ServerHeartbeatSucceededEvent.awaited:3
msgid ""
"If true, then :meth:`duration` reflects the sum of the round trip time to"
" the server and the time that the server waited before sending a "
"response."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent.duration:1
#: pymongo.monitoring.ServerHeartbeatSucceededEvent.duration:1
msgid "The duration of this heartbeat in microseconds."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatSucceededEvent.reply:1
msgid "An instance of :class:`~pymongo.ismaster.IsMaster`."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent:1
msgid ""
"Fired when the server heartbeat fails, either with an \"ok: 0\" or a "
"socket exception."
msgstr ""

#: of pymongo.monitoring.ServerHeartbeatFailedEvent.reply:1
msgid "A subclass of :exc:`Exception`."
msgstr ""

#: of pymongo.monitoring.PoolCreatedEvent:1
msgid "Published when a Connection Pool is created."
msgstr ""

#: of pymongo.monitoring.PoolClearedEvent:4
#: pymongo.monitoring.PoolClosedEvent:4 pymongo.monitoring.PoolCreatedEvent:4
msgid ""
"`address`: The address (host, port) pair of the server this Pool is "
"attempting to connect to."
msgstr ""

#: of pymongo.monitoring.PoolClearedEvent.address:1
#: pymongo.monitoring.PoolClosedEvent.address:1
#: pymongo.monitoring.PoolCreatedEvent.address:1
msgid ""
"The address (host, port) pair of the server the pool is attempting to "
"connect to."
msgstr ""

#: of pymongo.monitoring.PoolCreatedEvent.options:1
msgid "Any non-default pool options that were set on this Connection Pool."
msgstr ""

#: of pymongo.monitoring.PoolClearedEvent:1
msgid "Published when a Connection Pool is cleared."
msgstr ""

#: of pymongo.monitoring.PoolClosedEvent:1
msgid "Published when a Connection Pool is closed."
msgstr ""

#: of pymongo.monitoring.ConnectionCreatedEvent:1
msgid "Published when a Connection Pool creates a Connection object."
msgstr ""

#: of pymongo.monitoring.ConnectionCreatedEvent:3
msgid ""
"NOTE: This connection is not ready for use until the "
":class:`ConnectionReadyEvent` is published."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent:4
#: pymongo.monitoring.ConnectionCheckOutStartedEvent:4
#: pymongo.monitoring.ConnectionCheckedInEvent:4
#: pymongo.monitoring.ConnectionCheckedOutEvent:4
#: pymongo.monitoring.ConnectionClosedEvent:4
#: pymongo.monitoring.ConnectionCreatedEvent:7
#: pymongo.monitoring.ConnectionReadyEvent:4
msgid ""
"`address`: The address (host, port) pair of the server this Connection is"
" attempting to connect to."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckedInEvent:6
#: pymongo.monitoring.ConnectionCheckedOutEvent:6
#: pymongo.monitoring.ConnectionClosedEvent:6
#: pymongo.monitoring.ConnectionCreatedEvent:9
#: pymongo.monitoring.ConnectionReadyEvent:6
msgid "`connection_id`: The integer ID of the Connection in this Pool."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent.address:1
#: pymongo.monitoring.ConnectionCheckOutStartedEvent.address:1
#: pymongo.monitoring.ConnectionCheckedInEvent.address:1
#: pymongo.monitoring.ConnectionCheckedOutEvent.address:1
#: pymongo.monitoring.ConnectionClosedEvent.address:1
#: pymongo.monitoring.ConnectionCreatedEvent.address:1
#: pymongo.monitoring.ConnectionReadyEvent.address:1
msgid ""
"The address (host, port) pair of the server this connection is attempting"
" to connect to."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckedInEvent.connection_id:1
#: pymongo.monitoring.ConnectionCheckedOutEvent.connection_id:1
#: pymongo.monitoring.ConnectionClosedEvent.connection_id:1
#: pymongo.monitoring.ConnectionCreatedEvent.connection_id:1
#: pymongo.monitoring.ConnectionReadyEvent.connection_id:1
msgid "The ID of the Connection."
msgstr ""

#: of pymongo.monitoring.ConnectionReadyEvent:1
msgid "Published when a Connection has finished its setup, and is ready to use."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedReason:1
msgid ""
"An enum that defines values for `reason` on a "
":class:`ConnectionClosedEvent`."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedReason.ERROR:1
msgid "The connection experienced an error, making it no longer valid."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedReason.IDLE:1
msgid "The connection became stale by being idle for too long (maxIdleTimeMS)."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedReason.POOL_CLOSED:1
msgid "The pool was closed, making the connection no longer valid."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedReason.STALE:1
msgid "The pool was cleared, making the connection no longer valid."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedEvent:1
msgid "Published when a Connection is closed."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedEvent:7
msgid "`reason`: A reason explaining why this connection was closed."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedEvent.reason:1
msgid "A reason explaining why this connection was closed."
msgstr ""

#: of pymongo.monitoring.ConnectionClosedEvent.reason:3
msgid ""
"The reason must be one of the strings from the "
":class:`ConnectionClosedReason` enum."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutStartedEvent:1
msgid "Published when the driver starts attempting to check out a connection."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedReason:1
msgid ""
"An enum that defines values for `reason` on a "
":class:`ConnectionCheckOutFailedEvent`."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedReason.CONN_ERROR:1
msgid ""
"The connection check out attempt experienced an error while setting up a "
"new connection."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedReason.POOL_CLOSED:1
msgid "The pool was previously closed, and cannot provide new connections."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedReason.TIMEOUT:1
msgid "The connection check out attempt exceeded the specified timeout."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent:1
msgid "Published when the driver's attempt to check out a connection fails."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent:6
msgid "`reason`: A reason explaining why connection check out failed."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent.reason:1
msgid "A reason explaining why connection check out failed."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckOutFailedEvent.reason:3
msgid ""
"The reason must be one of the strings from the "
":class:`ConnectionCheckOutFailedReason` enum."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckedOutEvent:1
msgid "Published when the driver successfully checks out a Connection."
msgstr ""

#: of pymongo.monitoring.ConnectionCheckedInEvent:1
msgid "Published when the driver checks in a Connection into the Pool."
msgstr ""

#: ../../api/pymongo/operations.rst:2
msgid ":mod:`operations` -- Operation class definitions"
msgstr ""

#: of pymongo.operations:1
msgid "Operation class definitions."
msgstr ""

#: of pymongo.operations.DeleteMany:1
msgid "Create a DeleteMany instance."
msgstr ""

#: of pymongo.operations.DeleteMany:3 pymongo.operations.DeleteOne:3
#: pymongo.operations.InsertOne:3 pymongo.operations.ReplaceOne:3
#: pymongo.operations.UpdateMany:3 pymongo.operations.UpdateOne:3
msgid "For use with :meth:`~pymongo.collection.Collection.bulk_write`."
msgstr ""

#: of pymongo.operations.DeleteOne:1
msgid "Create a DeleteOne instance."
msgstr ""

#: of pymongo.operations.IndexModel:1
msgid "Create an Index instance."
msgstr ""

#: of pymongo.operations.IndexModel:3
msgid "For use with :meth:`~pymongo.collection.Collection.create_indexes`."
msgstr ""

#: of pymongo.operations.IndexModel:33
msgid ""
"`partialFilterExpression`: A document that specifies a filter for a "
"partial index. Requires MongoDB >= 3.2."
msgstr ""

#: of pymongo.operations.IndexModel:35
msgid ""
"`collation`: An instance of :class:`~pymongo.collation.Collation` that "
"specifies the collation to use in MongoDB >= 3.4."
msgstr ""

#: of pymongo.operations.IndexModel:37
msgid ""
"`wildcardProjection`: Allows users to include or exclude specific field "
"paths from a `wildcard index`_ using the { \"$**\" : 1} key pattern. "
"Requires MongoDB >= 4.2."
msgstr ""

#: of pymongo.operations.IndexModel:56
msgid "Added the ``partialFilterExpression`` option to support partial indexes."
msgstr ""

#: of pymongo.operations.IndexModel.document:1
msgid "An index document suitable for passing to the createIndexes command."
msgstr ""

#: of pymongo.operations.InsertOne:1
msgid "Create an InsertOne instance."
msgstr ""

#: of pymongo.operations.InsertOne:6
msgid ""
"`document`: The document to insert. If the document is missing an _id "
"field one will be added."
msgstr ""

#: of pymongo.operations.ReplaceOne:1
msgid "Create a ReplaceOne instance."
msgstr ""

#: of pymongo.operations.UpdateMany:1
msgid "Create an UpdateMany instance."
msgstr ""

#: of pymongo.operations.UpdateMany:13 pymongo.operations.UpdateOne:13
msgid ""
"`array_filters` (optional): A list of filters specifying which array "
"elements an update should apply. Requires MongoDB 3.6+."
msgstr ""

#: of pymongo.operations.UpdateMany:22 pymongo.operations.UpdateOne:22
msgid "Added the `hint` option."
msgstr ""

#: of pymongo.operations.UpdateMany:26 pymongo.operations.UpdateOne:26
msgid "Added the `array_filters` option."
msgstr ""

#: of pymongo.operations.UpdateOne:1
msgid "Represents an update_one operation."
msgstr ""

#: ../../api/pymongo/pool.rst:2
msgid ":mod:`pool` -- Pool module for use with a MongoDB client."
msgstr ""

#: of pymongo.pool.SocketInfo:1
msgid "Store a socket with some metadata."
msgstr ""

#: of pymongo.pool.SocketInfo:4
msgid "`sock`: a raw socket object"
msgstr ""

#: of pymongo.pool.SocketInfo:5
msgid "`pool`: a Pool instance"
msgstr ""

#: of pymongo.pool.SocketInfo:6
msgid "`address`: the server's (host, port)"
msgstr ""

#: of pymongo.pool.SocketInfo:7
msgid "`id`: the id of this socket in it's pool"
msgstr ""

#: of pymongo.pool.SocketInfo.authenticate:1
msgid "Log in to the server and store these credentials in `authset`."
msgstr ""

#: of pymongo.pool.SocketInfo.authenticate:3
#: pymongo.pool.SocketInfo.legacy_write:3
#: pymongo.pool.SocketInfo.write_command:3
msgid "Can raise ConnectionFailure or OperationFailure."
msgstr ""

#: of pymongo.pool.SocketInfo.authenticate:6
msgid "`credentials`: A MongoCredential."
msgstr ""

#: of pymongo.pool.SocketInfo.check_auth:1
msgid "Update this socket's authentication."
msgstr ""

#: of pymongo.pool.SocketInfo.check_auth:3
msgid ""
"Log in or out to bring this socket's credentials up to date with those "
"provided. Can raise ConnectionFailure or OperationFailure."
msgstr ""

#: of pymongo.pool.SocketInfo.check_auth:7
msgid "`all_credentials`: dict, maps auth source to MongoCredential."
msgstr ""

#: of pymongo.pool.SocketInfo.close_socket:1
msgid "Close this connection with a reason."
msgstr ""

#: of pymongo.pool.SocketInfo.command:1
msgid "Execute a command or raise an error."
msgstr ""

#: of pymongo.pool.SocketInfo.command:4
msgid "`dbname`: name of the database on which to run the command"
msgstr ""

#: of pymongo.pool.SocketInfo.command:5
msgid "`spec`: a command document as a dict, SON, or mapping object"
msgstr ""

#: of pymongo.pool.SocketInfo.command:6
msgid "`slave_ok`: whether to set the SlaveOkay wire protocol bit"
msgstr ""

#: of pymongo.pool.SocketInfo.command:7
msgid "`read_preference`: a read preference"
msgstr ""

#: of pymongo.pool.SocketInfo.command:8
msgid "`codec_options`: a CodecOptions instance"
msgstr ""

#: of pymongo.pool.SocketInfo.command:9
msgid "`check`: raise OperationFailure if there are errors"
msgstr ""

#: of pymongo.pool.SocketInfo.command:10
msgid "`allowable_errors`: errors to ignore if `check` is True"
msgstr ""

#: of pymongo.pool.SocketInfo.command:11
msgid "`check_keys`: if True, check `spec` for invalid keys"
msgstr ""

#: of pymongo.pool.SocketInfo.command:12
msgid "`read_concern`: The read concern for this command."
msgstr ""

#: of pymongo.pool.SocketInfo.command:13
msgid "`write_concern`: The write concern for this command."
msgstr ""

#: of pymongo.pool.SocketInfo.command:14
msgid ""
"`parse_write_concern_error`: Whether to parse the ``writeConcernError`` "
"field in the command response."
msgstr ""

#: of pymongo.pool.SocketInfo.command:16
msgid "`collation`: The collation for this command."
msgstr ""

#: of pymongo.pool.SocketInfo.command:17
msgid "`session`: optional ClientSession instance."
msgstr ""

#: of pymongo.pool.SocketInfo.command:18
msgid "`client`: optional MongoClient for gossipping $clusterTime."
msgstr ""

#: of pymongo.pool.SocketInfo.command:19
msgid "`retryable_write`: True if this command is a retryable write."
msgstr ""

#: of pymongo.pool.SocketInfo.command:20
msgid "`publish_events`: Should we publish events for this command?"
msgstr ""

#: of pymongo.pool.SocketInfo.command:21
msgid ""
"`user_fields` (optional): Response fields that should be decoded using "
"the TypeDecoders from codec_options, passed to "
"bson._decode_all_selective."
msgstr ""

#: of pymongo.pool.SocketInfo.idle_time_seconds:1
msgid "Seconds since this socket was last checked into its pool."
msgstr ""

#: of pymongo.pool.SocketInfo.legacy_write:1
msgid "Send OP_INSERT, etc., optionally returning response as a dict."
msgstr ""

#: of pymongo.pool.SocketInfo.legacy_write:6
#: pymongo.pool.SocketInfo.write_command:6
msgid "`request_id`: an int."
msgstr ""

#: of pymongo.pool.SocketInfo.legacy_write:7
msgid ""
"`msg`: bytes, an OP_INSERT, OP_UPDATE, or OP_DELETE message, perhaps with"
" a getlasterror command appended."
msgstr ""

#: of pymongo.pool.SocketInfo.legacy_write:9
msgid "`max_doc_size`: size in bytes of the largest document in `msg`."
msgstr ""

#: of pymongo.pool.SocketInfo.legacy_write:10
msgid "`with_last_error`: True if a getlasterror command is appended."
msgstr ""

#: of pymongo.pool.SocketInfo.receive_message:1
msgid "Receive a raw BSON message or raise ConnectionFailure."
msgstr ""

#: of pymongo.pool.SocketInfo.receive_message:3
msgid "If any exception is raised, the socket is closed."
msgstr ""

#: of pymongo.pool.SocketInfo.send_cluster_time:1
msgid "Add cluster time for MongoDB >= 3.6."
msgstr ""

#: of pymongo.pool.SocketInfo.send_message:1
msgid "Send a raw BSON message or raise ConnectionFailure."
msgstr ""

#: of pymongo.pool.SocketInfo.send_message:3
msgid "If a network exception is raised, the socket is closed."
msgstr ""

#: of pymongo.pool.SocketInfo.socket_closed:1
msgid "Return True if we know socket has been closed, False otherwise."
msgstr ""

#: of pymongo.pool.SocketInfo.validate_session:1
msgid "Validate this session before use with client."
msgstr ""

#: of pymongo.pool.SocketInfo.validate_session:3
msgid ""
"Raises error if this session is logged in as a different user or the "
"client is not the one that created the session."
msgstr ""

#: of pymongo.pool.SocketInfo.write_command:1
msgid "Send \"insert\" etc. command, returning response as a dict."
msgstr ""

#: of pymongo.pool.SocketInfo.write_command:7
msgid "`msg`: bytes, the command message."
msgstr ""

#: ../../api/pymongo/read_concern.rst:2
msgid ":mod:`read_concern` -- Tools for working with read concern."
msgstr ""

#: of pymongo.read_concern:1
msgid "Tools for working with read concerns."
msgstr ""

#: of pymongo.read_concern.ReadConcern:2
msgid ""
"`level`: (string) The read concern level specifies the level of isolation"
" for read operations.  For example, a read operation using a read concern"
" level of ``majority`` will only return data that has been written to a "
"majority of nodes. If the level is left unspecified, the server default "
"will be used."
msgstr ""

#: of pymongo.read_concern.ReadConcern.document:1
msgid "The document representation of this read concern."
msgstr ""

#: of pymongo.read_concern.ReadConcern.document:4
msgid ""
":class:`ReadConcern` is immutable. Mutating the value of :attr:`document`"
" does not mutate this :class:`ReadConcern`."
msgstr ""

#: of pymongo.read_concern.ReadConcern.level:1
msgid "The read concern level."
msgstr ""

#: of pymongo.read_concern.ReadConcern.ok_for_legacy:1
msgid ""
"Return ``True`` if this read concern is compatible with old wire protocol"
" versions."
msgstr ""

#: ../../api/pymongo/read_preferences.rst:2
msgid ""
":mod:`read_preferences` -- Utilities for choosing which member of a "
"replica set to read from."
msgstr ""

#: of pymongo.read_preferences:1
msgid "Utilities for choosing which member of a replica set to read from."
msgstr ""

#: of pymongo.read_preferences.Primary:1
msgid "Primary read preference."
msgstr ""

#: of pymongo.read_preferences.Primary:3
msgid ""
"When directly connected to one mongod queries are allowed if the server "
"is standalone or a replica set primary."
msgstr ""

#: of pymongo.read_preferences.Primary:5
msgid "When connected to a mongos queries are sent to the primary of a shard."
msgstr ""

#: of pymongo.read_preferences.Primary:6
msgid ""
"When connected to a replica set queries are sent to the primary of the "
"replica set."
msgstr ""

#: of pymongo.read_preferences.Nearest.document:1
#: pymongo.read_preferences.Primary.document:1
#: pymongo.read_preferences.PrimaryPreferred.document:1
#: pymongo.read_preferences.Secondary.document:1
#: pymongo.read_preferences.SecondaryPreferred.document:1
msgid "Read preference as a document."
msgstr ""

#: of pymongo.read_preferences.Nearest.mode:1
#: pymongo.read_preferences.Primary.mode:1
#: pymongo.read_preferences.PrimaryPreferred.mode:1
#: pymongo.read_preferences.Secondary.mode:1
#: pymongo.read_preferences.SecondaryPreferred.mode:1
msgid "The mode of this read preference instance."
msgstr ""

#: of pymongo.read_preferences.Nearest.name:1
#: pymongo.read_preferences.Primary.name:1
#: pymongo.read_preferences.PrimaryPreferred.name:1
#: pymongo.read_preferences.Secondary.name:1
#: pymongo.read_preferences.SecondaryPreferred.name:1
msgid "The name of this read preference."
msgstr ""

#: of pymongo.read_preferences.PrimaryPreferred:1
msgid "PrimaryPreferred read preference."
msgstr ""

#: of pymongo.read_preferences.Nearest:3
#: pymongo.read_preferences.PrimaryPreferred:3
#: pymongo.read_preferences.Secondary:3
#: pymongo.read_preferences.SecondaryPreferred:3
msgid ""
"When directly connected to one mongod queries are allowed to standalone "
"servers, to a replica set primary, or to replica set secondaries."
msgstr ""

#: of pymongo.read_preferences.PrimaryPreferred:5
msgid ""
"When connected to a mongos queries are sent to the primary of a shard if "
"available, otherwise a shard secondary."
msgstr ""

#: of pymongo.read_preferences.PrimaryPreferred:7
msgid ""
"When connected to a replica set queries are sent to the primary if "
"available, otherwise a secondary."
msgstr ""

#: of pymongo.read_preferences.PrimaryPreferred:11
msgid "`tag_sets`: The :attr:`~tag_sets` to use if the primary is not available."
msgstr ""

#: of pymongo.read_preferences.Nearest:12
#: pymongo.read_preferences.PrimaryPreferred:13
#: pymongo.read_preferences.Secondary:12
#: pymongo.read_preferences.SecondaryPreferred:12
msgid ""
"`max_staleness`: (integer, in seconds) The maximum estimated length of "
"time a replica set secondary can fall behind the primary in replication "
"before it will no longer be selected for operations. Default -1, meaning "
"no maximum. If it is set, it must be at least 90 seconds."
msgstr ""

#: of pymongo.read_preferences.PrimaryPreferred:18
msgid "`hedge`: The :attr:`~hedge` to use if the primary is not available."
msgstr ""

#: of pymongo.read_preferences.Nearest:19
#: pymongo.read_preferences.PrimaryPreferred:20
#: pymongo.read_preferences.Secondary:19
#: pymongo.read_preferences.SecondaryPreferred:19
msgid "Added ``hedge`` parameter."
msgstr ""

#: of pymongo.read_preferences.Nearest.hedge:1
#: pymongo.read_preferences.PrimaryPreferred.hedge:1
#: pymongo.read_preferences.Secondary.hedge:1
#: pymongo.read_preferences.SecondaryPreferred.hedge:1
msgid "The read preference ``hedge`` parameter."
msgstr ""

#: of pymongo.read_preferences.Nearest.hedge:3
#: pymongo.read_preferences.PrimaryPreferred.hedge:3
#: pymongo.read_preferences.Secondary.hedge:3
#: pymongo.read_preferences.SecondaryPreferred.hedge:3
msgid ""
"A dictionary that configures how the server will perform hedged reads. It"
" consists of the following keys:"
msgstr ""

#: of pymongo.read_preferences.Nearest.hedge:6
#: pymongo.read_preferences.PrimaryPreferred.hedge:6
#: pymongo.read_preferences.Secondary.hedge:6
#: pymongo.read_preferences.SecondaryPreferred.hedge:6
msgid "``enabled``: Enables or disables hedged reads in sharded clusters."
msgstr ""

#: of pymongo.read_preferences.Nearest.hedge:8
#: pymongo.read_preferences.PrimaryPreferred.hedge:8
#: pymongo.read_preferences.Secondary.hedge:8
#: pymongo.read_preferences.SecondaryPreferred.hedge:8
msgid ""
"Hedged reads are automatically enabled in MongoDB 4.4+ when using a "
"``nearest`` read preference. To explicitly enable hedged reads, set the "
"``enabled`` key  to ``true``::"
msgstr ""

#: of pymongo.read_preferences.Nearest.hedge:14
#: pymongo.read_preferences.PrimaryPreferred.hedge:14
#: pymongo.read_preferences.Secondary.hedge:14
#: pymongo.read_preferences.SecondaryPreferred.hedge:14
msgid ""
"To explicitly disable hedged reads, set the ``enabled`` key  to "
"``False``::"
msgstr ""

#: of pymongo.read_preferences.Nearest.max_staleness:1
#: pymongo.read_preferences.PrimaryPreferred.max_staleness:1
#: pymongo.read_preferences.Secondary.max_staleness:1
#: pymongo.read_preferences.SecondaryPreferred.max_staleness:1
msgid ""
"The maximum estimated length of time (in seconds) a replica set secondary"
" can fall behind the primary in replication before it will no longer be "
"selected for operations, or -1 for no maximum."
msgstr ""

#: of pymongo.read_preferences.Nearest.min_wire_version:1
#: pymongo.read_preferences.PrimaryPreferred.min_wire_version:1
#: pymongo.read_preferences.Secondary.min_wire_version:1
#: pymongo.read_preferences.SecondaryPreferred.min_wire_version:1
msgid "The wire protocol version the server must support."
msgstr ""

#: of pymongo.read_preferences.Nearest.min_wire_version:3
#: pymongo.read_preferences.PrimaryPreferred.min_wire_version:3
#: pymongo.read_preferences.Secondary.min_wire_version:3
#: pymongo.read_preferences.SecondaryPreferred.min_wire_version:3
msgid ""
"Some read preferences impose version requirements on all servers (e.g. "
"maxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5)."
msgstr ""

#: of pymongo.read_preferences.Nearest.min_wire_version:6
#: pymongo.read_preferences.PrimaryPreferred.min_wire_version:6
#: pymongo.read_preferences.Secondary.min_wire_version:6
#: pymongo.read_preferences.SecondaryPreferred.min_wire_version:6
msgid ""
"All servers' maxWireVersion must be at least this read preference's "
"`min_wire_version`, or the driver raises "
":exc:`~pymongo.errors.ConfigurationError`."
msgstr ""

#: of pymongo.read_preferences.Nearest.mongos_mode:1
#: pymongo.read_preferences.PrimaryPreferred.mongos_mode:1
#: pymongo.read_preferences.Secondary.mongos_mode:1
#: pymongo.read_preferences.SecondaryPreferred.mongos_mode:1
msgid "The mongos mode of this read preference."
msgstr ""

#: of pymongo.read_preferences.Nearest.tag_sets:1
#: pymongo.read_preferences.PrimaryPreferred.tag_sets:1
#: pymongo.read_preferences.Secondary.tag_sets:1
#: pymongo.read_preferences.SecondaryPreferred.tag_sets:1
msgid ""
"Set ``tag_sets`` to a list of dictionaries like [{'dc': 'ny'}] to read "
"only from members whose ``dc`` tag has the value ``\"ny\"``. To specify a"
" priority-order for tag sets, provide a list of tag sets: ``[{'dc': "
"'ny'}, {'dc': 'la'}, {}]``. A final, empty tag set, ``{}``, means \"read "
"from any member that matches the mode, ignoring tags.\" "
"MongoReplicaSetClient tries each set of tags in turn until it finds a set"
" of tags with at least one matching member."
msgstr ""

#: of pymongo.read_preferences.Nearest.tag_sets:9
#: pymongo.read_preferences.PrimaryPreferred.tag_sets:9
#: pymongo.read_preferences.Secondary.tag_sets:9
#: pymongo.read_preferences.SecondaryPreferred.tag_sets:9
msgid ""
"`Data-Center Awareness "
"<http://www.mongodb.org/display/DOCS/Data+Center+Awareness>`_"
msgstr ""

#: of pymongo.read_preferences.Secondary:1
msgid "Secondary read preference."
msgstr ""

#: of pymongo.read_preferences.Secondary:5
msgid ""
"When connected to a mongos queries are distributed among shard "
"secondaries. An error is raised if no secondaries are available."
msgstr ""

#: of pymongo.read_preferences.Secondary:7
msgid ""
"When connected to a replica set queries are distributed among "
"secondaries. An error is raised if no secondaries are available."
msgstr ""

#: of pymongo.read_preferences.Nearest:11 pymongo.read_preferences.Secondary:11
#: pymongo.read_preferences.SecondaryPreferred:11
msgid "`tag_sets`: The :attr:`~tag_sets` for this read preference."
msgstr ""

#: of pymongo.read_preferences.Nearest:17 pymongo.read_preferences.Secondary:17
#: pymongo.read_preferences.SecondaryPreferred:17
msgid "`hedge`: The :attr:`~hedge` for this read preference."
msgstr ""

#: of pymongo.read_preferences.SecondaryPreferred:1
msgid "SecondaryPreferred read preference."
msgstr ""

#: of pymongo.read_preferences.SecondaryPreferred:5
msgid ""
"When connected to a mongos queries are distributed among shard "
"secondaries, or the shard primary if no secondary is available."
msgstr ""

#: of pymongo.read_preferences.SecondaryPreferred:7
msgid ""
"When connected to a replica set queries are distributed among "
"secondaries, or the primary if no secondary is available."
msgstr ""

#: of pymongo.read_preferences.Nearest:1
msgid "Nearest read preference."
msgstr ""

#: of pymongo.read_preferences.Nearest:5
msgid ""
"When connected to a mongos queries are distributed among all members of a"
" shard."
msgstr ""

#: of pymongo.read_preferences.Nearest:7
msgid "When connected to a replica set queries are distributed among all members."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:1
msgid "An enum that defines the read preference modes supported by PyMongo."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:3
msgid "See :doc:`/examples/high_availability` for code examples."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:5
msgid "A read preference is used in three cases:"
msgstr ""

#: of pymongo.read_preferences.ReadPreference:7
msgid ":class:`~pymongo.mongo_client.MongoClient` connected to a single mongod:"
msgstr ""

#: of pymongo.read_preferences.ReadPreference:9
msgid ""
"``PRIMARY``: Queries are allowed if the server is standalone or a replica"
" set primary."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:11
msgid ""
"All other modes allow queries to standalone servers, to a replica set "
"primary, or to replica set secondaries."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:14
msgid ""
":class:`~pymongo.mongo_client.MongoClient` initialized with the "
"``replicaSet`` option:"
msgstr ""

#: of pymongo.read_preferences.ReadPreference:17
msgid ""
"``PRIMARY``: Read from the primary. This is the default, and provides the"
" strongest consistency. If no primary is available, raise "
":class:`~pymongo.errors.AutoReconnect`."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:21
msgid ""
"``PRIMARY_PREFERRED``: Read from the primary if available, or if there is"
" none, read from a secondary."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:24
msgid ""
"``SECONDARY``: Read from a secondary. If no secondary is available, raise"
" :class:`~pymongo.errors.AutoReconnect`."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:27
msgid ""
"``SECONDARY_PREFERRED``: Read from a secondary if available, otherwise "
"from the primary."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:30
msgid "``NEAREST``: Read from any member."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:32
msgid ""
":class:`~pymongo.mongo_client.MongoClient` connected to a mongos, with a "
"sharded cluster of replica sets:"
msgstr ""

#: of pymongo.read_preferences.ReadPreference:35
msgid ""
"``PRIMARY``: Read from the primary of the shard, or raise "
":class:`~pymongo.errors.OperationFailure` if there is none. This is the "
"default."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:39
msgid ""
"``PRIMARY_PREFERRED``: Read from the primary of the shard, or if there is"
" none, read from a secondary of the shard."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:42
msgid ""
"``SECONDARY``: Read from a secondary of the shard, or raise "
":class:`~pymongo.errors.OperationFailure` if there is none."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:45
msgid ""
"``SECONDARY_PREFERRED``: Read from a secondary of the shard if available,"
" otherwise from the shard primary."
msgstr ""

#: of pymongo.read_preferences.ReadPreference:48
msgid "``NEAREST``: Read from any shard member."
msgstr ""

#: ../../api/pymongo/results.rst:2
msgid ":mod:`results` -- Result class definitions"
msgstr ""

#: of pymongo.results:1
msgid "Result class definitions."
msgstr ""

#: of pymongo.results.BulkWriteResult:1
msgid "Create a BulkWriteResult instance."
msgstr ""

#: of pymongo.results.BulkWriteResult:4
msgid "`bulk_api_result`: A result dict from the bulk API"
msgstr ""

#: of pymongo.results.BulkWriteResult:5
msgid ""
"`acknowledged`: Was this write result acknowledged? If ``False`` then all"
" properties of this object will raise "
":exc:`~pymongo.errors.InvalidOperation`."
msgstr ""

#: of pymongo.results.BulkWriteResult.acknowledged:1
#: pymongo.results.DeleteResult.acknowledged:1
#: pymongo.results.InsertManyResult.acknowledged:1
#: pymongo.results.InsertOneResult.acknowledged:1
#: pymongo.results.UpdateResult.acknowledged:1
msgid "Is this the result of an acknowledged write operation?"
msgstr ""

#: of pymongo.results.BulkWriteResult.acknowledged:3
#: pymongo.results.DeleteResult.acknowledged:3
#: pymongo.results.InsertManyResult.acknowledged:3
#: pymongo.results.InsertOneResult.acknowledged:3
#: pymongo.results.UpdateResult.acknowledged:3
msgid ""
"The :attr:`acknowledged` attribute will be ``False`` when using "
"``WriteConcern(w=0)``, otherwise ``True``."
msgstr ""

#: of pymongo.results.BulkWriteResult.acknowledged:7
#: pymongo.results.DeleteResult.acknowledged:7
#: pymongo.results.InsertManyResult.acknowledged:7
#: pymongo.results.InsertOneResult.acknowledged:7
#: pymongo.results.UpdateResult.acknowledged:7
msgid ""
"If the :attr:`acknowledged` attribute is ``False`` all other attibutes of"
" this class will raise :class:`~pymongo.errors.InvalidOperation` when "
"accessed. Values for other attributes cannot be determined if the write "
"operation was unacknowledged."
msgstr ""

#: of pymongo.results.BulkWriteResult.acknowledged:14
#: pymongo.results.DeleteResult.acknowledged:14
#: pymongo.results.InsertManyResult.acknowledged:14
#: pymongo.results.InsertOneResult.acknowledged:14
#: pymongo.results.UpdateResult.acknowledged:14
msgid ":class:`~pymongo.write_concern.WriteConcern`"
msgstr ""

#: of pymongo.results.BulkWriteResult.bulk_api_result:1
msgid "The raw bulk API result."
msgstr ""

#: of pymongo.results.BulkWriteResult.deleted_count:1
#: pymongo.results.DeleteResult.deleted_count:1
msgid "The number of documents deleted."
msgstr ""

#: of pymongo.results.BulkWriteResult.inserted_count:1
msgid "The number of documents inserted."
msgstr ""

#: of pymongo.results.BulkWriteResult.matched_count:1
msgid "The number of documents matched for an update."
msgstr ""

#: of pymongo.results.BulkWriteResult.modified_count:1
#: pymongo.results.UpdateResult.modified_count:1
msgid "The number of documents modified."
msgstr ""

#: of pymongo.results.BulkWriteResult.modified_count:3
#: pymongo.results.UpdateResult.modified_count:3
msgid ""
"modified_count is only reported by MongoDB 2.6 and later. When connected "
"to an earlier server version, or in certain mixed version sharding "
"configurations, this attribute will be set to ``None``."
msgstr ""

#: of pymongo.results.BulkWriteResult.upserted_count:1
msgid "The number of documents upserted."
msgstr ""

#: of pymongo.results.BulkWriteResult.upserted_ids:1
msgid "A map of operation index to the _id of the upserted document."
msgstr ""

#: of pymongo.results.DeleteResult:1
msgid ""
"The return type for :meth:`~pymongo.collection.Collection.delete_one` and"
" :meth:`~pymongo.collection.Collection.delete_many`"
msgstr ""

#: of pymongo.results.DeleteResult.raw_result:1
#: pymongo.results.UpdateResult.raw_result:1
msgid "The raw result document returned by the server."
msgstr ""

#: of pymongo.results.InsertManyResult:1
msgid "The return type for :meth:`~pymongo.collection.Collection.insert_many`."
msgstr ""

#: of pymongo.results.InsertManyResult.inserted_ids:1
msgid "A list of _ids of the inserted documents, in the order provided."
msgstr ""

#: of pymongo.results.InsertManyResult.inserted_ids:3
msgid ""
"If ``False`` is passed for the `ordered` parameter to "
":meth:`~pymongo.collection.Collection.insert_many` the server may have "
"inserted the documents in a different order than what is presented here."
msgstr ""

#: of pymongo.results.InsertOneResult:1
msgid "The return type for :meth:`~pymongo.collection.Collection.insert_one`."
msgstr ""

#: of pymongo.results.InsertOneResult.inserted_id:1
msgid "The inserted document's _id."
msgstr ""

#: of pymongo.results.UpdateResult:1
msgid ""
"The return type for :meth:`~pymongo.collection.Collection.update_one`, "
":meth:`~pymongo.collection.Collection.update_many`, and "
":meth:`~pymongo.collection.Collection.replace_one`."
msgstr ""

#: of pymongo.results.UpdateResult.matched_count:1
msgid "The number of documents matched for this update."
msgstr ""

#: of pymongo.results.UpdateResult.upserted_id:1
msgid ""
"The _id of the inserted document if an upsert took place. Otherwise "
"``None``."
msgstr ""

#: ../../api/pymongo/server_description.rst:4
msgid ""
":mod:`server_description` -- An object representation of a server the "
"driver is connected to."
msgstr ""

#: of pymongo.server_description:1
msgid "Represent one server the driver is connected to."
msgstr ""

#: of pymongo.server_description.ServerDescription:1
msgid "Immutable representation of one server."
msgstr ""

#: of pymongo.server_description.ServerDescription:4
msgid "`address`: A (host, port) pair"
msgstr ""

#: of pymongo.server_description.ServerDescription:5
msgid "`ismaster`: Optional IsMaster instance"
msgstr ""

#: of pymongo.server_description.ServerDescription:6
msgid "`round_trip_time`: Optional float"
msgstr ""

#: of pymongo.server_description.ServerDescription:7
msgid "`error`: Optional, the last error attempting to connect to the server"
msgstr ""

#: of pymongo.server_description.ServerDescription.address:1
msgid "The address (host, port) of this server."
msgstr ""

#: of pymongo.server_description.ServerDescription.all_hosts:1
msgid "List of hosts, passives, and arbiters known to this server."
msgstr ""

#: of pymongo.server_description.ServerDescription.server_type:1
msgid "The type of this server."
msgstr ""

#: of pymongo.server_description.ServerDescription.server_type_name:1
msgid "The server type as a human readable string."
msgstr ""

#: ../../api/pymongo/son_manipulator.rst:2
msgid ""
":mod:`son_manipulator` -- Manipulators that can edit SON documents as "
"they are saved or retrieved"
msgstr ""

#: of pymongo.son_manipulator:1
msgid ""
"**DEPRECATED**: Manipulators that can edit SON objects as they enter and "
"exit a database."
msgstr ""

#: of pymongo.son_manipulator:4
msgid ""
"The :class:`~pymongo.son_manipulator.SONManipulator` API has limitations "
"as a technique for transforming your data. Instead, it is more flexible "
"and straightforward to transform outgoing documents in your own code "
"before passing them to PyMongo, and transform incoming documents after "
"receiving them from PyMongo. SON Manipulators will be removed from "
"PyMongo in 4.0."
msgstr ""

#: of pymongo.son_manipulator:10
msgid ""
"PyMongo does **not** apply SON manipulators to documents passed to the "
"modern methods :meth:`~pymongo.collection.Collection.bulk_write`, "
":meth:`~pymongo.collection.Collection.insert_one`, "
":meth:`~pymongo.collection.Collection.insert_many`, "
":meth:`~pymongo.collection.Collection.update_one`, or "
":meth:`~pymongo.collection.Collection.update_many`. SON manipulators are "
"**not** applied to documents returned by the modern methods "
":meth:`~pymongo.collection.Collection.find_one_and_delete`, "
":meth:`~pymongo.collection.Collection.find_one_and_replace`, and "
":meth:`~pymongo.collection.Collection.find_one_and_update`."
msgstr ""

#: of pymongo.son_manipulator.AutoReference:1
msgid "Transparently reference and de-reference already saved embedded objects."
msgstr ""

#: of pymongo.son_manipulator.AutoReference:3
msgid ""
"This manipulator should probably only be used when the NamespaceInjector "
"is also being used, otherwise it doesn't make too much sense - documents "
"can only be auto-referenced if they have an *_ns* field."
msgstr ""

#: of pymongo.son_manipulator.AutoReference:7
msgid "NOTE: this will behave poorly if you have a circular reference."
msgstr ""

#: of pymongo.son_manipulator.AutoReference:9
msgid ""
"TODO: this only works for documents that are in the same database. To fix"
" this we'll need to add a DatabaseInjector that adds *_db* and then make "
"use of the optional *database* support for DBRefs."
msgstr ""

#: of pymongo.son_manipulator.AutoReference.transform_incoming:1
msgid "Replace embedded documents with DBRefs."
msgstr ""

#: of pymongo.son_manipulator.AutoReference.transform_outgoing:1
msgid "Replace DBRefs with embedded documents."
msgstr ""

#: of pymongo.son_manipulator.AutoReference.will_copy:1
msgid "We need to copy so the user's document doesn't get transformed refs."
msgstr ""

#: of pymongo.son_manipulator.NamespaceInjector:1
msgid "A son manipulator that adds the _ns field."
msgstr ""

#: of pymongo.son_manipulator.NamespaceInjector.transform_incoming:1
msgid "Add the _ns field to the incoming object"
msgstr ""

#: of pymongo.son_manipulator.ObjectIdInjector:1
msgid "A son manipulator that adds the _id field if it is missing."
msgstr ""

#: of pymongo.son_manipulator.ObjectIdInjector:3
msgid ""
"ObjectIdInjector is no longer used by PyMongo, but remains in this module"
" for backwards compatibility."
msgstr ""

#: of pymongo.son_manipulator.ObjectIdInjector.transform_incoming:1
msgid "Add an _id field if it is missing."
msgstr ""

#: of pymongo.son_manipulator.ObjectIdShuffler:1
msgid "A son manipulator that moves _id to the first position."
msgstr ""

#: of pymongo.son_manipulator.ObjectIdShuffler.transform_incoming:1
msgid "Move _id to the front if it's there."
msgstr ""

#: of pymongo.son_manipulator.ObjectIdShuffler.will_copy:1
msgid "We need to copy to be sure that we are dealing with SON, not a dict."
msgstr ""

#: of pymongo.son_manipulator.SONManipulator:1
msgid "A base son manipulator."
msgstr ""

#: of pymongo.son_manipulator.SONManipulator:3
msgid "This manipulator just saves and restores objects without changing them."
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_incoming:1
msgid "Manipulate an incoming SON object."
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_incoming:4
msgid "`son`: the SON object to be inserted into the database"
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_incoming:5
msgid "`collection`: the collection the object is being inserted into"
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_outgoing:1
msgid "Manipulate an outgoing SON object."
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_outgoing:4
msgid "`son`: the SON object being retrieved from the database"
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.transform_outgoing:5
msgid "`collection`: the collection this object was stored in"
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.will_copy:1
msgid "Will this SON manipulator make a copy of the incoming document?"
msgstr ""

#: of pymongo.son_manipulator.SONManipulator.will_copy:3
msgid ""
"Derived classes that do need to make a copy should override this method, "
"returning True instead of False. All non-copying manipulators will be "
"applied first (so that the user's document will be updated "
"appropriately), followed by copying manipulators."
msgstr ""

#: ../../api/pymongo/topology_description.rst:4
msgid ""
":mod:`topology_description` -- An object representation of a deployment "
"of MongoDB servers."
msgstr ""

#: of pymongo.topology_description:1
msgid "Represent a deployment of MongoDB servers."
msgstr ""

#: of pymongo.topology_description.TopologyDescription:1
msgid "Representation of a deployment of MongoDB servers."
msgstr ""

#: of pymongo.topology_description.TopologyDescription:4
msgid "`topology_type`: initial type"
msgstr ""

#: of pymongo.topology_description.TopologyDescription:5
msgid "`server_descriptions`: dict of (address, ServerDescription) for all seeds"
msgstr ""

#: of pymongo.topology_description.TopologyDescription:7
msgid "`replica_set_name`: replica set name or None"
msgstr ""

#: of pymongo.topology_description.TopologyDescription:8
msgid "`max_set_version`: greatest setVersion seen from a primary, or None"
msgstr ""

#: of pymongo.topology_description.TopologyDescription:9
msgid "`max_election_id`: greatest electionId seen from a primary, or None"
msgstr ""

#: of pymongo.topology_description.TopologyDescription:10
msgid "`topology_settings`: a TopologySettings"
msgstr ""

#: of pymongo.topology_description.TopologyDescription.has_readable_server:1
msgid ""
"Does this topology have any readable servers available matching the given"
" read preference?"
msgstr ""

#: of pymongo.topology_description.TopologyDescription.has_readable_server:5
msgid ""
"`read_preference`: an instance of a read preference from "
":mod:`~pymongo.read_preferences`. Defaults to "
":attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`."
msgstr ""

#: of pymongo.topology_description.TopologyDescription.has_readable_server:9
#: pymongo.topology_description.TopologyDescription.has_writable_server:3
msgid ""
"When connected directly to a single server this method always returns "
"``True``."
msgstr ""

#: of pymongo.topology_description.TopologyDescription.has_writable_server:1
msgid "Does this topology have a writable server available?"
msgstr ""

#: of pymongo.topology_description.TopologyDescription.server_descriptions:1
msgid "Dict of (address, :class:`~pymongo.server_description.ServerDescription`)."
msgstr ""

#: of pymongo.topology_description.TopologyDescription.topology_type:1
msgid "The type of this topology."
msgstr ""

#: of pymongo.topology_description.TopologyDescription.topology_type_name:1
msgid "The topology type as a human readable string."
msgstr ""

#: ../../api/pymongo/uri_parser.rst:2
msgid ":mod:`uri_parser` -- Tools to parse and validate a MongoDB URI"
msgstr ""

#: of pymongo.uri_parser:1
msgid "Tools to parse and validate a MongoDB URI."
msgstr ""

#: of pymongo.uri_parser.parse_host:1
msgid "Validates a host string"
msgstr ""

#: of pymongo.uri_parser.parse_host:3
msgid ""
"Returns a 2-tuple of host followed by port where port is default_port if "
"it wasn't specified in the string."
msgstr ""

#: of pymongo.uri_parser.parse_host:7
msgid "`entity`: A host or host:port string where host could be a"
msgstr ""

#: of pymongo.uri_parser.parse_host:8
msgid "hostname or IP address."
msgstr ""

#: of pymongo.uri_parser.parse_host:9
#: pymongo.uri_parser.parse_ipv6_literal_host:9
msgid "`default_port`: The port number to use when one wasn't"
msgstr ""

#: of pymongo.uri_parser.parse_host:10
#: pymongo.uri_parser.parse_ipv6_literal_host:10
msgid "specified in entity."
msgstr ""

#: of pymongo.uri_parser.parse_ipv6_literal_host:1
msgid "Validates an IPv6 literal host:port string."
msgstr ""

#: of pymongo.uri_parser.parse_ipv6_literal_host:3
msgid ""
"Returns a 2-tuple of IPv6 literal followed by port where port is "
"default_port if it wasn't specified in entity."
msgstr ""

#: of pymongo.uri_parser.parse_ipv6_literal_host:7
msgid "`entity`: A string that represents an IPv6 literal enclosed"
msgstr ""

#: of pymongo.uri_parser.parse_ipv6_literal_host:8
msgid "in braces (e.g. '[::1]' or '[::1]:27017')."
msgstr ""

#: of pymongo.uri_parser.parse_uri:1
msgid "Parse and validate a MongoDB URI."
msgstr ""

#: of pymongo.uri_parser.parse_uri:3
msgid "Returns a dict of the form::"
msgstr ""

#: of pymongo.uri_parser.parse_uri:15
msgid ""
"If the URI scheme is \"mongodb+srv://\" DNS SRV and TXT lookups will be "
"done to build nodelist and options."
msgstr ""

#: of pymongo.uri_parser.parse_uri:19
msgid "`uri`: The MongoDB URI to parse."
msgstr ""

#: of pymongo.uri_parser.parse_uri:20
msgid ""
"`default_port`: The port number to use when one wasn't specified for a "
"host in the URI."
msgstr ""

#: of pymongo.uri_parser.parse_uri:22
msgid ""
"`validate` (optional): If ``True`` (the default), validate and normalize "
"all options. Default: ``True``."
msgstr ""

#: of pymongo.uri_parser.parse_uri:24
msgid ""
"`warn` (optional): When validating, if ``True`` then will warn the user "
"then ignore any invalid options or values. If ``False``, validation will "
"error when options are unsupported or values are invalid. Default: "
"``False``."
msgstr ""

#: of pymongo.uri_parser.parse_uri:28
msgid ""
"`normalize` (optional): If ``True``, convert names of URI options to "
"their internally-used names. Default: ``True``."
msgstr ""

#: of pymongo.uri_parser.parse_uri:30
msgid ""
"`connect_timeout` (optional): The maximum time in milliseconds to wait "
"for a response from the DNS server."
msgstr ""

#: of pymongo.uri_parser.parse_uri:33
msgid "Added the ``normalize`` parameter."
msgstr ""

#: of pymongo.uri_parser.parse_uri:36
msgid "Added support for mongodb+srv:// URIs."
msgstr ""

#: of pymongo.uri_parser.parse_uri:39
msgid ""
"Return the original value of the ``readPreference`` MongoDB URI option "
"instead of the validated read preference mode."
msgstr ""

#: of pymongo.uri_parser.parse_uri:43
msgid "``warn`` added so invalid options can be ignored."
msgstr ""

#: of pymongo.uri_parser.parse_userinfo:1
msgid ""
"Validates the format of user information in a MongoDB URI. Reserved "
"characters like ':', '/', '+' and '@' must be escaped following RFC 3986."
msgstr ""

#: of pymongo.uri_parser.parse_userinfo:5
msgid ""
"Returns a 2-tuple containing the unescaped username followed by the "
"unescaped password."
msgstr ""

#: of pymongo.uri_parser.parse_userinfo
msgid "Paramaters"
msgstr ""

#: of pymongo.uri_parser.parse_userinfo:9
msgid "`userinfo`: A string of the form <username>:<password>"
msgstr ""

#: of pymongo.uri_parser.parse_userinfo:11
msgid "Now uses `urllib.unquote_plus` so `+` characters must be escaped."
msgstr ""

#: of pymongo.uri_parser.split_hosts:1
msgid ""
"Takes a string of the form host1[:port],host2[:port]... and splits it "
"into (host, port) tuples. If [:port] isn't present the default_port is "
"used."
msgstr ""

#: of pymongo.uri_parser.split_hosts:5
msgid ""
"Returns a set of 2-tuples containing the host name (or IP) followed by "
"port number."
msgstr ""

#: of pymongo.uri_parser.split_hosts:9
msgid "`hosts`: A string of the form host1[:port],host2[:port],..."
msgstr ""

#: of pymongo.uri_parser.split_hosts:10
msgid ""
"`default_port`: The port number to use when one wasn't specified for a "
"host."
msgstr ""

#: of pymongo.uri_parser.split_options:1
msgid ""
"Takes the options portion of a MongoDB URI, validates each option and "
"returns the options in a dictionary."
msgstr ""

#: of pymongo.uri_parser.split_options:5
msgid "`opt`: A string representing MongoDB URI options."
msgstr ""

#: of pymongo.uri_parser.split_options:6
msgid "`validate`: If ``True`` (the default), validate and normalize all options."
msgstr ""

#: of pymongo.uri_parser.split_options:8
msgid ""
"`warn`: If ``False`` (the default), suppress all warnings raised during "
"validation of options."
msgstr ""

#: of pymongo.uri_parser.split_options:10
msgid ""
"`normalize`: If ``True`` (the default), renames all options to their "
"internally-used names."
msgstr ""

#: of pymongo.uri_parser.validate_options:1
msgid "Validates and normalizes options passed in a MongoDB URI."
msgstr ""

#: of pymongo.uri_parser.validate_options:3
msgid ""
"Returns a new dictionary of validated and normalized options. If warn is "
"False then errors will be thrown for invalid options, otherwise they will"
" be ignored and a warning will be issued."
msgstr ""

#: of pymongo.uri_parser.validate_options:8
msgid "`opts`: A dict of MongoDB URI options."
msgstr ""

#: of pymongo.uri_parser.validate_options:9
msgid ""
"`warn` (optional): If ``True`` then warnings will be logged and invalid "
"options will be ignored. Otherwise invalid options will cause errors."
msgstr ""

#: ../../api/pymongo/write_concern.rst:2
msgid ":mod:`write_concern` -- Tools for specifying write concern"
msgstr ""

#: of pymongo.write_concern:1
msgid "Tools for working with write concerns."
msgstr ""

#: of pymongo.write_concern.WriteConcern:2
msgid ""
"`w`: (integer or string) Used with replication, write operations will "
"block until they have been replicated to the specified number or tagged "
"set of servers. `w=<integer>` always includes the replica set primary "
"(e.g. w=3 means write to the primary and wait until replicated to **two**"
" secondaries). **w=0 disables acknowledgement of write operations and can"
" not be used with other write concern options.**"
msgstr ""

#: of pymongo.write_concern.WriteConcern:9
msgid ""
"`wtimeout`: (integer) Used in conjunction with `w`. Specify a value in "
"milliseconds to control how long to wait for write propagation to "
"complete. If replication does not complete in the given timeframe, a "
"timeout exception is raised."
msgstr ""

#: of pymongo.write_concern.WriteConcern:13
msgid ""
"`j`: If ``True`` block until write operations have been committed to the "
"journal. Cannot be used in combination with `fsync`. Prior to MongoDB 2.6"
" this option was ignored if the server was running without journaling. "
"Starting with MongoDB 2.6 write operations will fail with an exception if"
" this option is used when the server is running without journaling."
msgstr ""

#: of pymongo.write_concern.WriteConcern.acknowledged:1
msgid ""
"If ``True`` write operations will wait for acknowledgement before "
"returning."
msgstr ""

#: of pymongo.write_concern.WriteConcern.document:1
msgid "The document representation of this write concern."
msgstr ""

#: of pymongo.write_concern.WriteConcern.document:4
msgid ""
":class:`WriteConcern` is immutable. Mutating the value of "
":attr:`document` does not mutate this :class:`WriteConcern`."
msgstr ""

#: of pymongo.write_concern.WriteConcern.is_server_default:1
msgid "Does this WriteConcern match the server default."
msgstr ""

